

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Dec 28 15:09:49 2023

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    79                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    80  0000                     
    81                           ; Version 1.45
    82                           ; Generated 16/11/2017 GMT
    83                           ; 
    84                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC18F4620 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     
   116                           	psect	idataCOMRAM
   117  002E3A                     __pidataCOMRAM:
   118                           	opt stack 0
   119                           
   120                           ;initializer for _LCD_INIT_STRING
   121  002E3A  28                 	db	40
   122  002E3B  0C                 	db	12
   123  002E3C  01                 	db	1
   124  002E3D  06                 	db	6
   125                           
   126                           	psect	idataBANK0
   127  002DAE                     __pidataBANK0:
   128                           	opt stack 0
   129                           
   130                           ;initializer for _wkday
   131  002DAE  EA                 	db	low STR_1
   132  002DAF  FF                 	db	high STR_1
   133  002DB0  E6                 	db	low STR_2
   134  002DB1  FF                 	db	high STR_2
   135  002DB2  DE                 	db	low STR_3
   136  002DB3  FF                 	db	high STR_3
   137  002DB4  DA                 	db	low STR_4
   138  002DB5  FF                 	db	high STR_4
   139  002DB6  F6                 	db	low STR_5
   140  002DB7  FF                 	db	high STR_5
   141  002DB8  E2                 	db	low STR_6
   142  002DB9  FF                 	db	high STR_6
   143  002DBA  F2                 	db	low STR_7
   144  002DBB  FF                 	db	high STR_7
   145  002DBC  EE                 	db	low STR_8
   146  002DBD  FF                 	db	high STR_8
   147                           
   148                           	psect	mediumconst
   149  00FED6                     __pmediumconst:
   150                           	opt stack 0
   151  00FED6  00                 	db	0
   152  00FED7                     _dpowers:
   153                           	opt stack 0
   154  00FED7  0001               	dw	1
   155  00FED9  0000               	dw	0
   156  00FEDB  000A               	dw	10
   157  00FEDD  0000               	dw	0
   158  00FEDF  0064               	dw	100
   159  00FEE1  0000               	dw	0
   160  00FEE3  03E8               	dw	1000
   161  00FEE5  0000               	dw	0
   162  00FEE7  2710               	dw	10000
   163  00FEE9  0000               	dw	0
   164  00FEEB  86A0               	dw	34464
   165  00FEED  0001               	dw	1
   166  00FEEF  4240               	dw	16960
   167  00FEF1  000F               	dw	15
   168  00FEF3  9680               	dw	38528
   169  00FEF5  0098               	dw	152
   170  00FEF7  E100               	dw	57600
   171  00FEF9  05F5               	dw	1525
   172  00FEFB  CA00               	dw	51712
   173  00FEFD  3B9A               	dw	15258
   174  00FEFF                     __end_of_dpowers:
   175                           	opt stack 0
   176  00FEFF                     __powers_:
   177                           	opt stack 0
   178  00FEFF  00                 	db	0
   179  00FF00  80                 	db	128
   180  00FF01  3F                 	db	63
   181  00FF02  00                 	db	0
   182  00FF03  20                 	db	32
   183  00FF04  41                 	db	65
   184  00FF05  00                 	db	0
   185  00FF06  C8                 	db	200
   186  00FF07  42                 	db	66
   187  00FF08  00                 	db	0
   188  00FF09  7A                 	db	122
   189  00FF0A  44                 	db	68
   190  00FF0B  40                 	db	64
   191  00FF0C  1C                 	db	28
   192  00FF0D  46                 	db	70
   193  00FF0E  50                 	db	80
   194  00FF0F  C3                 	db	195
   195  00FF10  47                 	db	71
   196  00FF11  24                 	db	36
   197  00FF12  74                 	db	116
   198  00FF13  49                 	db	73
   199  00FF14  97                 	db	151
   200  00FF15  18                 	db	24
   201  00FF16  4B                 	db	75
   202  00FF17  BC                 	db	188
   203  00FF18  BE                 	db	190
   204  00FF19  4C                 	db	76
   205  00FF1A  6B                 	db	107
   206  00FF1B  6E                 	db	110
   207  00FF1C  4E                 	db	78
   208  00FF1D  03                 	db	3
   209  00FF1E  15                 	db	21
   210  00FF1F  50                 	db	80
   211  00FF20  79                 	db	121
   212  00FF21  AD                 	db	173
   213  00FF22  60                 	db	96
   214  00FF23  F3                 	db	243
   215  00FF24  49                 	db	73
   216  00FF25  71                 	db	113
   217  00FF26                     __end_of__powers_:
   218                           	opt stack 0
   219  00FF26                     __npowers_:
   220                           	opt stack 0
   221  00FF26  00                 	db	0
   222  00FF27  80                 	db	128
   223  00FF28  3F                 	db	63
   224  00FF29  CD                 	db	205
   225  00FF2A  CC                 	db	204
   226  00FF2B  3D                 	db	61
   227  00FF2C  D7                 	db	215
   228  00FF2D  23                 	db	35
   229  00FF2E  3C                 	db	60
   230  00FF2F  12                 	db	18
   231  00FF30  83                 	db	131
   232  00FF31  3A                 	db	58
   233  00FF32  B7                 	db	183
   234  00FF33  D1                 	db	209
   235  00FF34  38                 	db	56
   236  00FF35  C6                 	db	198
   237  00FF36  27                 	db	39
   238  00FF37  37                 	db	55
   239  00FF38  38                 	db	56
   240  00FF39  86                 	db	134
   241  00FF3A  35                 	db	53
   242  00FF3B  C0                 	db	192
   243  00FF3C  D6                 	db	214
   244  00FF3D  33                 	db	51
   245  00FF3E  CC                 	db	204
   246  00FF3F  2B                 	db	43
   247  00FF40  32                 	db	50
   248  00FF41  70                 	db	112
   249  00FF42  89                 	db	137
   250  00FF43  30                 	db	48
   251  00FF44  E7                 	db	231
   252  00FF45  DB                 	db	219
   253  00FF46  2E                 	db	46
   254  00FF47  E5                 	db	229
   255  00FF48  3C                 	db	60
   256  00FF49  1E                 	db	30
   257  00FF4A  42                 	db	66
   258  00FF4B  A2                 	db	162
   259  00FF4C  0D                 	db	13
   260  00FF4D                     __end_of__npowers_:
   261                           	opt stack 0
   262  0000                     _TXREG	set	4013
   263  0000                     _PIR1bits	set	3998
   264  0000                     _RCREG	set	4014
   265  0000                     _RCSTAbits	set	4011
   266  0000                     _RCSTA	set	4011
   267  0000                     _TXSTAbits	set	4012
   268  0000                     _SPBRGH	set	4016
   269  0000                     _SPBRG	set	4015
   270  0000                     _TXSTA	set	4012
   271  0000                     _BAUDCONbits	set	4024
   272  0000                     _ADRESL	set	4035
   273  0000                     _ADRESH	set	4036
   274  0000                     _CCP1CONbits	set	4029
   275  0000                     _CCPR1L	set	4030
   276  0000                     _T2CONbits	set	4042
   277  0000                     _CCP1CON	set	4029
   278  0000                     _T2CON	set	4042
   279  0000                     _PR2	set	4043
   280  0000                     _PORTEbits	set	3972
   281  0000                     _TRISA	set	3986
   282  0000                     _TRISB	set	3987
   283  0000                     _ADCON0	set	4034
   284  0000                     _TRISCbits	set	3988
   285  0000                     _PORTD	set	3971
   286  0000                     _TRISE	set	3990
   287  0000                     _TRISD	set	3989
   288  0000                     _TRISC	set	3988
   289  0000                     _ADCON1	set	4033
   290  0000                     _PORTCbits	set	3970
   291  0000                     _TMR1L	set	4046
   292  0000                     _TMR1H	set	4047
   293  0000                     _T1CONbits	set	4045
   294  0000                     _TMR0L	set	4054
   295  0000                     _TMR0H	set	4055
   296  0000                     _T0CONbits	set	4053
   297  0000                     _INTCONbits	set	4082
   298  0000                     _T0CON	set	4053
   299  0000                     _ADCON1bits	set	4033
   300  0000                     _ADCON2bits	set	4032
   301  0000                     _ADCON0bits	set	4034
   302  0000                     _ADCON2	set	4032
   303  00FF4D                     STR_18:
   304                           
   305                           ; BSR set to: 0
   306  00FF4D  41                 	db	65	;'A'
   307  00FF4E  4E                 	db	78	;'N'
   308  00FF4F  30                 	db	48	;'0'
   309  00FF50  3D                 	db	61	;'='
   310  00FF51  20                 	db	32
   311  00FF52  25                 	db	37
   312  00FF53  33                 	db	51	;'3'
   313  00FF54  2E                 	db	46
   314  00FF55  32                 	db	50	;'2'
   315  00FF56  66                 	db	102	;'f'
   316  00FF57  20                 	db	32
   317  00FF58  76                 	db	118	;'v'
   318  00FF59  6F                 	db	111	;'o'
   319  00FF5A  6C                 	db	108	;'l'
   320  00FF5B  74                 	db	116	;'t'
   321  00FF5C  2C                 	db	44
   322  00FF5D  20                 	db	32
   323  00FF5E  41                 	db	65	;'A'
   324  00FF5F  4E                 	db	78	;'N'
   325  00FF60  31                 	db	49	;'1'
   326  00FF61  20                 	db	32
   327  00FF62  3D                 	db	61	;'='
   328  00FF63  20                 	db	32
   329  00FF64  25                 	db	37
   330  00FF65  33                 	db	51	;'3'
   331  00FF66  2E                 	db	46
   332  00FF67  32                 	db	50	;'2'
   333  00FF68  66                 	db	102	;'f'
   334  00FF69  20                 	db	32
   335  00FF6A  76                 	db	118	;'v'
   336  00FF6B  6F                 	db	111	;'o'
   337  00FF6C  6C                 	db	108	;'l'
   338  00FF6D  74                 	db	116	;'t'
   339  00FF6E  2C                 	db	44
   340  00FF6F  20                 	db	32
   341  00FF70  41                 	db	65	;'A'
   342  00FF71  4E                 	db	78	;'N'
   343  00FF72  32                 	db	50	;'2'
   344  00FF73  20                 	db	32
   345  00FF74  3D                 	db	61	;'='
   346  00FF75  20                 	db	32
   347  00FF76  25                 	db	37
   348  00FF77  33                 	db	51	;'3'
   349  00FF78  2E                 	db	46
   350  00FF79  32                 	db	50	;'2'
   351  00FF7A  66                 	db	102	;'f'
   352  00FF7B  20                 	db	32
   353  00FF7C  76                 	db	118	;'v'
   354  00FF7D  6F                 	db	111	;'o'
   355  00FF7E  6C                 	db	108	;'l'
   356  00FF7F  74                 	db	116	;'t'
   357  00FF80  2C                 	db	44
   358  00FF81  0D                 	db	13
   359  00FF82  00                 	db	0
   360  00FF83                     STR_9:
   361                           
   362                           ; BSR set to: 0
   363  00FF83  25                 	db	37
   364  00FF84  33                 	db	51	;'3'
   365  00FF85  2E                 	db	46
   366  00FF86  32                 	db	50	;'2'
   367  00FF87  66                 	db	102	;'f'
   368  00FF88  2C                 	db	44
   369  00FF89  20                 	db	32
   370  00FF8A  25                 	db	37
   371  00FF8B  33                 	db	51	;'3'
   372  00FF8C  2E                 	db	46
   373  00FF8D  32                 	db	50	;'2'
   374  00FF8E  66                 	db	102	;'f'
   375  00FF8F  2C                 	db	44
   376  00FF90  20                 	db	32
   377  00FF91  25                 	db	37
   378  00FF92  33                 	db	51	;'3'
   379  00FF93  2E                 	db	46
   380  00FF94  32                 	db	50	;'2'
   381  00FF95  66                 	db	102	;'f'
   382  00FF96  00                 	db	0
   383  00FF97                     STR_12:
   384                           
   385                           ; BSR set to: 0
   386  00FF97  49                 	db	73	;'I'
   387  00FF98  4E                 	db	78	;'N'
   388  00FF99  56                 	db	86	;'V'
   389  00FF9A  41                 	db	65	;'A'
   390  00FF9B  4C                 	db	76	;'L'
   391  00FF9C  49                 	db	73	;'I'
   392  00FF9D  44                 	db	68	;'D'
   393  00FF9E  20                 	db	32
   394  00FF9F  43                 	db	67	;'C'
   395  00FFA0  4F                 	db	79	;'O'
   396  00FFA1  4D                 	db	77	;'M'
   397  00FFA2  4D                 	db	77	;'M'
   398  00FFA3  41                 	db	65	;'A'
   399  00FFA4  4E                 	db	78	;'N'
   400  00FFA5  44                 	db	68	;'D'
   401  00FFA6  0A                 	db	10
   402  00FFA7  00                 	db	0
   403  00FFA8                     STR_25:
   404                           
   405                           ; BSR set to: 0
   406  00FFA8  53                 	db	83	;'S'
   407  00FFA9  70                 	db	112	;'p'
   408  00FFAA  65                 	db	101	;'e'
   409  00FFAB  65                 	db	101	;'e'
   410  00FFAC  64                 	db	100	;'d'
   411  00FFAD  3D                 	db	61	;'='
   412  00FFAE  25                 	db	37
   413  00FFAF  36                 	db	54	;'6'
   414  00FFB0  2E                 	db	46
   415  00FFB1  32                 	db	50	;'2'
   416  00FFB2  66                 	db	102	;'f'
   417  00FFB3  20                 	db	32
   418  00FFB4  52                 	db	82	;'R'
   419  00FFB5  50                 	db	80	;'P'
   420  00FFB6  53                 	db	83	;'S'
   421  00FFB7  0A                 	db	10
   422  00FFB8  00                 	db	0
   423  00FFB9                     STR_21:
   424                           
   425                           ; BSR set to: 0
   426  00FFB9  44                 	db	68	;'D'
   427  00FFBA  3D                 	db	61	;'='
   428  00FFBB  25                 	db	37
   429  00FFBC  35                 	db	53	;'5'
   430  00FFBD  64                 	db	100	;'d'
   431  00FFBE  20                 	db	32
   432  00FFBF  2C                 	db	44
   433  00FFC0  25                 	db	37
   434  00FFC1  36                 	db	54	;'6'
   435  00FFC2  2E                 	db	46
   436  00FFC3  32                 	db	50	;'2'
   437  00FFC4  66                 	db	102	;'f'
   438  00FFC5  00                 	db	0
   439  00FFC6                     STR_11:
   440                           
   441                           ; BSR set to: 0
   442  00FFC6  44                 	db	68	;'D'
   443  00FFC7  3D                 	db	61	;'='
   444  00FFC8  25                 	db	37
   445  00FFC9  34                 	db	52	;'4'
   446  00FFCA  64                 	db	100	;'d'
   447  00FFCB  20                 	db	32
   448  00FFCC  25                 	db	37
   449  00FFCD  36                 	db	54	;'6'
   450  00FFCE  2E                 	db	46
   451  00FFCF  32                 	db	50	;'2'
   452  00FFD0  66                 	db	102	;'f'
   453  00FFD1  00                 	db	0
   454  00FFD2                     STR_10:
   455                           
   456                           ; BSR set to: 0
   457  00FFD2  53                 	db	83	;'S'
   458  00FFD3  3D                 	db	61	;'='
   459  00FFD4  25                 	db	37
   460  00FFD5  34                 	db	52	;'4'
   461  00FFD6  2E                 	db	46
   462  00FFD7  32                 	db	50	;'2'
   463  00FFD8  66                 	db	102	;'f'
   464  00FFD9  00                 	db	0
   465  00FFDA                     STR_4:
   466                           
   467                           ; BSR set to: 0
   468  00FFDA  57                 	db	87	;'W'
   469  00FFDB  65                 	db	101	;'e'
   470  00FFDC  64                 	db	100	;'d'
   471  00FFDD  00                 	db	0
   472  00FFDE                     STR_3:
   473                           
   474                           ; BSR set to: 0
   475  00FFDE  54                 	db	84	;'T'
   476  00FFDF  75                 	db	117	;'u'
   477  00FFE0  65                 	db	101	;'e'
   478  00FFE1  00                 	db	0
   479  00FFE2                     STR_6:
   480                           
   481                           ; BSR set to: 0
   482  00FFE2  46                 	db	70	;'F'
   483  00FFE3  72                 	db	114	;'r'
   484  00FFE4  69                 	db	105	;'i'
   485  00FFE5  00                 	db	0
   486  00FFE6                     STR_2:
   487                           
   488                           ; BSR set to: 0
   489  00FFE6  4D                 	db	77	;'M'
   490  00FFE7  6F                 	db	111	;'o'
   491  00FFE8  6E                 	db	110	;'n'
   492  00FFE9  00                 	db	0
   493  00FFEA                     STR_1:
   494                           
   495                           ; BSR set to: 0
   496  00FFEA  53                 	db	83	;'S'
   497  00FFEB  75                 	db	117	;'u'
   498  00FFEC  6E                 	db	110	;'n'
   499  00FFED  00                 	db	0
   500  00FFEE                     STR_8:
   501                           
   502                           ; BSR set to: 0
   503  00FFEE  45                 	db	69	;'E'
   504  00FFEF  72                 	db	114	;'r'
   505  00FFF0  72                 	db	114	;'r'
   506  00FFF1  00                 	db	0
   507  00FFF2                     STR_7:
   508                           
   509                           ; BSR set to: 0
   510  00FFF2  53                 	db	83	;'S'
   511  00FFF3  61                 	db	97	;'a'
   512  00FFF4  74                 	db	116	;'t'
   513  00FFF5  00                 	db	0
   514  00FFF6                     STR_5:
   515                           
   516                           ; BSR set to: 0
   517  00FFF6  54                 	db	84	;'T'
   518  00FFF7  68                 	db	104	;'h'
   519  00FFF8  75                 	db	117	;'u'
   520  00FFF9  00                 	db	0
   521  00FFFA                     STR_13:
   522                           
   523                           ; BSR set to: 0
   524  00FFFA  0D                 	db	13
   525  00FFFB  0A                 	db	10
   526  00FFFC  00                 	db	0
   527  00FFFD                     STR_22:
   528                           
   529                           ; BSR set to: 0
   530  00FFFD  25                 	db	37
   531  00FFFE  00                 	db	0
   532  0000                     
   533                           ; #config settings
   534  00FFFF  00                 	db	0	; dummy byte at the end
   535  0000                     
   536                           	psect	cinit
   537  0026BE                     __pcinit:
   538                           	opt stack 0
   539  0026BE                     start_initialization:
   540                           	opt stack 0
   541  0026BE                     __initialization:
   542                           	opt stack 0
   543                           
   544                           ; Initialize objects allocated to BANK0 (16 bytes)
   545                           ; load TBLPTR registers with __pidataBANK0
   546  0026BE  0EAE               	movlw	low __pidataBANK0
   547  0026C0  6EF6               	movwf	tblptrl,c
   548  0026C2  0E2D               	movlw	high __pidataBANK0
   549  0026C4  6EF7               	movwf	tblptrh,c
   550  0026C6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   551  0026C8  6EF8               	movwf	tblptru,c
   552  0026CA  EE00  F0EF         	lfsr	0,__pdataBANK0
   553  0026CE  EE10 F010          	lfsr	1,16
   554  0026D2                     copy_data0:
   555  0026D2  0009               	tblrd		*+
   556  0026D4  CFF5 FFEE          	movff	tablat,postinc0
   557  0026D8  50E5               	movf	postdec1,w,c
   558  0026DA  50E1               	movf	fsr1l,w,c
   559  0026DC  E1FA               	bnz	copy_data0
   560                           
   561                           ; Initialize objects allocated to COMRAM (4 bytes)
   562                           ; load TBLPTR registers with __pidataCOMRAM
   563  0026DE  0E3A               	movlw	low __pidataCOMRAM
   564  0026E0  6EF6               	movwf	tblptrl,c
   565  0026E2  0E2E               	movlw	high __pidataCOMRAM
   566  0026E4  6EF7               	movwf	tblptrh,c
   567  0026E6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   568  0026E8  6EF8               	movwf	tblptru,c
   569  0026EA  EE00  F067         	lfsr	0,__pdataCOMRAM
   570  0026EE  EE10 F004          	lfsr	1,4
   571  0026F2                     copy_data1:
   572  0026F2  0009               	tblrd		*+
   573  0026F4  CFF5 FFEE          	movff	tablat,postinc0
   574  0026F8  50E5               	movf	postdec1,w,c
   575  0026FA  50E1               	movf	fsr1l,w,c
   576  0026FC  E1FA               	bnz	copy_data1
   577                           
   578                           ; Clear objects allocated to BANK1 (2 bytes)
   579  0026FE  0101               	movlb	1
   580  002700  6BCD               	clrf	(__pbssBANK1+1)& (0+255),b
   581  002702  6BCC               	clrf	__pbssBANK1& (0+255),b
   582                           
   583                           ; Clear objects allocated to BANK0 (24 bytes)
   584  002704  EE00  F0D7         	lfsr	0,__pbssBANK0
   585  002708  0E18               	movlw	24
   586  00270A                     clear_0:
   587  00270A  6AEE               	clrf	postinc0,c
   588  00270C  06E8               	decf	wreg,f,c
   589  00270E  E1FD               	bnz	clear_0
   590                           
   591                           ; Clear objects allocated to COMRAM (12 bytes)
   592  002710  EE00  F05B         	lfsr	0,__pbssCOMRAM
   593  002714  0E0C               	movlw	12
   594  002716                     clear_1:
   595  002716  6AEE               	clrf	postinc0,c
   596  002718  06E8               	decf	wreg,f,c
   597  00271A  E1FD               	bnz	clear_1
   598  00271C                     end_of_initialization:
   599                           	opt stack 0
   600  00271C                     __end_of__initialization:
   601                           	opt stack 0
   602  00271C  906B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   603  00271E  926B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   604  002720  0E00               	movlw	low (__Lmediumconst shr (0+16))
   605  002722  6EF8               	movwf	tblptru,c
   606  002724  0100               	movlb	0
   607  002726  EF9A  F005         	goto	_main	;jump to C main() function
   608                           tblptru	equ	0xFF8
   609                           tblptrh	equ	0xFF7
   610                           tblptrl	equ	0xFF6
   611                           tablat	equ	0xFF5
   612                           postinc0	equ	0xFEE
   613                           wreg	equ	0xFE8
   614                           postdec1	equ	0xFE5
   615                           fsr1l	equ	0xFE1
   616                           
   617                           	psect	bssCOMRAM
   618  00005B                     __pbssCOMRAM:
   619                           	opt stack 0
   620  00005B                     _receivedCommand:
   621                           	opt stack 0
   622  00005B                     	ds	5
   623  000060                     _year:
   624                           	opt stack 0
   625  000060                     	ds	1
   626  000061                     _month:
   627                           	opt stack 0
   628  000061                     	ds	1
   629  000062                     _dayOfMonth:
   630                           	opt stack 0
   631  000062                     	ds	1
   632  000063                     _weekday:
   633                           	opt stack 0
   634  000063                     	ds	1
   635  000064                     _hours:
   636                           	opt stack 0
   637  000064                     	ds	1
   638  000065                     _minutes:
   639                           	opt stack 0
   640  000065                     	ds	1
   641  000066                     _seconds:
   642                           	opt stack 0
   643  000066                     	ds	1
   644                           tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           postdec1	equ	0xFE5
   651                           fsr1l	equ	0xFE1
   652                           
   653                           	psect	dataCOMRAM
   654  000067                     __pdataCOMRAM:
   655                           	opt stack 0
   656  000067                     _LCD_INIT_STRING:
   657                           	opt stack 0
   658  000067                     	ds	4
   659                           tblptru	equ	0xFF8
   660                           tblptrh	equ	0xFF7
   661                           tblptrl	equ	0xFF6
   662                           tablat	equ	0xFF5
   663                           postinc0	equ	0xFEE
   664                           wreg	equ	0xFE8
   665                           postdec1	equ	0xFE5
   666                           fsr1l	equ	0xFE1
   667                           
   668                           	psect	bssBANK0
   669  0000D7                     __pbssBANK0:
   670                           	opt stack 0
   671  0000D7                     _raw_val1:
   672                           	opt stack 0
   673  0000D7                     	ds	2
   674  0000D9                     _RPS_count:
   675                           	opt stack 0
   676  0000D9                     	ds	2
   677  0000DB                     _time:
   678                           	opt stack 0
   679  0000DB                     	ds	10
   680  0000E5                     _date:
   681                           	opt stack 0
   682  0000E5                     	ds	10
   683                           tblptru	equ	0xFF8
   684                           tblptrh	equ	0xFF7
   685                           tblptrl	equ	0xFF6
   686                           tablat	equ	0xFF5
   687                           postinc0	equ	0xFEE
   688                           wreg	equ	0xFE8
   689                           postdec1	equ	0xFE5
   690                           fsr1l	equ	0xFE1
   691                           
   692                           	psect	dataBANK0
   693  0000EF                     __pdataBANK0:
   694                           	opt stack 0
   695  0000EF                     _wkday:
   696                           	opt stack 0
   697  0000EF                     	ds	16
   698                           tblptru	equ	0xFF8
   699                           tblptrh	equ	0xFF7
   700                           tblptrl	equ	0xFF6
   701                           tablat	equ	0xFF5
   702                           postinc0	equ	0xFEE
   703                           wreg	equ	0xFE8
   704                           postdec1	equ	0xFE5
   705                           fsr1l	equ	0xFE1
   706                           
   707                           	psect	bssBANK1
   708  0001CC                     __pbssBANK1:
   709                           	opt stack 0
   710  0001CC                     _percentage1:
   711                           	opt stack 0
   712  0001CC                     	ds	2
   713                           tblptru	equ	0xFF8
   714                           tblptrh	equ	0xFF7
   715                           tblptrl	equ	0xFF6
   716                           tablat	equ	0xFF5
   717                           postinc0	equ	0xFEE
   718                           wreg	equ	0xFE8
   719                           postdec1	equ	0xFE5
   720                           fsr1l	equ	0xFE1
   721                           
   722                           	psect	cstackBANK1
   723  000100                     __pcstackBANK1:
   724                           	opt stack 0
   725  000100                     lcdPrint@Buffer:
   726                           	opt stack 0
   727                           
   728                           ; 32 bytes @ 0x0
   729  000100                     	ds	32
   730  000120                     lcdPrint@voltage:
   731                           	opt stack 0
   732                           
   733                           ; 3 bytes @ 0x20
   734  000120                     	ds	3
   735  000123                     _lcdPrint$1962:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0x23
   739  000123                     	ds	3
   740  000126                     lcdPrint@RPS:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x26
   744  000126                     	ds	2
   745  000128                     lcdPrint@AN:
   746                           	opt stack 0
   747                           
   748                           ; 9 bytes @ 0x28
   749  000128                     	ds	9
   750  000131                     lcdPrint@channel:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x31
   754  000131                     	ds	1
   755  000132                     main@Buffer:
   756                           	opt stack 0
   757                           
   758                           ; 128 bytes @ 0x32
   759  000132                     	ds	128
   760  0001B2                     main@v:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0xB2
   764  0001B2                     	ds	1
   765  0001B3                     main@k:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0xB3
   769  0001B3                     	ds	1
   770  0001B4                     main@voltage:
   771                           	opt stack 0
   772                           
   773                           ; 3 bytes @ 0xB4
   774  0001B4                     	ds	3
   775  0001B7                     _main$1963:
   776                           	opt stack 0
   777                           
   778                           ; 3 bytes @ 0xB7
   779  0001B7                     	ds	3
   780  0001BA                     main@raw_val:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0xBA
   784  0001BA                     	ds	2
   785  0001BC                     main@RPS:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0xBC
   789  0001BC                     	ds	2
   790  0001BE                     main@AN:
   791                           	opt stack 0
   792                           
   793                           ; 9 bytes @ 0xBE
   794  0001BE                     	ds	9
   795  0001C7                     main@Command:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0xC7
   799  0001C7                     	ds	1
   800  0001C8                     main@Value1:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0xC8
   804  0001C8                     	ds	1
   805  0001C9                     main@Value2:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0xC9
   809  0001C9                     	ds	1
   810  0001CA                     main@channel:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0xCA
   814  0001CA                     	ds	1
   815  0001CB                     main@RecvedChar:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0xCB
   819  0001CB                     	ds	1
   820                           tblptru	equ	0xFF8
   821                           tblptrh	equ	0xFF7
   822                           tblptrl	equ	0xFF6
   823                           tablat	equ	0xFF5
   824                           postinc0	equ	0xFEE
   825                           wreg	equ	0xFE8
   826                           postdec1	equ	0xFE5
   827                           fsr1l	equ	0xFE1
   828                           
   829                           	psect	cstackBANK0
   830  000080                     __pcstackBANK0:
   831                           	opt stack 0
   832  000080                     ___fttol@sign1:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x0
   836  000080                     	ds	1
   837  000081                     ___fttol@lval:
   838                           	opt stack 0
   839                           
   840                           ; 4 bytes @ 0x1
   841  000081                     	ds	4
   842  000085                     ___fttol@exp1:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x5
   846  000085                     	ds	1
   847  000086                     ?_sprintf:
   848                           	opt stack 0
   849  000086                     sprintf@sp:
   850                           	opt stack 0
   851  000086                     executePWMCommand@tmp:
   852                           	opt stack 0
   853                           
   854                           ; 3 bytes @ 0x6
   855  000086                     	ds	2
   856  000088                     sprintf@f:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x8
   860  000088                     	ds	11
   861  000093                     ??_sprintf:
   862                           
   863                           ; 1 bytes @ 0x13
   864  000093                     	ds	6
   865  000099                     _sprintf$1967:
   866                           	opt stack 0
   867                           
   868                           ; 3 bytes @ 0x19
   869  000099                     	ds	3
   870  00009C                     sprintf@cp:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0x1C
   874  00009C                     	ds	2
   875  00009E                     sprintf@ap:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x1E
   879  00009E                     	ds	2
   880  0000A0                     sprintf@len:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x20
   884  0000A0                     	ds	2
   885  0000A2                     sprintf@flag:
   886                           	opt stack 0
   887                           
   888                           ; 2 bytes @ 0x22
   889  0000A2                     	ds	2
   890  0000A4                     sprintf@tmpval:
   891                           	opt stack 0
   892                           
   893                           ; 4 bytes @ 0x24
   894  0000A4                     	ds	4
   895  0000A8                     sprintf@val:
   896                           	opt stack 0
   897                           
   898                           ; 4 bytes @ 0x28
   899  0000A8                     	ds	4
   900  0000AC                     sprintf@exp:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x2C
   904  0000AC                     	ds	2
   905  0000AE                     sprintf@width:
   906                           	opt stack 0
   907                           
   908                           ; 2 bytes @ 0x2E
   909  0000AE                     	ds	2
   910  0000B0                     sprintf@fval:
   911                           	opt stack 0
   912                           
   913                           ; 3 bytes @ 0x30
   914  0000B0                     	ds	3
   915  0000B3                     sprintf@prec:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x33
   919  0000B3                     	ds	2
   920  0000B5                     sprintf@c:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x35
   924  0000B5                     	ds	1
   925  0000B6                     executeWriteCommand@Buffer:
   926                           	opt stack 0
   927                           
   928                           ; 32 bytes @ 0x36
   929  0000B6                     	ds	32
   930  0000D6                     executeWriteCommand@commandType:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x56
   934  0000D6                     	ds	1
   935                           tblptru	equ	0xFF8
   936                           tblptrh	equ	0xFF7
   937                           tblptrl	equ	0xFF6
   938                           tablat	equ	0xFF5
   939                           postinc0	equ	0xFEE
   940                           wreg	equ	0xFE8
   941                           postdec1	equ	0xFE5
   942                           fsr1l	equ	0xFE1
   943                           
   944                           	psect	cstackCOMRAM
   945  000001                     __pcstackCOMRAM:
   946                           	opt stack 0
   947  000001                     ??_highIsr:
   948  000001                     
   949                           ; 1 bytes @ 0x0
   950  000001                     	ds	20
   951  000015                     ??_i2c_wb:
   952  000015                     ??_isdigit:
   953  000015                     ??_i2c_rb:
   954  000015                     ??_delay_cycles:
   955  000015                     ?_read_adc_raw_no_lib:
   956                           	opt stack 0
   957  000015                     ?___awmod:
   958                           	opt stack 0
   959  000015                     ?___ftpack:
   960                           	opt stack 0
   961  000015                     ?___ftneg:
   962                           	opt stack 0
   963  000015                     ?__tdiv_to_l_:
   964                           	opt stack 0
   965  000015                     ?__div_to_l_:
   966                           	opt stack 0
   967  000015                     ?___lldiv:
   968                           	opt stack 0
   969  000015                     getd@nn:
   970                           	opt stack 0
   971  000015                     getu@nn:
   972                           	opt stack 0
   973  000015                     setupSerial@dummy:
   974                           	opt stack 0
   975  000015                     read_byte_no_lib@c:
   976                           	opt stack 0
   977  000015                     send_byte_no_lib@c:
   978                           	opt stack 0
   979  000015                     delay_ms@n:
   980                           	opt stack 0
   981  000015                     set_pwm1_raw@raw_value:
   982                           	opt stack 0
   983  000015                     ___awmod@dividend:
   984                           	opt stack 0
   985  000015                     __div_to_l_@f1:
   986                           	opt stack 0
   987  000015                     ___ftpack@arg:
   988                           	opt stack 0
   989  000015                     __tdiv_to_l_@f1:
   990                           	opt stack 0
   991  000015                     ___ftge@ff1:
   992                           	opt stack 0
   993  000015                     ___ftneg@f1:
   994                           	opt stack 0
   995  000015                     ___lldiv@dividend:
   996                           	opt stack 0
   997                           
   998                           ; 4 bytes @ 0x14
   999  000015                     	ds	1
  1000  000016                     _isdigit$1586:
  1001                           	opt stack 0
  1002  000016                     send_string_no_lib@p:
  1003                           	opt stack 0
  1004                           
  1005                           ; 2 bytes @ 0x15
  1006  000016                     	ds	1
  1007  000017                     ??_set_pwm1_raw:
  1008  000017                     ??_read_adc_raw_no_lib:
  1009  000017                     i2c_wb@val:
  1010                           	opt stack 0
  1011  000017                     i2c_rb@ack:
  1012                           	opt stack 0
  1013  000017                     isdigit@c:
  1014                           	opt stack 0
  1015  000017                     delay_ms@i:
  1016                           	opt stack 0
  1017  000017                     ___awmod@divisor:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x16
  1021  000017                     	ds	1
  1022  000018                     i2c_wb@i:
  1023                           	opt stack 0
  1024  000018                     i2c_rb@ret:
  1025                           	opt stack 0
  1026  000018                     delay_cycles@n:
  1027                           	opt stack 0
  1028  000018                     ___ftpack@exp:
  1029                           	opt stack 0
  1030  000018                     __div_to_l_@f2:
  1031                           	opt stack 0
  1032  000018                     __tdiv_to_l_@f2:
  1033                           	opt stack 0
  1034  000018                     ___ftge@ff2:
  1035                           	opt stack 0
  1036                           
  1037                           ; 3 bytes @ 0x17
  1038  000018                     	ds	1
  1039  000019                     i2c_rb@i:
  1040                           	opt stack 0
  1041  000019                     read_adc_raw_no_lib@channel:
  1042                           	opt stack 0
  1043  000019                     ___awmod@counter:
  1044                           	opt stack 0
  1045  000019                     ___ftpack@sign:
  1046                           	opt stack 0
  1047  000019                     delay_cycles@x:
  1048                           	opt stack 0
  1049  000019                     ___lldiv@divisor:
  1050                           	opt stack 0
  1051                           
  1052                           ; 4 bytes @ 0x18
  1053  000019                     	ds	1
  1054  00001A                     ??___ftpack:
  1055  00001A                     rtc_r@tmp:
  1056                           	opt stack 0
  1057  00001A                     ___awmod@sign:
  1058                           	opt stack 0
  1059  00001A                     read_adc_raw_no_lib@raw_value:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x19
  1063  00001A                     	ds	1
  1064  00001B                     ??__tdiv_to_l_:
  1065  00001B                     ??_lcd_send_nibble:
  1066  00001B                     ??___ftge:
  1067  00001B                     ?___awdiv:
  1068                           	opt stack 0
  1069  00001B                     ___awdiv@dividend:
  1070                           	opt stack 0
  1071  00001B                     __div_to_l_@quot:
  1072                           	opt stack 0
  1073                           
  1074                           ; 4 bytes @ 0x1A
  1075  00001B                     	ds	1
  1076  00001C                     lcd_send_nibble@n:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x1B
  1080  00001C                     	ds	1
  1081  00001D                     ?___lltoft:
  1082                           	opt stack 0
  1083  00001D                     ?___lwtoft:
  1084                           	opt stack 0
  1085  00001D                     lcd_send_byte@n:
  1086                           	opt stack 0
  1087  00001D                     ___awdiv@divisor:
  1088                           	opt stack 0
  1089  00001D                     ___lwtoft@c:
  1090                           	opt stack 0
  1091  00001D                     ___lldiv@quotient:
  1092                           	opt stack 0
  1093  00001D                     ___lltoft@c:
  1094                           	opt stack 0
  1095                           
  1096                           ; 4 bytes @ 0x1C
  1097  00001D                     	ds	1
  1098  00001E                     lcd_send_byte@cm_data:
  1099                           	opt stack 0
  1100  00001E                     __tdiv_to_l_@quot:
  1101                           	opt stack 0
  1102                           
  1103                           ; 4 bytes @ 0x1D
  1104  00001E                     	ds	1
  1105  00001F                     lcd_init@i:
  1106                           	opt stack 0
  1107  00001F                     lcd_gotoxy@y:
  1108                           	opt stack 0
  1109  00001F                     ___awdiv@counter:
  1110                           	opt stack 0
  1111  00001F                     __div_to_l_@cntr:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x1E
  1115  00001F                     	ds	1
  1116  000020                     lcd_gotoxy@x:
  1117                           	opt stack 0
  1118  000020                     ___awdiv@sign:
  1119                           	opt stack 0
  1120  000020                     __div_to_l_@exp1:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x1F
  1124  000020                     	ds	1
  1125  000021                     ??___lltoft:
  1126  000021                     lcd_gotoxy@address:
  1127                           	opt stack 0
  1128  000021                     ___lldiv@counter:
  1129                           	opt stack 0
  1130  000021                     ___awdiv@quotient:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x20
  1134  000021                     	ds	1
  1135  000022                     ?___llmod:
  1136                           	opt stack 0
  1137  000022                     lcd_putc@c:
  1138                           	opt stack 0
  1139  000022                     __tdiv_to_l_@cntr:
  1140                           	opt stack 0
  1141  000022                     ___llmod@dividend:
  1142                           	opt stack 0
  1143                           
  1144                           ; 4 bytes @ 0x21
  1145  000022                     	ds	1
  1146  000023                     ??_updateRTC:
  1147  000023                     ?___wmul:
  1148                           	opt stack 0
  1149  000023                     __tdiv_to_l_@exp1:
  1150                           	opt stack 0
  1151  000023                     lcd_puts@s:
  1152                           	opt stack 0
  1153  000023                     ___wmul@multiplier:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x22
  1157  000023                     	ds	2
  1158  000025                     ___lltoft@exp:
  1159                           	opt stack 0
  1160  000025                     ___wmul@multiplicand:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x24
  1164  000025                     	ds	1
  1165  000026                     ___llmod@divisor:
  1166                           	opt stack 0
  1167                           
  1168                           ; 4 bytes @ 0x25
  1169  000026                     	ds	1
  1170  000027                     ___wmul@product:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x26
  1174  000027                     	ds	2
  1175  000029                     ?___ftmul:
  1176                           	opt stack 0
  1177  000029                     ?___awtoft:
  1178                           	opt stack 0
  1179  000029                     ___awtoft@c:
  1180                           	opt stack 0
  1181  000029                     ___ftmul@f1:
  1182                           	opt stack 0
  1183                           
  1184                           ; 3 bytes @ 0x28
  1185  000029                     	ds	1
  1186  00002A                     ___llmod@counter:
  1187                           	opt stack 0
  1188                           
  1189                           ; 1 bytes @ 0x29
  1190  00002A                     	ds	2
  1191  00002C                     ___awtoft@sign:
  1192                           	opt stack 0
  1193  00002C                     ___ftmul@f2:
  1194                           	opt stack 0
  1195                           
  1196                           ; 3 bytes @ 0x2B
  1197  00002C                     	ds	3
  1198  00002F                     ??___ftmul:
  1199                           
  1200                           ; 1 bytes @ 0x2E
  1201  00002F                     	ds	3
  1202  000032                     ___ftmul@exp:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x31
  1206  000032                     	ds	1
  1207  000033                     ___ftmul@f3_as_product:
  1208                           	opt stack 0
  1209                           
  1210                           ; 3 bytes @ 0x32
  1211  000033                     	ds	3
  1212  000036                     ___ftmul@cntr:
  1213                           	opt stack 0
  1214                           
  1215                           ; 1 bytes @ 0x35
  1216  000036                     	ds	1
  1217  000037                     ___ftmul@sign:
  1218                           	opt stack 0
  1219                           
  1220                           ; 1 bytes @ 0x36
  1221  000037                     	ds	1
  1222  000038                     ?___ftdiv:
  1223                           	opt stack 0
  1224  000038                     ?_fround:
  1225                           	opt stack 0
  1226  000038                     ?_scale:
  1227                           	opt stack 0
  1228  000038                     ___ftdiv@f1:
  1229                           	opt stack 0
  1230                           
  1231                           ; 3 bytes @ 0x37
  1232  000038                     	ds	3
  1233  00003B                     ___ftdiv@f2:
  1234                           	opt stack 0
  1235  00003B                     _fround$1965:
  1236                           	opt stack 0
  1237  00003B                     _scale$1966:
  1238                           	opt stack 0
  1239                           
  1240                           ; 3 bytes @ 0x3A
  1241  00003B                     	ds	3
  1242  00003E                     ??___ftdiv:
  1243  00003E                     scale@scl:
  1244                           	opt stack 0
  1245  00003E                     _fround$1964:
  1246                           	opt stack 0
  1247                           
  1248                           ; 3 bytes @ 0x3D
  1249  00003E                     	ds	3
  1250  000041                     fround@prec:
  1251                           	opt stack 0
  1252  000041                     ___ftdiv@cntr:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x40
  1256  000041                     	ds	1
  1257  000042                     ?___ftadd:
  1258                           	opt stack 0
  1259  000042                     ___ftadd@f1:
  1260                           	opt stack 0
  1261  000042                     ___ftdiv@f3:
  1262                           	opt stack 0
  1263                           
  1264                           ; 3 bytes @ 0x41
  1265  000042                     	ds	3
  1266  000045                     ___ftdiv@exp:
  1267                           	opt stack 0
  1268  000045                     ___ftadd@f2:
  1269                           	opt stack 0
  1270                           
  1271                           ; 3 bytes @ 0x44
  1272  000045                     	ds	1
  1273  000046                     ___ftdiv@sign:
  1274                           	opt stack 0
  1275                           
  1276                           ; 1 bytes @ 0x45
  1277  000046                     	ds	1
  1278  000047                     ?_read_adc_voltage:
  1279                           	opt stack 0
  1280                           
  1281                           ; 3 bytes @ 0x46
  1282  000047                     	ds	1
  1283  000048                     ??___ftadd:
  1284                           
  1285                           ; 1 bytes @ 0x47
  1286  000048                     	ds	2
  1287  00004A                     read_adc_voltage@voltage:
  1288                           	opt stack 0
  1289                           
  1290                           ; 3 bytes @ 0x49
  1291  00004A                     	ds	1
  1292  00004B                     ___ftadd@sign:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x4A
  1296  00004B                     	ds	1
  1297  00004C                     ___ftadd@exp2:
  1298                           	opt stack 0
  1299                           
  1300                           ; 1 bytes @ 0x4B
  1301  00004C                     	ds	1
  1302  00004D                     read_adc_voltage@channel:
  1303                           	opt stack 0
  1304  00004D                     ___ftadd@exp1:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x4C
  1308  00004D                     	ds	1
  1309  00004E                     ?___ftsub:
  1310                           	opt stack 0
  1311  00004E                     ?___fttol:
  1312                           	opt stack 0
  1313  00004E                     read_adc_voltage@raw_value:
  1314                           	opt stack 0
  1315  00004E                     ___ftsub@f1:
  1316                           	opt stack 0
  1317  00004E                     ___fttol@f1:
  1318                           	opt stack 0
  1319                           
  1320                           ; 3 bytes @ 0x4D
  1321  00004E                     	ds	3
  1322  000051                     ___ftsub@f2:
  1323                           	opt stack 0
  1324                           
  1325                           ; 3 bytes @ 0x50
  1326  000051                     	ds	1
  1327  000052                     ??___fttol:
  1328                           
  1329                           ; 1 bytes @ 0x51
  1330  000052                     	ds	2
  1331  000054                     
  1332                           ; 1 bytes @ 0x53
  1333  000054                     	ds	3
  1334  000057                     ??_lcdPrint:
  1335  000057                     executeWriteCommand@value:
  1336                           	opt stack 0
  1337  000057                     executePWMCommand@percentage:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0x56
  1341  000057                     	ds	1
  1342  000058                     
  1343                           ; 1 bytes @ 0x57
  1344  000058                     	ds	1
  1345  000059                     ??_main:
  1346                           
  1347                           ; 1 bytes @ 0x58
  1348  000059                     	ds	2
  1349                           tblptru	equ	0xFF8
  1350                           tblptrh	equ	0xFF7
  1351                           tblptrl	equ	0xFF6
  1352                           tablat	equ	0xFF5
  1353                           postinc0	equ	0xFEE
  1354                           wreg	equ	0xFE8
  1355                           postdec1	equ	0xFE5
  1356                           fsr1l	equ	0xFE1
  1357                           
  1358 ;;
  1359 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1360 ;;
  1361 ;; *************** function _main *****************
  1362 ;; Defined at:
  1363 ;;		line 281 in file "project.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;		None
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  Buffer        128   50[BANK1 ] unsigned char [128]
  1368 ;;  AN              9  190[BANK1 ] float [3]
  1369 ;;  voltage         3  180[BANK1 ] float 
  1370 ;;  RPS             2  188[BANK1 ] int 
  1371 ;;  raw_val         2  186[BANK1 ] int 
  1372 ;;  RecvedChar      1  203[BANK1 ] unsigned char 
  1373 ;;  channel         1  202[BANK1 ] unsigned char 
  1374 ;;  Value2          1  201[BANK1 ] unsigned char 
  1375 ;;  Value1          1  200[BANK1 ] unsigned char 
  1376 ;;  Command         1  199[BANK1 ] unsigned char 
  1377 ;;  k               1  179[BANK1 ] unsigned char 
  1378 ;;  v               1  178[BANK1 ] unsigned char 
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  1    wreg      void 
  1381 ;; Registers used:
  1382 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;      Locals:         0       0     154       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1391 ;;      Totals:         2       0     154       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1392 ;;Total ram usage:      156 bytes
  1393 ;; Hardware stack levels required when called:    8
  1394 ;; This function calls:
  1395 ;;		___awtoft
  1396 ;;		___ftdiv
  1397 ;;		___ftmul
  1398 ;;		___lwtoft
  1399 ;;		___wmul
  1400 ;;		_configure
  1401 ;;		_executePWMCommand
  1402 ;;		_executeWriteCommand
  1403 ;;		_initTimers01
  1404 ;;		_is_byte_available
  1405 ;;		_lcdPrint
  1406 ;;		_lcd_putc
  1407 ;;		_read_adc_raw_no_lib
  1408 ;;		_read_adc_voltage
  1409 ;;		_read_byte_no_lib
  1410 ;;		_send_string_no_lib
  1411 ;;		_set_pwm1_raw
  1412 ;;		_sprintf
  1413 ;;		_updateRTC
  1414 ;; This function is called by:
  1415 ;;		Startup code after reset
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text0
  1420  000B34                     __ptext0:
  1421                           	opt stack 0
  1422  000B34                     _main:
  1423                           	opt stack 23
  1424                           
  1425                           ;project.c: 282: unsigned char v = 0;
  1426                           
  1427                           ;incstack = 0
  1428  000B34  0E00               	movlw	0
  1429  000B36  0101               	movlb	1	; () banked
  1430  000B38  6FB2               	movwf	main@v& (0+255),b
  1431                           
  1432                           ;project.c: 283: unsigned char k = 0;
  1433  000B3A  0E00               	movlw	0
  1434  000B3C  6FB3               	movwf	main@k& (0+255),b
  1435                           
  1436                           ;project.c: 284: unsigned char RecvedChar = 0;
  1437  000B3E  0E00               	movlw	0
  1438  000B40  6FCB               	movwf	main@RecvedChar& (0+255),b
  1439                           
  1440                           ;project.c: 285: unsigned char Command=0;
  1441  000B42  0E00               	movlw	0
  1442  000B44  6FC7               	movwf	main@Command& (0+255),b
  1443                           
  1444                           ;project.c: 286: unsigned char Value1,Value2=0;
  1445  000B46  0E00               	movlw	0
  1446  000B48  6FC9               	movwf	main@Value2& (0+255),b
  1447                           
  1448                           ; BSR set to: 1
  1449                           ;project.c: 287: char Buffer[128];
  1450                           ;project.c: 288: int raw_val;
  1451                           ;project.c: 289: float AN[3];
  1452                           ;project.c: 290: unsigned char channel;
  1453                           ;project.c: 291: int RPS;
  1454                           ;project.c: 292: float voltage;
  1455                           ;project.c: 293: configure();
  1456  000B4A  EC94  F015         	call	_configure	;wreg free
  1457                           
  1458                           ;project.c: 294: lcd_putc('\f');
  1459  000B4E  0E0C               	movlw	12
  1460  000B50  ECB9  F014         	call	_lcd_putc
  1461                           
  1462                           ;project.c: 295: initTimers01();
  1463  000B54  EC1A  F016         	call	_initTimers01	;wreg free
  1464                           
  1465                           ;project.c: 296: TRISCbits.RC0 = 1;
  1466  000B58  8094               	bsf	3988,0,c	;volatile
  1467  000B5A                     
  1468                           ;project.c: 300: if (is_byte_available()) {
  1469  000B5A  ECCB  F016         	call	_is_byte_available	;wreg free
  1470  000B5E  0900               	iorlw	0
  1471  000B60  B4D8               	btfsc	status,2,c
  1472  000B62  D24D               	goto	l223
  1473                           
  1474                           ;project.c: 301: RecvedChar = read_byte_no_lib();
  1475  000B64  EC15  F017         	call	_read_byte_no_lib	;wreg free
  1476  000B68  0101               	movlb	1	; () banked
  1477  000B6A  6FCB               	movwf	main@RecvedChar& (0+255),b
  1478                           
  1479                           ; BSR set to: 1
  1480                           ;project.c: 302: if (RecvedChar == '<')
  1481  000B6C  0E3C               	movlw	60
  1482  000B6E  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  1483  000B70  A4D8               	btfss	status,2,c
  1484  000B72  D245               	goto	l223
  1485  000B74                     u6850:
  1486                           
  1487                           ; BSR set to: 1
  1488                           
  1489                           ; BSR set to: 1
  1490                           
  1491                           ; BSR set to: 1
  1492                           ;project.c: 303: {
  1493                           ;project.c: 304: while(!(is_byte_available()));
  1494  000B74  ECCB  F016         	call	_is_byte_available	;wreg free
  1495  000B78  0900               	iorlw	0
  1496  000B7A  B4D8               	btfsc	status,2,c
  1497  000B7C  D7FB               	goto	u6850
  1498                           
  1499                           ;project.c: 306: RecvedChar = read_byte_no_lib();
  1500  000B7E  EC15  F017         	call	_read_byte_no_lib	;wreg free
  1501  000B82  0101               	movlb	1	; () banked
  1502  000B84  6FCB               	movwf	main@RecvedChar& (0+255),b
  1503                           
  1504                           ; BSR set to: 1
  1505                           ;project.c: 307: if (RecvedChar == 'R' || RecvedChar =='r')
  1506  000B86  0E52               	movlw	82
  1507  000B88  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  1508  000B8A  B4D8               	btfsc	status,2,c
  1509  000B8C  D004               	goto	u6880
  1510                           
  1511                           ; BSR set to: 1
  1512  000B8E  0E72               	movlw	114
  1513  000B90  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  1514  000B92  A4D8               	btfss	status,2,c
  1515  000B94  D18E               	goto	l184
  1516  000B96                     u6880:
  1517                           
  1518                           ; BSR set to: 1
  1519                           
  1520                           ; BSR set to: 1
  1521                           
  1522                           ; BSR set to: 1
  1523                           ;project.c: 308: {
  1524                           ;project.c: 309: while(!(is_byte_available()));
  1525  000B96  ECCB  F016         	call	_is_byte_available	;wreg free
  1526  000B9A  0900               	iorlw	0
  1527  000B9C  B4D8               	btfsc	status,2,c
  1528  000B9E  D7FB               	goto	u6880
  1529                           
  1530                           ;project.c: 310: RecvedChar=read_byte_no_lib();
  1531  000BA0  EC15  F017         	call	_read_byte_no_lib	;wreg free
  1532  000BA4  0101               	movlb	1	; () banked
  1533  000BA6  6FCB               	movwf	main@RecvedChar& (0+255),b
  1534                           
  1535                           ; BSR set to: 1
  1536                           ;project.c: 311: if(RecvedChar=='t'){
  1537  000BA8  0E74               	movlw	116
  1538  000BAA  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  1539  000BAC  A4D8               	btfss	status,2,c
  1540  000BAE  D02B               	goto	l190
  1541  000BB0                     u6900:
  1542                           
  1543                           ; BSR set to: 1
  1544                           
  1545                           ; BSR set to: 1
  1546                           
  1547                           ; BSR set to: 1
  1548                           ;project.c: 313: while(!(is_byte_available()));
  1549  000BB0  ECCB  F016         	call	_is_byte_available	;wreg free
  1550  000BB4  0900               	iorlw	0
  1551  000BB6  B4D8               	btfsc	status,2,c
  1552  000BB8  D7FB               	goto	u6900
  1553                           
  1554                           ;project.c: 314: RecvedChar=read_byte_no_lib();
  1555  000BBA  EC15  F017         	call	_read_byte_no_lib	;wreg free
  1556  000BBE  0101               	movlb	1	; () banked
  1557  000BC0  6FCB               	movwf	main@RecvedChar& (0+255),b
  1558                           
  1559                           ; BSR set to: 1
  1560                           ;project.c: 315: if(RecvedChar=='>'){
  1561  000BC2  0E3E               	movlw	62
  1562  000BC4  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  1563  000BC6  A4D8               	btfss	status,2,c
  1564  000BC8  D21A               	goto	l223
  1565                           
  1566                           ; BSR set to: 1
  1567                           ;project.c: 316: send_string_no_lib("\r\n");
  1568  000BCA  0EFA               	movlw	low STR_13
  1569  000BCC  6E16               	movwf	send_string_no_lib@p,c
  1570  000BCE  0EFF               	movlw	high STR_13
  1571  000BD0  6E17               	movwf	send_string_no_lib@p+1,c
  1572  000BD2  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1573                           
  1574                           ;project.c: 318: sprintf(Buffer, time);
  1575  000BD6  0E32               	movlw	low main@Buffer
  1576  000BD8  0100               	movlb	0	; () banked
  1577  000BDA  6F86               	movwf	sprintf@sp& (0+255),b
  1578  000BDC  0E01               	movlw	high main@Buffer
  1579  000BDE  6F87               	movwf	(sprintf@sp+1)& (0+255),b
  1580  000BE0  0EDB               	movlw	low _time
  1581  000BE2  6F88               	movwf	sprintf@f& (0+255),b
  1582  000BE4  0E00               	movlw	high _time
  1583  000BE6  6F89               	movwf	(sprintf@f+1)& (0+255),b
  1584  000BE8  EC09  F000         	call	_sprintf	;wreg free
  1585                           
  1586                           ;project.c: 319: send_string_no_lib((unsigned char *)Buffer);
  1587  000BEC  0E32               	movlw	low main@Buffer
  1588  000BEE  6E16               	movwf	send_string_no_lib@p,c
  1589  000BF0  0E01               	movlw	high main@Buffer
  1590  000BF2  6E17               	movwf	send_string_no_lib@p+1,c
  1591  000BF4  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1592                           
  1593                           ;project.c: 320: send_string_no_lib("\r\n");
  1594  000BF8  0EFA               	movlw	low STR_13
  1595  000BFA  6E16               	movwf	send_string_no_lib@p,c
  1596  000BFC  0EFF               	movlw	high STR_13
  1597  000BFE  6E17               	movwf	send_string_no_lib@p+1,c
  1598  000C00  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1599                           
  1600                           ;project.c: 321: continue;
  1601  000C04  D7AA               	goto	l178
  1602  000C06                     l190:
  1603                           
  1604                           ;project.c: 326: else if (RecvedChar == 'D')
  1605  000C06  0E44               	movlw	68
  1606  000C08  0101               	movlb	1	; () banked
  1607  000C0A  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  1608  000C0C  A4D8               	btfss	status,2,c
  1609  000C0E  D02B               	goto	l197
  1610  000C10                     u6930:
  1611                           
  1612                           ; BSR set to: 1
  1613                           
  1614                           ; BSR set to: 1
  1615                           
  1616                           ; BSR set to: 1
  1617                           ;project.c: 327: {
  1618                           ;project.c: 328: while(!(is_byte_available()));
  1619  000C10  ECCB  F016         	call	_is_byte_available	;wreg free
  1620  000C14  0900               	iorlw	0
  1621  000C16  B4D8               	btfsc	status,2,c
  1622  000C18  D7FB               	goto	u6930
  1623                           
  1624                           ;project.c: 329: RecvedChar=read_byte_no_lib();
  1625  000C1A  EC15  F017         	call	_read_byte_no_lib	;wreg free
  1626  000C1E  0101               	movlb	1	; () banked
  1627  000C20  6FCB               	movwf	main@RecvedChar& (0+255),b
  1628                           
  1629                           ; BSR set to: 1
  1630                           ;project.c: 330: if(RecvedChar=='>'){
  1631  000C22  0E3E               	movlw	62
  1632  000C24  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  1633  000C26  A4D8               	btfss	status,2,c
  1634  000C28  D1EA               	goto	l223
  1635                           
  1636                           ; BSR set to: 1
  1637                           ;project.c: 331: send_string_no_lib("\r\n");
  1638  000C2A  0EFA               	movlw	low STR_13
  1639  000C2C  6E16               	movwf	send_string_no_lib@p,c
  1640  000C2E  0EFF               	movlw	high STR_13
  1641  000C30  6E17               	movwf	send_string_no_lib@p+1,c
  1642  000C32  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1643                           
  1644                           ;project.c: 333: sprintf(Buffer, date);
  1645  000C36  0E32               	movlw	low main@Buffer
  1646  000C38  0100               	movlb	0	; () banked
  1647  000C3A  6F86               	movwf	sprintf@sp& (0+255),b
  1648  000C3C  0E01               	movlw	high main@Buffer
  1649  000C3E  6F87               	movwf	(sprintf@sp+1)& (0+255),b
  1650  000C40  0EE5               	movlw	low _date
  1651  000C42  6F88               	movwf	sprintf@f& (0+255),b
  1652  000C44  0E00               	movlw	high _date
  1653  000C46  6F89               	movwf	(sprintf@f+1)& (0+255),b
  1654  000C48  EC09  F000         	call	_sprintf	;wreg free
  1655                           
  1656                           ;project.c: 334: send_string_no_lib((unsigned char *)Buffer);
  1657  000C4C  0E32               	movlw	low main@Buffer
  1658  000C4E  6E16               	movwf	send_string_no_lib@p,c
  1659  000C50  0E01               	movlw	high main@Buffer
  1660  000C52  6E17               	movwf	send_string_no_lib@p+1,c
  1661  000C54  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1662                           
  1663                           ;project.c: 335: send_string_no_lib("\r\n");
  1664  000C58  0EFA               	movlw	low STR_13
  1665  000C5A  6E16               	movwf	send_string_no_lib@p,c
  1666  000C5C  0EFF               	movlw	high STR_13
  1667  000C5E  6E17               	movwf	send_string_no_lib@p+1,c
  1668  000C60  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1669                           
  1670                           ;project.c: 336: continue;
  1671  000C64  D77A               	goto	l178
  1672  000C66                     l197:
  1673                           
  1674                           ;project.c: 338: else if (RecvedChar == 'A')
  1675  000C66  0E41               	movlw	65
  1676  000C68  0101               	movlb	1	; () banked
  1677  000C6A  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  1678  000C6C  A4D8               	btfss	status,2,c
  1679  000C6E  D05E               	goto	l203
  1680  000C70                     u6960:
  1681                           
  1682                           ; BSR set to: 1
  1683                           
  1684                           ; BSR set to: 1
  1685                           
  1686                           ; BSR set to: 1
  1687                           ;project.c: 339: {
  1688                           ;project.c: 340: while(!(is_byte_available()));
  1689  000C70  ECCB  F016         	call	_is_byte_available	;wreg free
  1690  000C74  0900               	iorlw	0
  1691  000C76  B4D8               	btfsc	status,2,c
  1692  000C78  D7FB               	goto	u6960
  1693                           
  1694                           ;project.c: 341: RecvedChar=read_byte_no_lib();
  1695  000C7A  EC15  F017         	call	_read_byte_no_lib	;wreg free
  1696  000C7E  0101               	movlb	1	; () banked
  1697  000C80  6FCB               	movwf	main@RecvedChar& (0+255),b
  1698                           
  1699                           ; BSR set to: 1
  1700                           ;project.c: 342: if(RecvedChar=='>'){
  1701  000C82  0E3E               	movlw	62
  1702  000C84  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  1703  000C86  A4D8               	btfss	status,2,c
  1704  000C88  D1BA               	goto	l223
  1705                           
  1706                           ; BSR set to: 1
  1707                           ;project.c: 343: send_string_no_lib("\r\n");
  1708  000C8A  0EFA               	movlw	low STR_13
  1709  000C8C  6E16               	movwf	send_string_no_lib@p,c
  1710  000C8E  0EFF               	movlw	high STR_13
  1711  000C90  6E17               	movwf	send_string_no_lib@p+1,c
  1712  000C92  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1713                           
  1714                           ;project.c: 344: for (channel = 0; channel < 3; channel++) {
  1715  000C96  0E00               	movlw	0
  1716  000C98  0101               	movlb	1	; () banked
  1717  000C9A  6FCA               	movwf	main@channel& (0+255),b
  1718  000C9C                     l6265:
  1719                           
  1720                           ; BSR set to: 1
  1721  000C9C  0E02               	movlw	2
  1722  000C9E  65CA               	cpfsgt	main@channel& (0+255),b
  1723  000CA0  D001               	goto	l208
  1724  000CA2  D01A               	goto	u7000
  1725  000CA4                     l208:
  1726                           
  1727                           ; BSR set to: 1
  1728                           ;project.c: 345: voltage = read_adc_voltage((unsigned char) channel);
  1729                           
  1730                           ; BSR set to: 1
  1731  000CA4  51CA               	movf	main@channel& (0+255),w,b
  1732  000CA6  ECC9  F013         	call	_read_adc_voltage
  1733  000CAA  C047  F1B4         	movff	?_read_adc_voltage,main@voltage
  1734  000CAE  C048  F1B5         	movff	?_read_adc_voltage+1,main@voltage+1
  1735  000CB2  C049  F1B6         	movff	?_read_adc_voltage+2,main@voltage+2
  1736                           
  1737                           ;project.c: 346: AN[channel] = voltage;
  1738  000CB6  0101               	movlb	1	; () banked
  1739  000CB8  51CA               	movf	main@channel& (0+255),w,b
  1740  000CBA  0D03               	mullw	3
  1741  000CBC  0EBE               	movlw	low main@AN
  1742  000CBE  24F3               	addwf	prodl,w,c
  1743  000CC0  6ED9               	movwf	fsr2l,c
  1744  000CC2  0E01               	movlw	high main@AN
  1745  000CC4  20F4               	addwfc	prodh,w,c
  1746  000CC6  6EDA               	movwf	fsr2h,c
  1747  000CC8  C1B4  FFDE         	movff	main@voltage,postinc2
  1748  000CCC  C1B5  FFDE         	movff	main@voltage+1,postinc2
  1749  000CD0  C1B6  FFDE         	movff	main@voltage+2,postinc2
  1750                           
  1751                           ; BSR set to: 1
  1752  000CD4  2BCA               	incf	main@channel& (0+255),f,b
  1753  000CD6  D7E2               	goto	l6265
  1754  000CD8                     u7000:
  1755                           
  1756                           ; BSR set to: 1
  1757                           ;project.c: 347: }
  1758                           ;project.c: 348: sprintf(Buffer, "AN0= %3.2f volt, AN1 = %3.2f volt, AN2 = %3.2f volt,\r
      +                          ",AN[0],AN[1],AN[2]);
  1759                           
  1760                           ; BSR set to: 1
  1761  000CD8  0E32               	movlw	low main@Buffer
  1762  000CDA  0100               	movlb	0	; () banked
  1763  000CDC  6F86               	movwf	sprintf@sp& (0+255),b
  1764  000CDE  0E01               	movlw	high main@Buffer
  1765  000CE0  6F87               	movwf	(sprintf@sp+1)& (0+255),b
  1766  000CE2  0E4D               	movlw	low STR_18
  1767  000CE4  6F88               	movwf	sprintf@f& (0+255),b
  1768  000CE6  0EFF               	movlw	high STR_18
  1769  000CE8  6F89               	movwf	(sprintf@f+1)& (0+255),b
  1770  000CEA  C1BE  F08A         	movff	main@AN,?_sprintf+4
  1771  000CEE  C1BF  F08B         	movff	main@AN+1,?_sprintf+5
  1772  000CF2  C1C0  F08C         	movff	main@AN+2,?_sprintf+6
  1773  000CF6  C1C1  F08D         	movff	main@AN+3,?_sprintf+7
  1774  000CFA  C1C2  F08E         	movff	main@AN+4,?_sprintf+8
  1775  000CFE  C1C3  F08F         	movff	main@AN+5,?_sprintf+9
  1776  000D02  C1C4  F090         	movff	main@AN+6,?_sprintf+10
  1777  000D06  C1C5  F091         	movff	main@AN+7,?_sprintf+11
  1778  000D0A  C1C6  F092         	movff	main@AN+8,?_sprintf+12
  1779  000D0E  EC09  F000         	call	_sprintf	;wreg free
  1780                           
  1781                           ;project.c: 349: send_string_no_lib((unsigned char *)Buffer);
  1782  000D12  0E32               	movlw	low main@Buffer
  1783  000D14  6E16               	movwf	send_string_no_lib@p,c
  1784  000D16  0E01               	movlw	high main@Buffer
  1785  000D18  6E17               	movwf	send_string_no_lib@p+1,c
  1786  000D1A  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1787                           
  1788                           ;project.c: 350: send_string_no_lib("\r\n");
  1789  000D1E  0EFA               	movlw	low STR_13
  1790  000D20  6E16               	movwf	send_string_no_lib@p,c
  1791  000D22  0EFF               	movlw	high STR_13
  1792  000D24  6E17               	movwf	send_string_no_lib@p+1,c
  1793  000D26  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1794                           
  1795                           ;project.c: 351: continue;
  1796  000D2A  D717               	goto	l178
  1797  000D2C                     l203:
  1798                           
  1799                           ;project.c: 353: else if (RecvedChar == 'P')
  1800  000D2C  0E50               	movlw	80
  1801  000D2E  0101               	movlb	1	; () banked
  1802  000D30  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  1803  000D32  A4D8               	btfss	status,2,c
  1804  000D34  D070               	goto	l211
  1805  000D36                     u7010:
  1806                           
  1807                           ; BSR set to: 1
  1808                           
  1809                           ; BSR set to: 1
  1810                           
  1811                           ; BSR set to: 1
  1812                           ;project.c: 354: {
  1813                           ;project.c: 355: while(!(is_byte_available()));
  1814  000D36  ECCB  F016         	call	_is_byte_available	;wreg free
  1815  000D3A  0900               	iorlw	0
  1816  000D3C  B4D8               	btfsc	status,2,c
  1817  000D3E  D7FB               	goto	u7010
  1818                           
  1819                           ;project.c: 356: RecvedChar=read_byte_no_lib();
  1820  000D40  EC15  F017         	call	_read_byte_no_lib	;wreg free
  1821  000D44  0101               	movlb	1	; () banked
  1822  000D46  6FCB               	movwf	main@RecvedChar& (0+255),b
  1823                           
  1824                           ; BSR set to: 1
  1825                           ;project.c: 357: if(RecvedChar=='>'){
  1826  000D48  0E3E               	movlw	62
  1827  000D4A  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  1828  000D4C  A4D8               	btfss	status,2,c
  1829  000D4E  D157               	goto	l223
  1830                           
  1831                           ; BSR set to: 1
  1832                           ;project.c: 358: send_string_no_lib("\r\n");
  1833  000D50  0EFA               	movlw	low STR_13
  1834  000D52  6E16               	movwf	send_string_no_lib@p,c
  1835  000D54  0EFF               	movlw	high STR_13
  1836  000D56  6E17               	movwf	send_string_no_lib@p+1,c
  1837  000D58  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1838                           
  1839                           ;project.c: 359: raw_val = read_adc_raw_no_lib(0);
  1840  000D5C  0E00               	movlw	0
  1841  000D5E  ECB3  F015         	call	_read_adc_raw_no_lib
  1842  000D62  C015  F1BA         	movff	?_read_adc_raw_no_lib,main@raw_val
  1843  000D66  C016  F1BB         	movff	?_read_adc_raw_no_lib+1,main@raw_val+1
  1844                           
  1845                           ;project.c: 360: set_pwm1_raw(raw_val);
  1846  000D6A  C1BA  F015         	movff	main@raw_val,set_pwm1_raw@raw_value
  1847  000D6E  C1BB  F016         	movff	main@raw_val+1,set_pwm1_raw@raw_value+1
  1848  000D72  ECEC  F015         	call	_set_pwm1_raw	;wreg free
  1849                           
  1850                           ;project.c: 361: sprintf(Buffer, "D=%5d ,%6.2f", raw_val1, (raw_val1 * 100.0) / 1023.0);
  1851  000D76  0E00               	movlw	0
  1852  000D78  6E2C               	movwf	___ftmul@f2,c
  1853  000D7A  0EC8               	movlw	200
  1854  000D7C  6E2D               	movwf	___ftmul@f2+1,c
  1855  000D7E  0E42               	movlw	66
  1856  000D80  6E2E               	movwf	___ftmul@f2+2,c
  1857  000D82  C0D7  F01D         	movff	_raw_val1,___lwtoft@c
  1858  000D86  C0D8  F01E         	movff	_raw_val1+1,___lwtoft@c+1
  1859  000D8A  EC7A  F016         	call	___lwtoft	;wreg free
  1860  000D8E  C01D  F029         	movff	?___lwtoft,___ftmul@f1
  1861  000D92  C01E  F02A         	movff	?___lwtoft+1,___ftmul@f1+1
  1862  000D96  C01F  F02B         	movff	?___lwtoft+2,___ftmul@f1+2
  1863  000D9A  ECFF  F00F         	call	___ftmul	;wreg free
  1864  000D9E  C029  F038         	movff	?___ftmul,___ftdiv@f1
  1865  000DA2  C02A  F039         	movff	?___ftmul+1,___ftdiv@f1+1
  1866  000DA6  C02B  F03A         	movff	?___ftmul+2,___ftdiv@f1+2
  1867  000DAA  0EC0               	movlw	192
  1868  000DAC  6E3B               	movwf	___ftdiv@f2,c
  1869  000DAE  0E7F               	movlw	127
  1870  000DB0  6E3C               	movwf	___ftdiv@f2+1,c
  1871  000DB2  0E44               	movlw	68
  1872  000DB4  6E3D               	movwf	___ftdiv@f2+2,c
  1873  000DB6  EC79  F010         	call	___ftdiv	;wreg free
  1874  000DBA  C038  F1B7         	movff	?___ftdiv,_main$1963
  1875  000DBE  C039  F1B8         	movff	?___ftdiv+1,_main$1963+1
  1876  000DC2  C03A  F1B9         	movff	?___ftdiv+2,_main$1963+2
  1877                           
  1878                           ;project.c: 361: sprintf(Buffer, "D=%5d ,%6.2f", raw_val1, (raw_val1 * 100.0) / 1023.0);
  1879  000DC6  0E32               	movlw	low main@Buffer
  1880  000DC8  0100               	movlb	0	; () banked
  1881  000DCA  6F86               	movwf	sprintf@sp& (0+255),b
  1882  000DCC  0E01               	movlw	high main@Buffer
  1883  000DCE  6F87               	movwf	(sprintf@sp+1)& (0+255),b
  1884  000DD0  0EB9               	movlw	low STR_21
  1885  000DD2  6F88               	movwf	sprintf@f& (0+255),b
  1886  000DD4  0EFF               	movlw	high STR_21
  1887  000DD6  6F89               	movwf	(sprintf@f+1)& (0+255),b
  1888  000DD8  C0D7  F08A         	movff	_raw_val1,?_sprintf+4
  1889  000DDC  C0D8  F08B         	movff	_raw_val1+1,?_sprintf+5
  1890  000DE0  C1B7  F08C         	movff	_main$1963,?_sprintf+6
  1891  000DE4  C1B8  F08D         	movff	_main$1963+1,?_sprintf+7
  1892  000DE8  C1B9  F08E         	movff	_main$1963+2,?_sprintf+8
  1893  000DEC  EC09  F000         	call	_sprintf	;wreg free
  1894                           
  1895                           ;project.c: 362: send_string_no_lib((unsigned char *)Buffer);
  1896  000DF0  0E32               	movlw	low main@Buffer
  1897  000DF2  6E16               	movwf	send_string_no_lib@p,c
  1898  000DF4  0E01               	movlw	high main@Buffer
  1899  000DF6  6E17               	movwf	send_string_no_lib@p+1,c
  1900  000DF8  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1901                           
  1902                           ;project.c: 363: send_string_no_lib( "%");
  1903  000DFC  0EFD               	movlw	low STR_22
  1904  000DFE  6E16               	movwf	send_string_no_lib@p,c
  1905  000E00  0EFF               	movlw	high STR_22
  1906  000E02  6E17               	movwf	send_string_no_lib@p+1,c
  1907  000E04  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1908                           
  1909                           ;project.c: 364: send_string_no_lib("\r\n");
  1910  000E08  0EFA               	movlw	low STR_13
  1911  000E0A  6E16               	movwf	send_string_no_lib@p,c
  1912  000E0C  0EFF               	movlw	high STR_13
  1913  000E0E  6E17               	movwf	send_string_no_lib@p+1,c
  1914  000E10  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1915                           
  1916                           ;project.c: 365: continue;
  1917  000E14  D6A2               	goto	l178
  1918  000E16                     l211:
  1919                           
  1920                           ;project.c: 367: else if (RecvedChar == 'F')
  1921  000E16  0E46               	movlw	70
  1922  000E18  0101               	movlb	1	; () banked
  1923  000E1A  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  1924  000E1C  A4D8               	btfss	status,2,c
  1925  000E1E  D0EF               	goto	l223
  1926  000E20                     u7040:
  1927                           
  1928                           ; BSR set to: 1
  1929                           
  1930                           ; BSR set to: 1
  1931                           
  1932                           ; BSR set to: 1
  1933                           ;project.c: 368: {
  1934                           ;project.c: 369: while(!(is_byte_available()));
  1935  000E20  ECCB  F016         	call	_is_byte_available	;wreg free
  1936  000E24  0900               	iorlw	0
  1937  000E26  B4D8               	btfsc	status,2,c
  1938  000E28  D7FB               	goto	u7040
  1939                           
  1940                           ;project.c: 370: RecvedChar=read_byte_no_lib();
  1941  000E2A  EC15  F017         	call	_read_byte_no_lib	;wreg free
  1942  000E2E  0101               	movlb	1	; () banked
  1943  000E30  6FCB               	movwf	main@RecvedChar& (0+255),b
  1944                           
  1945                           ; BSR set to: 1
  1946                           ;project.c: 371: if(RecvedChar=='>'){
  1947  000E32  0E3E               	movlw	62
  1948  000E34  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  1949  000E36  A4D8               	btfss	status,2,c
  1950  000E38  D0E2               	goto	l223
  1951                           
  1952                           ; BSR set to: 1
  1953                           ;project.c: 372: send_string_no_lib("\r\n");
  1954  000E3A  0EFA               	movlw	low STR_13
  1955  000E3C  6E16               	movwf	send_string_no_lib@p,c
  1956  000E3E  0EFF               	movlw	high STR_13
  1957  000E40  6E17               	movwf	send_string_no_lib@p+1,c
  1958  000E42  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1959                           
  1960                           ;project.c: 373: RPS = RPS_count;
  1961  000E46  C0D9  F1BC         	movff	_RPS_count,main@RPS
  1962  000E4A  C0DA  F1BD         	movff	_RPS_count+1,main@RPS+1
  1963                           
  1964                           ;project.c: 374: sprintf(Buffer, "Speed=%6.2f RPS\n", RPS/7.0);
  1965  000E4E  0E32               	movlw	low main@Buffer
  1966  000E50  0100               	movlb	0	; () banked
  1967  000E52  6F86               	movwf	sprintf@sp& (0+255),b
  1968  000E54  0E01               	movlw	high main@Buffer
  1969  000E56  6F87               	movwf	(sprintf@sp+1)& (0+255),b
  1970  000E58  0EA8               	movlw	low STR_25
  1971  000E5A  6F88               	movwf	sprintf@f& (0+255),b
  1972  000E5C  0EFF               	movlw	high STR_25
  1973  000E5E  6F89               	movwf	(sprintf@f+1)& (0+255),b
  1974  000E60  C1BC  F029         	movff	main@RPS,___awtoft@c
  1975  000E64  C1BD  F02A         	movff	main@RPS+1,___awtoft@c+1
  1976  000E68  ECD0  F015         	call	___awtoft	;wreg free
  1977  000E6C  C029  F038         	movff	?___awtoft,___ftdiv@f1
  1978  000E70  C02A  F039         	movff	?___awtoft+1,___ftdiv@f1+1
  1979  000E74  C02B  F03A         	movff	?___awtoft+2,___ftdiv@f1+2
  1980  000E78  0E00               	movlw	0
  1981  000E7A  6E3B               	movwf	___ftdiv@f2,c
  1982  000E7C  0EE0               	movlw	224
  1983  000E7E  6E3C               	movwf	___ftdiv@f2+1,c
  1984  000E80  0E40               	movlw	64
  1985  000E82  6E3D               	movwf	___ftdiv@f2+2,c
  1986  000E84  EC79  F010         	call	___ftdiv	;wreg free
  1987  000E88  C038  F08A         	movff	?___ftdiv,?_sprintf+4
  1988  000E8C  C039  F08B         	movff	?___ftdiv+1,?_sprintf+5
  1989  000E90  C03A  F08C         	movff	?___ftdiv+2,?_sprintf+6
  1990  000E94  EC09  F000         	call	_sprintf	;wreg free
  1991                           
  1992                           ;project.c: 375: send_string_no_lib((unsigned char *)Buffer);
  1993  000E98  0E32               	movlw	low main@Buffer
  1994  000E9A  6E16               	movwf	send_string_no_lib@p,c
  1995  000E9C  0E01               	movlw	high main@Buffer
  1996  000E9E  6E17               	movwf	send_string_no_lib@p+1,c
  1997  000EA0  EC8E  F014         	call	_send_string_no_lib	;wreg free
  1998                           
  1999                           ;project.c: 376: send_string_no_lib("\r\n");
  2000  000EA4  0EFA               	movlw	low STR_13
  2001  000EA6  6E16               	movwf	send_string_no_lib@p,c
  2002  000EA8  0EFF               	movlw	high STR_13
  2003  000EAA  6E17               	movwf	send_string_no_lib@p+1,c
  2004  000EAC  EC8E  F014         	call	_send_string_no_lib	;wreg free
  2005                           
  2006                           ;project.c: 377: continue;
  2007  000EB0  D654               	goto	l178
  2008  000EB2                     l184:
  2009                           
  2010                           ;project.c: 385: else if (RecvedChar == 'W') {
  2011  000EB2  0E57               	movlw	87
  2012  000EB4  0101               	movlb	1	; () banked
  2013  000EB6  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  2014  000EB8  A4D8               	btfss	status,2,c
  2015  000EBA  D0A1               	goto	l223
  2016  000EBC                     u7070:
  2017                           
  2018                           ; BSR set to: 1
  2019                           
  2020                           ; BSR set to: 1
  2021                           
  2022                           ; BSR set to: 1
  2023                           ;project.c: 386: while(!(is_byte_available()));
  2024  000EBC  ECCB  F016         	call	_is_byte_available	;wreg free
  2025  000EC0  0900               	iorlw	0
  2026  000EC2  B4D8               	btfsc	status,2,c
  2027  000EC4  D7FB               	goto	u7070
  2028                           
  2029                           ;project.c: 388: Command=read_byte_no_lib();
  2030  000EC6  EC15  F017         	call	_read_byte_no_lib	;wreg free
  2031  000ECA  0101               	movlb	1	; () banked
  2032  000ECC  6FC7               	movwf	main@Command& (0+255),b
  2033                           
  2034                           ;project.c: 389: switch (Command) {
  2035  000ECE  D07C               	goto	l227
  2036  000ED0                     
  2037                           ; BSR set to: 1
  2038                           
  2039                           ; BSR set to: 1
  2040                           
  2041                           ; BSR set to: 1
  2042                           ;project.c: 391: case 'm':
  2043                           ;project.c: 392: case 'h':
  2044                           ;project.c: 393: case 'w':
  2045                           ;project.c: 394: case 'd':
  2046                           ;project.c: 395: case 'M':
  2047                           ;project.c: 396: case 'y':
  2048                           ;project.c: 397: while(!(is_byte_available()));
  2049                           
  2050                           ; BSR set to: 1
  2051                           
  2052                           ; BSR set to: 1
  2053                           
  2054                           ; BSR set to: 1
  2055                           
  2056                           ; BSR set to: 1
  2057                           
  2058                           ; BSR set to: 1
  2059                           
  2060                           ; BSR set to: 1
  2061  000ED0  ECCB  F016         	call	_is_byte_available	;wreg free
  2062  000ED4  0900               	iorlw	0
  2063  000ED6  B4D8               	btfsc	status,2,c
  2064  000ED8  D7FB               	goto	l228
  2065                           
  2066                           ;project.c: 399: Value1=read_byte_no_lib();
  2067  000EDA  EC15  F017         	call	_read_byte_no_lib	;wreg free
  2068  000EDE  0101               	movlb	1	; () banked
  2069  000EE0  6FC8               	movwf	main@Value1& (0+255),b
  2070  000EE2                     
  2071                           ; BSR set to: 1
  2072                           
  2073                           ; BSR set to: 1
  2074  000EE2  ECCB  F016         	call	_is_byte_available	;wreg free
  2075  000EE6  0900               	iorlw	0
  2076  000EE8  B4D8               	btfsc	status,2,c
  2077  000EEA  D7FB               	goto	l239
  2078                           
  2079                           ;project.c: 402: Value2=read_byte_no_lib();
  2080  000EEC  EC15  F017         	call	_read_byte_no_lib	;wreg free
  2081  000EF0  0101               	movlb	1	; () banked
  2082  000EF2  6FC9               	movwf	main@Value2& (0+255),b
  2083  000EF4                     
  2084                           ; BSR set to: 1
  2085                           
  2086                           ; BSR set to: 1
  2087  000EF4  ECCB  F016         	call	_is_byte_available	;wreg free
  2088  000EF8  0900               	iorlw	0
  2089  000EFA  B4D8               	btfsc	status,2,c
  2090  000EFC  D7FB               	goto	l242
  2091                           
  2092                           ;project.c: 404: RecvedChar=read_byte_no_lib();
  2093  000EFE  EC15  F017         	call	_read_byte_no_lib	;wreg free
  2094  000F02  0101               	movlb	1	; () banked
  2095  000F04  6FCB               	movwf	main@RecvedChar& (0+255),b
  2096                           
  2097                           ; BSR set to: 1
  2098                           ;project.c: 405: if(RecvedChar=='>'){
  2099  000F06  0E3E               	movlw	62
  2100  000F08  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  2101  000F0A  A4D8               	btfss	status,2,c
  2102  000F0C  D626               	goto	l178
  2103                           
  2104                           ; BSR set to: 1
  2105                           ;project.c: 406: if((!is_byte_available()));
  2106  000F0E  ECCB  F016         	call	_is_byte_available	;wreg free
  2107                           
  2108                           ;project.c: 407: send_string_no_lib("\r\n");
  2109  000F12  0EFA               	movlw	low STR_13
  2110  000F14  6E16               	movwf	send_string_no_lib@p,c
  2111  000F16  0EFF               	movlw	high STR_13
  2112  000F18  6E17               	movwf	send_string_no_lib@p+1,c
  2113  000F1A  EC8E  F014         	call	_send_string_no_lib	;wreg free
  2114                           
  2115                           ;project.c: 408: executeWriteCommand(Command, (Value1 - '0') * 10 + (Value2 - '0'));
  2116  000F1E  0101               	movlb	1	; () banked
  2117  000F20  51C8               	movf	main@Value1& (0+255),w,b
  2118  000F22  0FD0               	addlw	208
  2119  000F24  0D0A               	mullw	10
  2120  000F26  50F3               	movf	prodl,w,c
  2121  000F28  25C9               	addwf	main@Value2& (0+255),w,b
  2122  000F2A  0FD0               	addlw	208
  2123  000F2C  6E57               	movwf	executeWriteCommand@value,c
  2124  000F2E  51C7               	movf	main@Command& (0+255),w,b
  2125  000F30  ECEC  F010         	call	_executeWriteCommand
  2126                           
  2127                           ;project.c: 409: }
  2128                           ;project.c: 410: break;
  2129  000F34  D612               	goto	l178
  2130  000F36                     
  2131                           ;project.c: 417: while(!(is_byte_available()));
  2132  000F36  ECCB  F016         	call	_is_byte_available	;wreg free
  2133  000F3A  0900               	iorlw	0
  2134  000F3C  B4D8               	btfsc	status,2,c
  2135  000F3E  D7FB               	goto	l247
  2136                           
  2137                           ;project.c: 419: Value1=read_byte_no_lib();
  2138  000F40  EC15  F017         	call	_read_byte_no_lib	;wreg free
  2139  000F44  0101               	movlb	1	; () banked
  2140  000F46  6FC8               	movwf	main@Value1& (0+255),b
  2141  000F48                     
  2142                           ; BSR set to: 1
  2143                           
  2144                           ; BSR set to: 1
  2145  000F48  ECCB  F016         	call	_is_byte_available	;wreg free
  2146  000F4C  0900               	iorlw	0
  2147  000F4E  B4D8               	btfsc	status,2,c
  2148  000F50  D7FB               	goto	l252
  2149                           
  2150                           ;project.c: 422: Value2=read_byte_no_lib();
  2151  000F52  EC15  F017         	call	_read_byte_no_lib	;wreg free
  2152  000F56  0101               	movlb	1	; () banked
  2153  000F58  6FC9               	movwf	main@Value2& (0+255),b
  2154                           
  2155                           ;project.c: 423: if((!is_byte_available()));
  2156  000F5A  ECCB  F016         	call	_is_byte_available	;wreg free
  2157  000F5E                     
  2158                           ;project.c: 424: while(!(is_byte_available()));
  2159  000F5E  ECCB  F016         	call	_is_byte_available	;wreg free
  2160  000F62  0900               	iorlw	0
  2161  000F64  B4D8               	btfsc	status,2,c
  2162  000F66  D7FB               	goto	l254
  2163                           
  2164                           ;project.c: 425: RecvedChar=read_byte_no_lib();
  2165  000F68  EC15  F017         	call	_read_byte_no_lib	;wreg free
  2166  000F6C  0101               	movlb	1	; () banked
  2167  000F6E  6FCB               	movwf	main@RecvedChar& (0+255),b
  2168                           
  2169                           ; BSR set to: 1
  2170                           ;project.c: 426: if(RecvedChar=='>'){
  2171  000F70  0E3E               	movlw	62
  2172  000F72  19CB               	xorwf	main@RecvedChar& (0+255),w,b
  2173  000F74  A4D8               	btfss	status,2,c
  2174  000F76  D5F1               	goto	l178
  2175                           
  2176                           ; BSR set to: 1
  2177                           ;project.c: 427: send_string_no_lib("\r\n");
  2178  000F78  0EFA               	movlw	low STR_13
  2179  000F7A  6E16               	movwf	send_string_no_lib@p,c
  2180  000F7C  0EFF               	movlw	high STR_13
  2181  000F7E  6E17               	movwf	send_string_no_lib@p+1,c
  2182  000F80  EC8E  F014         	call	_send_string_no_lib	;wreg free
  2183                           
  2184                           ;project.c: 428: percentage1=(unsigned int)(Value1 - '0') * 10 + (unsigned int)(Value2 -
      +                           '0');
  2185  000F84  0ED0               	movlw	208
  2186  000F86  0101               	movlb	1	; () banked
  2187  000F88  25C8               	addwf	main@Value1& (0+255),w,b
  2188  000F8A  6E23               	movwf	___wmul@multiplier,c
  2189  000F8C  6A24               	clrf	___wmul@multiplier+1,c
  2190  000F8E  0EFF               	movlw	255
  2191  000F90  2224               	addwfc	___wmul@multiplier+1,f,c
  2192  000F92  0E00               	movlw	0
  2193  000F94  6E26               	movwf	___wmul@multiplicand+1,c
  2194  000F96  0E0A               	movlw	10
  2195  000F98  6E25               	movwf	___wmul@multiplicand,c
  2196  000F9A  EC30  F016         	call	___wmul	;wreg free
  2197  000F9E  0101               	movlb	1	; () banked
  2198  000FA0  51C9               	movf	main@Value2& (0+255),w,b
  2199  000FA2  6E59               	movwf	??_main& (0+255),c
  2200  000FA4  6A5A               	clrf	(??_main+1)& (0+255),c
  2201  000FA6  5023               	movf	?___wmul,w,c
  2202  000FA8  2659               	addwf	??_main,f,c
  2203  000FAA  5024               	movf	?___wmul+1,w,c
  2204  000FAC  225A               	addwfc	??_main+1,f,c
  2205  000FAE  0ED0               	movlw	208
  2206  000FB0  2459               	addwf	??_main,w,c
  2207  000FB2  6FCC               	movwf	_percentage1& (0+255),b
  2208  000FB4  0EFF               	movlw	255
  2209  000FB6  205A               	addwfc	??_main+1,w,c
  2210  000FB8  6FCD               	movwf	(_percentage1+1)& (0+255),b
  2211                           
  2212                           ; BSR set to: 1
  2213                           ;project.c: 429: executePWMCommand(percentage1);}
  2214  000FBA  C1CC  F057         	movff	_percentage1,executePWMCommand@percentage
  2215  000FBE  C1CD  F058         	movff	_percentage1+1,executePWMCommand@percentage+1
  2216  000FC2  ECAD  F011         	call	_executePWMCommand	;wreg free
  2217                           
  2218                           ;project.c: 437: } continue;
  2219                           
  2220                           ;project.c: 436: break;
  2221                           
  2222                           ;project.c: 433: default:
  2223                           
  2224                           ;project.c: 430: break;
  2225  000FC6  D5C9               	goto	l178
  2226  000FC8                     l227:
  2227  000FC8  0101               	movlb	1	; () banked
  2228  000FCA  51C7               	movf	main@Command& (0+255),w,b
  2229                           
  2230                           ; Switch size 1, requested type "space"
  2231                           ; Number of cases is 8, Range of values is 77 to 121
  2232                           ; switch strategies available:
  2233                           ; Name         Instructions Cycles
  2234                           ; simple_byte           25    13 (average)
  2235                           ;	Chosen strategy is simple_byte
  2236  000FCC  0A4D               	xorlw	77	; case 77
  2237  000FCE  B4D8               	btfsc	status,2,c
  2238  000FD0  D77F               	goto	l228
  2239  000FD2  0A1D               	xorlw	29	; case 80
  2240  000FD4  B4D8               	btfsc	status,2,c
  2241  000FD6  D7AF               	goto	l247
  2242  000FD8  0A34               	xorlw	52	; case 100
  2243  000FDA  B4D8               	btfsc	status,2,c
  2244  000FDC  D779               	goto	l228
  2245  000FDE  0A0C               	xorlw	12	; case 104
  2246  000FE0  B4D8               	btfsc	status,2,c
  2247  000FE2  D776               	goto	l228
  2248  000FE4  0A05               	xorlw	5	; case 109
  2249  000FE6  B4D8               	btfsc	status,2,c
  2250  000FE8  D773               	goto	l228
  2251  000FEA  0A1E               	xorlw	30	; case 115
  2252  000FEC  B4D8               	btfsc	status,2,c
  2253  000FEE  D770               	goto	l228
  2254  000FF0  0A04               	xorlw	4	; case 119
  2255  000FF2  B4D8               	btfsc	status,2,c
  2256  000FF4  D76D               	goto	l228
  2257  000FF6  0A0E               	xorlw	14	; case 121
  2258  000FF8  B4D8               	btfsc	status,2,c
  2259  000FFA  D76A               	goto	l228
  2260                           
  2261                           ; BSR set to: 1
  2262  000FFC  D5AE               	goto	l178
  2263  000FFE                     l223:
  2264                           
  2265                           ;project.c: 439: }
  2266                           ;project.c: 440: }
  2267                           ;project.c: 442: }
  2268                           ;project.c: 443: seconds += 1;
  2269                           
  2270                           ; BSR set to: 1
  2271                           
  2272                           ; BSR set to: 1
  2273                           
  2274                           ; BSR set to: 1
  2275                           
  2276                           ; BSR set to: 1
  2277  000FFE  2A66               	incf	_seconds,f,c
  2278                           
  2279                           ;project.c: 444: if (seconds >= 60) {
  2280  001000  0E3B               	movlw	59
  2281  001002  6466               	cpfsgt	_seconds,c
  2282  001004  D020               	goto	l265
  2283                           
  2284                           ;project.c: 445: seconds = 0;
  2285  001006  0E00               	movlw	0
  2286  001008  6E66               	movwf	_seconds,c
  2287                           
  2288                           ;project.c: 446: minutes++;
  2289  00100A  2A65               	incf	_minutes,f,c
  2290                           
  2291                           ;project.c: 447: if (minutes >= 60) {
  2292  00100C  0E3B               	movlw	59
  2293  00100E  6465               	cpfsgt	_minutes,c
  2294  001010  D01A               	goto	l265
  2295                           
  2296                           ;project.c: 448: minutes = 0;
  2297  001012  0E00               	movlw	0
  2298  001014  6E65               	movwf	_minutes,c
  2299                           
  2300                           ;project.c: 449: hours++;
  2301  001016  2A64               	incf	_hours,f,c
  2302                           
  2303                           ;project.c: 450: if (hours >= 24) {
  2304  001018  0E17               	movlw	23
  2305  00101A  6464               	cpfsgt	_hours,c
  2306  00101C  D014               	goto	l265
  2307                           
  2308                           ;project.c: 451: hours = 0;
  2309  00101E  0E00               	movlw	0
  2310  001020  6E64               	movwf	_hours,c
  2311                           
  2312                           ;project.c: 452: dayOfMonth++;
  2313  001022  2A62               	incf	_dayOfMonth,f,c
  2314                           
  2315                           ;project.c: 453: if (dayOfMonth > 31) {
  2316  001024  0E1F               	movlw	31
  2317  001026  6462               	cpfsgt	_dayOfMonth,c
  2318  001028  D00E               	goto	l265
  2319                           
  2320                           ;project.c: 454: dayOfMonth = 1;
  2321  00102A  0E01               	movlw	1
  2322  00102C  6E62               	movwf	_dayOfMonth,c
  2323                           
  2324                           ;project.c: 455: month++;
  2325  00102E  2A61               	incf	_month,f,c
  2326                           
  2327                           ;project.c: 456: if (month > 12) {
  2328  001030  0E0C               	movlw	12
  2329  001032  6461               	cpfsgt	_month,c
  2330  001034  D008               	goto	l265
  2331                           
  2332                           ;project.c: 457: month = 1;
  2333  001036  0E01               	movlw	1
  2334  001038  6E61               	movwf	_month,c
  2335                           
  2336                           ;project.c: 458: year++;
  2337  00103A  2A60               	incf	_year,f,c
  2338                           
  2339                           ;project.c: 459: if (year > 99) {
  2340  00103C  0E63               	movlw	99
  2341  00103E  6460               	cpfsgt	_year,c
  2342  001040  D002               	goto	l265
  2343                           
  2344                           ;project.c: 460: year = 0;
  2345  001042  0E00               	movlw	0
  2346  001044  6E60               	movwf	_year,c
  2347  001046                     l265:
  2348                           
  2349                           ;project.c: 461: }
  2350                           ;project.c: 462: }
  2351                           ;project.c: 463: }
  2352                           ;project.c: 464: }
  2353                           ;project.c: 465: }
  2354                           ;project.c: 466: }
  2355                           ;project.c: 467: updateRTC();
  2356  001046  EC25  F00D         	call	_updateRTC	;wreg free
  2357                           
  2358                           ;project.c: 468: lcdPrint();
  2359  00104A  EC56  F00B         	call	_lcdPrint	;wreg free
  2360  00104E  0004               	clrwdt		;# 
  2361  001050  D584               	goto	l178
  2362  001052                     __end_of_main:
  2363                           	opt stack 0
  2364                           tblptru	equ	0xFF8
  2365                           tblptrh	equ	0xFF7
  2366                           tblptrl	equ	0xFF6
  2367                           tablat	equ	0xFF5
  2368                           prodh	equ	0xFF4
  2369                           prodl	equ	0xFF3
  2370                           postinc0	equ	0xFEE
  2371                           wreg	equ	0xFE8
  2372                           postdec1	equ	0xFE5
  2373                           fsr1l	equ	0xFE1
  2374                           postinc2	equ	0xFDE
  2375                           fsr2h	equ	0xFDA
  2376                           fsr2l	equ	0xFD9
  2377                           status	equ	0xFD8
  2378                           
  2379 ;; *************** function _updateRTC *****************
  2380 ;; Defined at:
  2381 ;;		line 200 in file "project.c"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;		None
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;		None
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  1    wreg      void 
  2388 ;; Registers used:
  2389 ;;		wreg, status,2, status,0, cstack
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2397 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2398 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;Total ram usage:        2 bytes
  2400 ;; Hardware stack levels used:    1
  2401 ;; Hardware stack levels required when called:    3
  2402 ;; This function calls:
  2403 ;;		___awdiv
  2404 ;;		___awmod
  2405 ;;		_i2c_start
  2406 ;;		_i2c_stop
  2407 ;;		_i2c_wb
  2408 ;; This function is called by:
  2409 ;;		_main
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text1
  2414  001A4A                     __ptext1:
  2415                           	opt stack 0
  2416  001A4A                     _updateRTC:
  2417                           	opt stack 27
  2418                           
  2419                           ;project.c: 201: i2c_start();
  2420                           
  2421                           ;incstack = 0
  2422  001A4A  ECEF  F016         	call	_i2c_start	;wreg free
  2423                           
  2424                           ;project.c: 202: i2c_wb(0xD0);
  2425  001A4E  0ED0               	movlw	208
  2426  001A50  ECE4  F014         	call	_i2c_wb
  2427                           
  2428                           ;project.c: 203: i2c_wb(0);
  2429  001A54  0E00               	movlw	0
  2430  001A56  ECE4  F014         	call	_i2c_wb
  2431                           
  2432                           ;project.c: 204: i2c_wb((seconds / 10 << 4) + seconds % 10);
  2433  001A5A  C066  F015         	movff	_seconds,___awmod@dividend
  2434  001A5E  6A16               	clrf	___awmod@dividend+1,c
  2435  001A60  0E00               	movlw	0
  2436  001A62  6E18               	movwf	___awmod@divisor+1,c
  2437  001A64  0E0A               	movlw	10
  2438  001A66  6E17               	movwf	___awmod@divisor,c
  2439  001A68  EC27  F013         	call	___awmod	;wreg free
  2440  001A6C  C015  F023         	movff	?___awmod,??_updateRTC
  2441  001A70  C016  F024         	movff	?___awmod+1,??_updateRTC+1
  2442  001A74  C066  F01B         	movff	_seconds,___awdiv@dividend
  2443  001A78  6A1C               	clrf	___awdiv@dividend+1,c
  2444  001A7A  0E00               	movlw	0
  2445  001A7C  6E1E               	movwf	___awdiv@divisor+1,c
  2446  001A7E  0E0A               	movlw	10
  2447  001A80  6E1D               	movwf	___awdiv@divisor,c
  2448  001A82  ECA4  F012         	call	___awdiv	;wreg free
  2449  001A86  381B               	swapf	?___awdiv,w,c
  2450  001A88  0BF0               	andlw	240
  2451  001A8A  2423               	addwf	??_updateRTC,w,c
  2452  001A8C  ECE4  F014         	call	_i2c_wb
  2453                           
  2454                           ;project.c: 205: i2c_wb((minutes / 10 << 4) + minutes % 10);
  2455  001A90  C065  F015         	movff	_minutes,___awmod@dividend
  2456  001A94  6A16               	clrf	___awmod@dividend+1,c
  2457  001A96  0E00               	movlw	0
  2458  001A98  6E18               	movwf	___awmod@divisor+1,c
  2459  001A9A  0E0A               	movlw	10
  2460  001A9C  6E17               	movwf	___awmod@divisor,c
  2461  001A9E  EC27  F013         	call	___awmod	;wreg free
  2462  001AA2  C015  F023         	movff	?___awmod,??_updateRTC
  2463  001AA6  C016  F024         	movff	?___awmod+1,??_updateRTC+1
  2464  001AAA  C065  F01B         	movff	_minutes,___awdiv@dividend
  2465  001AAE  6A1C               	clrf	___awdiv@dividend+1,c
  2466  001AB0  0E00               	movlw	0
  2467  001AB2  6E1E               	movwf	___awdiv@divisor+1,c
  2468  001AB4  0E0A               	movlw	10
  2469  001AB6  6E1D               	movwf	___awdiv@divisor,c
  2470  001AB8  ECA4  F012         	call	___awdiv	;wreg free
  2471  001ABC  381B               	swapf	?___awdiv,w,c
  2472  001ABE  0BF0               	andlw	240
  2473  001AC0  2423               	addwf	??_updateRTC,w,c
  2474  001AC2  ECE4  F014         	call	_i2c_wb
  2475                           
  2476                           ;project.c: 206: i2c_wb((hours / 10 << 4) + hours % 10);
  2477  001AC6  C064  F015         	movff	_hours,___awmod@dividend
  2478  001ACA  6A16               	clrf	___awmod@dividend+1,c
  2479  001ACC  0E00               	movlw	0
  2480  001ACE  6E18               	movwf	___awmod@divisor+1,c
  2481  001AD0  0E0A               	movlw	10
  2482  001AD2  6E17               	movwf	___awmod@divisor,c
  2483  001AD4  EC27  F013         	call	___awmod	;wreg free
  2484  001AD8  C015  F023         	movff	?___awmod,??_updateRTC
  2485  001ADC  C016  F024         	movff	?___awmod+1,??_updateRTC+1
  2486  001AE0  C064  F01B         	movff	_hours,___awdiv@dividend
  2487  001AE4  6A1C               	clrf	___awdiv@dividend+1,c
  2488  001AE6  0E00               	movlw	0
  2489  001AE8  6E1E               	movwf	___awdiv@divisor+1,c
  2490  001AEA  0E0A               	movlw	10
  2491  001AEC  6E1D               	movwf	___awdiv@divisor,c
  2492  001AEE  ECA4  F012         	call	___awdiv	;wreg free
  2493  001AF2  381B               	swapf	?___awdiv,w,c
  2494  001AF4  0BF0               	andlw	240
  2495  001AF6  2423               	addwf	??_updateRTC,w,c
  2496  001AF8  ECE4  F014         	call	_i2c_wb
  2497                           
  2498                           ;project.c: 207: i2c_wb(weekday);
  2499  001AFC  5063               	movf	_weekday,w,c
  2500  001AFE  ECE4  F014         	call	_i2c_wb
  2501                           
  2502                           ;project.c: 208: i2c_wb((dayOfMonth / 10 << 4) + dayOfMonth % 10);
  2503  001B02  C062  F015         	movff	_dayOfMonth,___awmod@dividend
  2504  001B06  6A16               	clrf	___awmod@dividend+1,c
  2505  001B08  0E00               	movlw	0
  2506  001B0A  6E18               	movwf	___awmod@divisor+1,c
  2507  001B0C  0E0A               	movlw	10
  2508  001B0E  6E17               	movwf	___awmod@divisor,c
  2509  001B10  EC27  F013         	call	___awmod	;wreg free
  2510  001B14  C015  F023         	movff	?___awmod,??_updateRTC
  2511  001B18  C016  F024         	movff	?___awmod+1,??_updateRTC+1
  2512  001B1C  C062  F01B         	movff	_dayOfMonth,___awdiv@dividend
  2513  001B20  6A1C               	clrf	___awdiv@dividend+1,c
  2514  001B22  0E00               	movlw	0
  2515  001B24  6E1E               	movwf	___awdiv@divisor+1,c
  2516  001B26  0E0A               	movlw	10
  2517  001B28  6E1D               	movwf	___awdiv@divisor,c
  2518  001B2A  ECA4  F012         	call	___awdiv	;wreg free
  2519  001B2E  381B               	swapf	?___awdiv,w,c
  2520  001B30  0BF0               	andlw	240
  2521  001B32  2423               	addwf	??_updateRTC,w,c
  2522  001B34  ECE4  F014         	call	_i2c_wb
  2523                           
  2524                           ;project.c: 209: i2c_wb((month / 10 << 4) + month % 10);
  2525  001B38  C061  F015         	movff	_month,___awmod@dividend
  2526  001B3C  6A16               	clrf	___awmod@dividend+1,c
  2527  001B3E  0E00               	movlw	0
  2528  001B40  6E18               	movwf	___awmod@divisor+1,c
  2529  001B42  0E0A               	movlw	10
  2530  001B44  6E17               	movwf	___awmod@divisor,c
  2531  001B46  EC27  F013         	call	___awmod	;wreg free
  2532  001B4A  C015  F023         	movff	?___awmod,??_updateRTC
  2533  001B4E  C016  F024         	movff	?___awmod+1,??_updateRTC+1
  2534  001B52  C061  F01B         	movff	_month,___awdiv@dividend
  2535  001B56  6A1C               	clrf	___awdiv@dividend+1,c
  2536  001B58  0E00               	movlw	0
  2537  001B5A  6E1E               	movwf	___awdiv@divisor+1,c
  2538  001B5C  0E0A               	movlw	10
  2539  001B5E  6E1D               	movwf	___awdiv@divisor,c
  2540  001B60  ECA4  F012         	call	___awdiv	;wreg free
  2541  001B64  381B               	swapf	?___awdiv,w,c
  2542  001B66  0BF0               	andlw	240
  2543  001B68  2423               	addwf	??_updateRTC,w,c
  2544  001B6A  ECE4  F014         	call	_i2c_wb
  2545                           
  2546                           ;project.c: 210: i2c_wb((year / 10 << 4) + year % 10);
  2547  001B6E  C060  F015         	movff	_year,___awmod@dividend
  2548  001B72  6A16               	clrf	___awmod@dividend+1,c
  2549  001B74  0E00               	movlw	0
  2550  001B76  6E18               	movwf	___awmod@divisor+1,c
  2551  001B78  0E0A               	movlw	10
  2552  001B7A  6E17               	movwf	___awmod@divisor,c
  2553  001B7C  EC27  F013         	call	___awmod	;wreg free
  2554  001B80  C015  F023         	movff	?___awmod,??_updateRTC
  2555  001B84  C016  F024         	movff	?___awmod+1,??_updateRTC+1
  2556  001B88  C060  F01B         	movff	_year,___awdiv@dividend
  2557  001B8C  6A1C               	clrf	___awdiv@dividend+1,c
  2558  001B8E  0E00               	movlw	0
  2559  001B90  6E1E               	movwf	___awdiv@divisor+1,c
  2560  001B92  0E0A               	movlw	10
  2561  001B94  6E1D               	movwf	___awdiv@divisor,c
  2562  001B96  ECA4  F012         	call	___awdiv	;wreg free
  2563  001B9A  381B               	swapf	?___awdiv,w,c
  2564  001B9C  0BF0               	andlw	240
  2565  001B9E  2423               	addwf	??_updateRTC,w,c
  2566  001BA0  ECE4  F014         	call	_i2c_wb
  2567                           
  2568                           ;project.c: 211: i2c_stop();
  2569  001BA4  ECE7  F016         	call	_i2c_stop	;wreg free
  2570  001BA8  0012               	return		;funcret
  2571  001BAA                     __end_of_updateRTC:
  2572                           	opt stack 0
  2573                           tblptru	equ	0xFF8
  2574                           tblptrh	equ	0xFF7
  2575                           tblptrl	equ	0xFF6
  2576                           tablat	equ	0xFF5
  2577                           prodh	equ	0xFF4
  2578                           prodl	equ	0xFF3
  2579                           postinc0	equ	0xFEE
  2580                           wreg	equ	0xFE8
  2581                           postdec1	equ	0xFE5
  2582                           fsr1l	equ	0xFE1
  2583                           postinc2	equ	0xFDE
  2584                           fsr2h	equ	0xFDA
  2585                           fsr2l	equ	0xFD9
  2586                           status	equ	0xFD8
  2587                           
  2588 ;; *************** function _send_string_no_lib *****************
  2589 ;; Defined at:
  2590 ;;		line 47 in file "my_ser.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;  p               2   21[COMRAM] PTR unsigned char 
  2593 ;;		 -> STR_28(3), STR_27(3), STR_26(3), STR_24(3), 
  2594 ;;		 -> STR_23(3), STR_22(2), STR_20(3), STR_19(3), 
  2595 ;;		 -> STR_17(3), STR_16(3), STR_15(3), STR_14(3), 
  2596 ;;		 -> main@Buffer(128), STR_13(3), 
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;		None
  2599 ;; Return value:  Size  Location     Type
  2600 ;;                  1    wreg      void 
  2601 ;; Registers used:
  2602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2603 ;; Tracked objects:
  2604 ;;		On entry : 0/0
  2605 ;;		On exit  : 0/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2608 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2611 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2612 ;;Total ram usage:        2 bytes
  2613 ;; Hardware stack levels used:    1
  2614 ;; Hardware stack levels required when called:    2
  2615 ;; This function calls:
  2616 ;;		_send_byte_no_lib
  2617 ;; This function is called by:
  2618 ;;		_main
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           	psect	text2
  2623  00291C                     __ptext2:
  2624                           	opt stack 0
  2625  00291C                     _send_string_no_lib:
  2626                           	opt stack 28
  2627                           
  2628                           ;my_ser.c: 48: while (*p) {
  2629                           
  2630                           ;incstack = 0
  2631  00291C  D015               	goto	l482
  2632  00291E                     
  2633                           ;my_ser.c: 49: send_byte_no_lib(*p);
  2634  00291E  C016  FFF6         	movff	send_string_no_lib@p,tblptrl
  2635  002922  C017  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  2636  002926  0E00               	movlw	low (__mediumconst shr (0+16))
  2637  002928  6EF8               	movwf	tblptru,c
  2638  00292A  0E0F               	movlw	(high __ramtop+-1)
  2639  00292C  64F7               	cpfsgt	tblptrh,c
  2640  00292E  D003               	bra	u4447
  2641  002930  0008               	tblrd		*
  2642  002932  50F5               	movf	tablat,w,c
  2643  002934  D005               	bra	u4440
  2644  002936                     u4447:
  2645  002936  CFF6 FFE1          	movff	tblptrl,fsr1l
  2646  00293A  CFF7 FFE2          	movff	tblptrh,fsr1h
  2647  00293E  50E7               	movf	indf1,w,c
  2648  002940                     u4440:
  2649  002940  ECDF  F016         	call	_send_byte_no_lib
  2650                           
  2651                           ;my_ser.c: 50: p++;
  2652  002944  4A16               	infsnz	send_string_no_lib@p,f,c
  2653  002946  2A17               	incf	send_string_no_lib@p+1,f,c
  2654  002948                     l482:
  2655  002948  C016  FFF6         	movff	send_string_no_lib@p,tblptrl
  2656  00294C  C017  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  2657  002950  0E00               	movlw	low (__mediumconst shr (0+16))
  2658  002952  6EF8               	movwf	tblptru,c
  2659  002954  0E0F               	movlw	(high __ramtop+-1)
  2660  002956  64F7               	cpfsgt	tblptrh,c
  2661  002958  D003               	bra	u4457
  2662  00295A  0008               	tblrd		*
  2663  00295C  50F5               	movf	tablat,w,c
  2664  00295E  D005               	bra	u4450
  2665  002960                     u4457:
  2666  002960  CFF6 FFE1          	movff	tblptrl,fsr1l
  2667  002964  CFF7 FFE2          	movff	tblptrh,fsr1h
  2668  002968  50E7               	movf	indf1,w,c
  2669  00296A                     u4450:
  2670  00296A  0900               	iorlw	0
  2671  00296C  B4D8               	btfsc	status,2,c
  2672  00296E  0012               	return	
  2673  002970  D7D6               	goto	l483
  2674  002972                     __end_of_send_string_no_lib:
  2675                           	opt stack 0
  2676                           tblptru	equ	0xFF8
  2677                           tblptrh	equ	0xFF7
  2678                           tblptrl	equ	0xFF6
  2679                           tablat	equ	0xFF5
  2680                           prodh	equ	0xFF4
  2681                           prodl	equ	0xFF3
  2682                           postinc0	equ	0xFEE
  2683                           wreg	equ	0xFE8
  2684                           indf1	equ	0xFE7
  2685                           postdec1	equ	0xFE5
  2686                           fsr1h	equ	0xFE2
  2687                           fsr1l	equ	0xFE1
  2688                           postinc2	equ	0xFDE
  2689                           fsr2h	equ	0xFDA
  2690                           fsr2l	equ	0xFD9
  2691                           status	equ	0xFD8
  2692                           
  2693 ;; *************** function _send_byte_no_lib *****************
  2694 ;; Defined at:
  2695 ;;		line 39 in file "my_ser.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  c               1    wreg     unsigned char 
  2698 ;; Auto vars:     Size  Location     Type
  2699 ;;  c               1   20[COMRAM] unsigned char 
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  1    wreg      void 
  2702 ;; Registers used:
  2703 ;;		wreg
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2710 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;Total ram usage:        1 bytes
  2714 ;; Hardware stack levels used:    1
  2715 ;; Hardware stack levels required when called:    1
  2716 ;; This function calls:
  2717 ;;		Nothing
  2718 ;; This function is called by:
  2719 ;;		_send_string_no_lib
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           	psect	text3
  2724  002DBE                     __ptext3:
  2725                           	opt stack 0
  2726  002DBE                     _send_byte_no_lib:
  2727                           	opt stack 28
  2728                           
  2729                           ;incstack = 0
  2730                           ;send_byte_no_lib@c stored from wreg
  2731  002DBE  6E15               	movwf	send_byte_no_lib@c,c
  2732                           
  2733                           ;my_ser.c: 40: while (!TXSTAbits.TRMT)
  2734  002DC0  D001               	goto	l476
  2735  002DC2                     l477:
  2736  002DC2  0004               	clrwdt		;# 
  2737  002DC4                     l476:
  2738  002DC4  A2AC               	btfss	4012,1,c	;volatile
  2739  002DC6  D7FD               	goto	l477
  2740                           
  2741                           ;my_ser.c: 43: }
  2742                           ;my_ser.c: 44: TXREG = c;
  2743  002DC8  C015  FFAD         	movff	send_byte_no_lib@c,4013	;volatile
  2744  002DCC  0012               	return		;funcret
  2745  002DCE                     __end_of_send_byte_no_lib:
  2746                           	opt stack 0
  2747                           tblptru	equ	0xFF8
  2748                           tblptrh	equ	0xFF7
  2749                           tblptrl	equ	0xFF6
  2750                           tablat	equ	0xFF5
  2751                           prodh	equ	0xFF4
  2752                           prodl	equ	0xFF3
  2753                           postinc0	equ	0xFEE
  2754                           wreg	equ	0xFE8
  2755                           indf1	equ	0xFE7
  2756                           postdec1	equ	0xFE5
  2757                           fsr1h	equ	0xFE2
  2758                           fsr1l	equ	0xFE1
  2759                           postinc2	equ	0xFDE
  2760                           fsr2h	equ	0xFDA
  2761                           fsr2l	equ	0xFD9
  2762                           status	equ	0xFD8
  2763                           
  2764 ;; *************** function _read_byte_no_lib *****************
  2765 ;; Defined at:
  2766 ;;		line 33 in file "my_ser.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;		None
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;  c               1   20[COMRAM] unsigned char 
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      unsigned char 
  2773 ;; Registers used:
  2774 ;;		wreg, status,2
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : 0/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2781 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;Total ram usage:        1 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:    1
  2787 ;; This function calls:
  2788 ;;		Nothing
  2789 ;; This function is called by:
  2790 ;;		_main
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           	psect	text4
  2795  002E2A                     __ptext4:
  2796                           	opt stack 0
  2797  002E2A                     _read_byte_no_lib:
  2798                           	opt stack 29
  2799                           
  2800                           ;my_ser.c: 34: unsigned char c;
  2801                           ;my_ser.c: 35: c = RCREG;
  2802                           
  2803                           ;incstack = 0
  2804  002E2A  CFAE F015          	movff	4014,read_byte_no_lib@c	;volatile
  2805                           
  2806                           ;my_ser.c: 36: return c;
  2807  002E2E  5015               	movf	read_byte_no_lib@c,w,c
  2808  002E30  0012               	return	
  2809  002E32                     __end_of_read_byte_no_lib:
  2810                           	opt stack 0
  2811                           tblptru	equ	0xFF8
  2812                           tblptrh	equ	0xFF7
  2813                           tblptrl	equ	0xFF6
  2814                           tablat	equ	0xFF5
  2815                           prodh	equ	0xFF4
  2816                           prodl	equ	0xFF3
  2817                           postinc0	equ	0xFEE
  2818                           wreg	equ	0xFE8
  2819                           indf1	equ	0xFE7
  2820                           postdec1	equ	0xFE5
  2821                           fsr1h	equ	0xFE2
  2822                           fsr1l	equ	0xFE1
  2823                           postinc2	equ	0xFDE
  2824                           fsr2h	equ	0xFDA
  2825                           fsr2l	equ	0xFD9
  2826                           status	equ	0xFD8
  2827                           
  2828 ;; *************** function _lcdPrint *****************
  2829 ;; Defined at:
  2830 ;;		line 129 in file "project.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;		None
  2833 ;; Auto vars:     Size  Location     Type
  2834 ;;  Buffer         32    0[BANK1 ] unsigned char [32]
  2835 ;;  AN              9   40[BANK1 ] float [3]
  2836 ;;  voltage         3   32[BANK1 ] float 
  2837 ;;  RPS             2   38[BANK1 ] int 
  2838 ;;  raw_val         2    0        int 
  2839 ;;  channel         1   49[BANK1 ] unsigned char 
  2840 ;; Return value:  Size  Location     Type
  2841 ;;                  1    wreg      void 
  2842 ;; Registers used:
  2843 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2850 ;;      Locals:         0       0      50       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2851 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2852 ;;      Totals:         1       0      50       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2853 ;;Total ram usage:       51 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:    7
  2856 ;; This function calls:
  2857 ;;		___awtoft
  2858 ;;		___ftdiv
  2859 ;;		___ftmul
  2860 ;;		___lwtoft
  2861 ;;		_delay_ms
  2862 ;;		_lcd_gotoxy
  2863 ;;		_lcd_putc
  2864 ;;		_lcd_puts
  2865 ;;		_read_adc_voltage
  2866 ;;		_rtc_r
  2867 ;;		_sprintf
  2868 ;; This function is called by:
  2869 ;;		_main
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text5
  2874  0016AC                     __ptext5:
  2875                           	opt stack 0
  2876  0016AC                     _lcdPrint:
  2877                           	opt stack 23
  2878                           
  2879                           ;project.c: 130: char Buffer[32];
  2880                           ;project.c: 131: float AN[3];
  2881                           ;project.c: 132: int raw_val;
  2882                           ;project.c: 133: unsigned char channel;
  2883                           ;project.c: 134: float voltage;
  2884                           ;project.c: 135: int RPS;
  2885                           ;project.c: 137: rtc_r();
  2886                           
  2887                           ;incstack = 0
  2888  0016AC  EC02  F00F         	call	_rtc_r	;wreg free
  2889                           
  2890                           ;project.c: 138: lcd_gotoxy(1, 1);
  2891  0016B0  0E01               	movlw	1
  2892  0016B2  6E1F               	movwf	lcd_gotoxy@y,c
  2893  0016B4  0E01               	movlw	1
  2894  0016B6  EC33  F015         	call	_lcd_gotoxy
  2895                           
  2896                           ;project.c: 139: lcd_puts((char *) date);
  2897  0016BA  0EE5               	movlw	low _date
  2898  0016BC  6E23               	movwf	lcd_puts@s,c
  2899  0016BE  0E00               	movlw	high _date
  2900  0016C0  6E24               	movwf	lcd_puts@s+1,c
  2901  0016C2  EC56  F016         	call	_lcd_puts	;wreg free
  2902                           
  2903                           ;project.c: 140: lcd_gotoxy(4, 2);
  2904  0016C6  0E02               	movlw	2
  2905  0016C8  6E1F               	movwf	lcd_gotoxy@y,c
  2906  0016CA  0E04               	movlw	4
  2907  0016CC  EC33  F015         	call	_lcd_gotoxy
  2908                           
  2909                           ;project.c: 141: lcd_puts((char *) time);
  2910  0016D0  0EDB               	movlw	low _time
  2911  0016D2  6E23               	movwf	lcd_puts@s,c
  2912  0016D4  0E00               	movlw	high _time
  2913  0016D6  6E24               	movwf	lcd_puts@s+1,c
  2914  0016D8  EC56  F016         	call	_lcd_puts	;wreg free
  2915                           
  2916                           ;project.c: 143: PORTCbits.RC5 = !PORTCbits.RC5;
  2917  0016DC  BA82               	btfsc	3970,5,c	;volatile
  2918  0016DE  D003               	goto	u6680
  2919  0016E0  6A57               	clrf	??_lcdPrint& (0+255),c
  2920  0016E2  2A57               	incf	??_lcdPrint& (0+255),f,c
  2921  0016E4  D001               	goto	u6698
  2922  0016E6                     u6680:
  2923  0016E6  6A57               	clrf	??_lcdPrint& (0+255),c
  2924  0016E8                     u6698:
  2925  0016E8  3A57               	swapf	??_lcdPrint,f,c
  2926  0016EA  4657               	rlncf	??_lcdPrint,f,c
  2927  0016EC  5082               	movf	3970,w,c	;volatile
  2928  0016EE  1857               	xorwf	??_lcdPrint,w,c
  2929  0016F0  0BDF               	andlw	-33
  2930  0016F2  1857               	xorwf	??_lcdPrint,w,c
  2931  0016F4  6E82               	movwf	3970,c	;volatile
  2932                           
  2933                           ;project.c: 144: delay_ms(1000);
  2934  0016F6  0E03               	movlw	3
  2935  0016F8  6E16               	movwf	delay_ms@n+1,c
  2936  0016FA  0EE8               	movlw	232
  2937  0016FC  6E15               	movwf	delay_ms@n,c
  2938  0016FE  EC43  F016         	call	_delay_ms	;wreg free
  2939                           
  2940                           ;project.c: 145: for (channel = 0; channel < 3; channel++) {
  2941  001702  0E00               	movlw	0
  2942  001704  0101               	movlb	1	; () banked
  2943  001706  6F31               	movwf	lcdPrint@channel& (0+255),b
  2944  001708                     l6049:
  2945                           
  2946                           ; BSR set to: 1
  2947  001708  0E02               	movlw	2
  2948  00170A  6531               	cpfsgt	lcdPrint@channel& (0+255),b
  2949  00170C  D001               	goto	l129
  2950  00170E  D01A               	goto	u6710
  2951  001710                     l129:
  2952                           
  2953                           ; BSR set to: 1
  2954                           ;project.c: 147: voltage = read_adc_voltage((unsigned char) channel);
  2955                           
  2956                           ; BSR set to: 1
  2957  001710  5131               	movf	lcdPrint@channel& (0+255),w,b
  2958  001712  ECC9  F013         	call	_read_adc_voltage
  2959  001716  C047  F120         	movff	?_read_adc_voltage,lcdPrint@voltage
  2960  00171A  C048  F121         	movff	?_read_adc_voltage+1,lcdPrint@voltage+1
  2961  00171E  C049  F122         	movff	?_read_adc_voltage+2,lcdPrint@voltage+2
  2962                           
  2963                           ;project.c: 148: AN[channel] = voltage;
  2964  001722  0101               	movlb	1	; () banked
  2965  001724  5131               	movf	lcdPrint@channel& (0+255),w,b
  2966  001726  0D03               	mullw	3
  2967  001728  0E28               	movlw	low lcdPrint@AN
  2968  00172A  24F3               	addwf	prodl,w,c
  2969  00172C  6ED9               	movwf	fsr2l,c
  2970  00172E  0E01               	movlw	high lcdPrint@AN
  2971  001730  20F4               	addwfc	prodh,w,c
  2972  001732  6EDA               	movwf	fsr2h,c
  2973  001734  C120  FFDE         	movff	lcdPrint@voltage,postinc2
  2974  001738  C121  FFDE         	movff	lcdPrint@voltage+1,postinc2
  2975  00173C  C122  FFDE         	movff	lcdPrint@voltage+2,postinc2
  2976                           
  2977                           ; BSR set to: 1
  2978  001740  2B31               	incf	lcdPrint@channel& (0+255),f,b
  2979  001742  D7E2               	goto	l6049
  2980  001744                     u6710:
  2981                           
  2982                           ; BSR set to: 1
  2983                           ;project.c: 149: }
  2984                           ;project.c: 150: lcd_gotoxy(1, 3);
  2985                           
  2986                           ; BSR set to: 1
  2987  001744  0E03               	movlw	3
  2988  001746  6E1F               	movwf	lcd_gotoxy@y,c
  2989  001748  0E01               	movlw	1
  2990  00174A  EC33  F015         	call	_lcd_gotoxy
  2991                           
  2992                           ;project.c: 151: sprintf(Buffer, "%3.2f, %3.2f, %3.2f", AN[0], AN[1],AN[2]);
  2993  00174E  0E00               	movlw	low lcdPrint@Buffer
  2994  001750  0100               	movlb	0	; () banked
  2995  001752  6F86               	movwf	sprintf@sp& (0+255),b
  2996  001754  0E01               	movlw	high lcdPrint@Buffer
  2997  001756  6F87               	movwf	(sprintf@sp+1)& (0+255),b
  2998  001758  0E83               	movlw	low STR_9
  2999  00175A  6F88               	movwf	sprintf@f& (0+255),b
  3000  00175C  0EFF               	movlw	high STR_9
  3001  00175E  6F89               	movwf	(sprintf@f+1)& (0+255),b
  3002  001760  C128  F08A         	movff	lcdPrint@AN,?_sprintf+4
  3003  001764  C129  F08B         	movff	lcdPrint@AN+1,?_sprintf+5
  3004  001768  C12A  F08C         	movff	lcdPrint@AN+2,?_sprintf+6
  3005  00176C  C12B  F08D         	movff	lcdPrint@AN+3,?_sprintf+7
  3006  001770  C12C  F08E         	movff	lcdPrint@AN+4,?_sprintf+8
  3007  001774  C12D  F08F         	movff	lcdPrint@AN+5,?_sprintf+9
  3008  001778  C12E  F090         	movff	lcdPrint@AN+6,?_sprintf+10
  3009  00177C  C12F  F091         	movff	lcdPrint@AN+7,?_sprintf+11
  3010  001780  C130  F092         	movff	lcdPrint@AN+8,?_sprintf+12
  3011  001784  EC09  F000         	call	_sprintf	;wreg free
  3012                           
  3013                           ;project.c: 152: lcd_puts(Buffer);
  3014  001788  0E00               	movlw	low lcdPrint@Buffer
  3015  00178A  6E23               	movwf	lcd_puts@s,c
  3016  00178C  0E01               	movlw	high lcdPrint@Buffer
  3017  00178E  6E24               	movwf	lcd_puts@s+1,c
  3018  001790  EC56  F016         	call	_lcd_puts	;wreg free
  3019                           
  3020                           ;project.c: 153: lcd_gotoxy(10, 1);
  3021  001794  0E01               	movlw	1
  3022  001796  6E1F               	movwf	lcd_gotoxy@y,c
  3023  001798  0E0A               	movlw	10
  3024  00179A  EC33  F015         	call	_lcd_gotoxy
  3025                           
  3026                           ;project.c: 154: RPS = RPS_count;
  3027  00179E  C0D9  F126         	movff	_RPS_count,lcdPrint@RPS
  3028  0017A2  C0DA  F127         	movff	_RPS_count+1,lcdPrint@RPS+1
  3029                           
  3030                           ;project.c: 155: sprintf(Buffer, "S=%4.2f", RPS/7.0);
  3031  0017A6  0E00               	movlw	low lcdPrint@Buffer
  3032  0017A8  0100               	movlb	0	; () banked
  3033  0017AA  6F86               	movwf	sprintf@sp& (0+255),b
  3034  0017AC  0E01               	movlw	high lcdPrint@Buffer
  3035  0017AE  6F87               	movwf	(sprintf@sp+1)& (0+255),b
  3036  0017B0  0ED2               	movlw	low STR_10
  3037  0017B2  6F88               	movwf	sprintf@f& (0+255),b
  3038  0017B4  0EFF               	movlw	high STR_10
  3039  0017B6  6F89               	movwf	(sprintf@f+1)& (0+255),b
  3040  0017B8  C126  F029         	movff	lcdPrint@RPS,___awtoft@c
  3041  0017BC  C127  F02A         	movff	lcdPrint@RPS+1,___awtoft@c+1
  3042  0017C0  ECD0  F015         	call	___awtoft	;wreg free
  3043  0017C4  C029  F038         	movff	?___awtoft,___ftdiv@f1
  3044  0017C8  C02A  F039         	movff	?___awtoft+1,___ftdiv@f1+1
  3045  0017CC  C02B  F03A         	movff	?___awtoft+2,___ftdiv@f1+2
  3046  0017D0  0E00               	movlw	0
  3047  0017D2  6E3B               	movwf	___ftdiv@f2,c
  3048  0017D4  0EE0               	movlw	224
  3049  0017D6  6E3C               	movwf	___ftdiv@f2+1,c
  3050  0017D8  0E40               	movlw	64
  3051  0017DA  6E3D               	movwf	___ftdiv@f2+2,c
  3052  0017DC  EC79  F010         	call	___ftdiv	;wreg free
  3053  0017E0  C038  F08A         	movff	?___ftdiv,?_sprintf+4
  3054  0017E4  C039  F08B         	movff	?___ftdiv+1,?_sprintf+5
  3055  0017E8  C03A  F08C         	movff	?___ftdiv+2,?_sprintf+6
  3056  0017EC  EC09  F000         	call	_sprintf	;wreg free
  3057                           
  3058                           ;project.c: 156: lcd_puts(Buffer);
  3059  0017F0  0E00               	movlw	low lcdPrint@Buffer
  3060  0017F2  6E23               	movwf	lcd_puts@s,c
  3061  0017F4  0E01               	movlw	high lcdPrint@Buffer
  3062  0017F6  6E24               	movwf	lcd_puts@s+1,c
  3063  0017F8  EC56  F016         	call	_lcd_puts	;wreg free
  3064                           
  3065                           ;project.c: 157: lcd_gotoxy(1, 4);
  3066  0017FC  0E04               	movlw	4
  3067  0017FE  6E1F               	movwf	lcd_gotoxy@y,c
  3068  001800  0E01               	movlw	1
  3069  001802  EC33  F015         	call	_lcd_gotoxy
  3070                           
  3071                           ;project.c: 158: sprintf(Buffer, "D=%4d %6.2f", raw_val1, (raw_val1 * 100.0) / 1023.0);
  3072  001806  0E00               	movlw	0
  3073  001808  6E2C               	movwf	___ftmul@f2,c
  3074  00180A  0EC8               	movlw	200
  3075  00180C  6E2D               	movwf	___ftmul@f2+1,c
  3076  00180E  0E42               	movlw	66
  3077  001810  6E2E               	movwf	___ftmul@f2+2,c
  3078  001812  C0D7  F01D         	movff	_raw_val1,___lwtoft@c
  3079  001816  C0D8  F01E         	movff	_raw_val1+1,___lwtoft@c+1
  3080  00181A  EC7A  F016         	call	___lwtoft	;wreg free
  3081  00181E  C01D  F029         	movff	?___lwtoft,___ftmul@f1
  3082  001822  C01E  F02A         	movff	?___lwtoft+1,___ftmul@f1+1
  3083  001826  C01F  F02B         	movff	?___lwtoft+2,___ftmul@f1+2
  3084  00182A  ECFF  F00F         	call	___ftmul	;wreg free
  3085  00182E  C029  F038         	movff	?___ftmul,___ftdiv@f1
  3086  001832  C02A  F039         	movff	?___ftmul+1,___ftdiv@f1+1
  3087  001836  C02B  F03A         	movff	?___ftmul+2,___ftdiv@f1+2
  3088  00183A  0EC0               	movlw	192
  3089  00183C  6E3B               	movwf	___ftdiv@f2,c
  3090  00183E  0E7F               	movlw	127
  3091  001840  6E3C               	movwf	___ftdiv@f2+1,c
  3092  001842  0E44               	movlw	68
  3093  001844  6E3D               	movwf	___ftdiv@f2+2,c
  3094  001846  EC79  F010         	call	___ftdiv	;wreg free
  3095  00184A  C038  F123         	movff	?___ftdiv,_lcdPrint$1962
  3096  00184E  C039  F124         	movff	?___ftdiv+1,_lcdPrint$1962+1
  3097  001852  C03A  F125         	movff	?___ftdiv+2,_lcdPrint$1962+2
  3098                           
  3099                           ;project.c: 158: sprintf(Buffer, "D=%4d %6.2f", raw_val1, (raw_val1 * 100.0) / 1023.0);
  3100  001856  0E00               	movlw	low lcdPrint@Buffer
  3101  001858  0100               	movlb	0	; () banked
  3102  00185A  6F86               	movwf	sprintf@sp& (0+255),b
  3103  00185C  0E01               	movlw	high lcdPrint@Buffer
  3104  00185E  6F87               	movwf	(sprintf@sp+1)& (0+255),b
  3105  001860  0EC6               	movlw	low STR_11
  3106  001862  6F88               	movwf	sprintf@f& (0+255),b
  3107  001864  0EFF               	movlw	high STR_11
  3108  001866  6F89               	movwf	(sprintf@f+1)& (0+255),b
  3109  001868  C0D7  F08A         	movff	_raw_val1,?_sprintf+4
  3110  00186C  C0D8  F08B         	movff	_raw_val1+1,?_sprintf+5
  3111  001870  C123  F08C         	movff	_lcdPrint$1962,?_sprintf+6
  3112  001874  C124  F08D         	movff	_lcdPrint$1962+1,?_sprintf+7
  3113  001878  C125  F08E         	movff	_lcdPrint$1962+2,?_sprintf+8
  3114  00187C  EC09  F000         	call	_sprintf	;wreg free
  3115                           
  3116                           ;project.c: 159: lcd_puts(Buffer);
  3117  001880  0E00               	movlw	low lcdPrint@Buffer
  3118  001882  6E23               	movwf	lcd_puts@s,c
  3119  001884  0E01               	movlw	high lcdPrint@Buffer
  3120  001886  6E24               	movwf	lcd_puts@s+1,c
  3121  001888  EC56  F016         	call	_lcd_puts	;wreg free
  3122                           
  3123                           ;project.c: 160: lcd_gotoxy(14, 4);
  3124  00188C  0E04               	movlw	4
  3125  00188E  6E1F               	movwf	lcd_gotoxy@y,c
  3126  001890  0E0E               	movlw	14
  3127  001892  EC33  F015         	call	_lcd_gotoxy
  3128                           
  3129                           ;project.c: 161: lcd_putc('%');
  3130  001896  0E25               	movlw	37
  3131  001898  ECB9  F014         	call	_lcd_putc
  3132  00189C  0012               	return		;funcret
  3133  00189E                     __end_of_lcdPrint:
  3134                           	opt stack 0
  3135                           tblptru	equ	0xFF8
  3136                           tblptrh	equ	0xFF7
  3137                           tblptrl	equ	0xFF6
  3138                           tablat	equ	0xFF5
  3139                           prodh	equ	0xFF4
  3140                           prodl	equ	0xFF3
  3141                           postinc0	equ	0xFEE
  3142                           wreg	equ	0xFE8
  3143                           indf1	equ	0xFE7
  3144                           postdec1	equ	0xFE5
  3145                           fsr1h	equ	0xFE2
  3146                           fsr1l	equ	0xFE1
  3147                           postinc2	equ	0xFDE
  3148                           fsr2h	equ	0xFDA
  3149                           fsr2l	equ	0xFD9
  3150                           status	equ	0xFD8
  3151                           
  3152 ;; *************** function _rtc_r *****************
  3153 ;; Defined at:
  3154 ;;		line 20 in file "sw_rtc.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;		None
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;  tmp             1   25[COMRAM] unsigned char 
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      void 
  3161 ;; Registers used:
  3162 ;;		wreg, status,2, status,0, cstack
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;Total ram usage:        1 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    3
  3175 ;; This function calls:
  3176 ;;		_getd
  3177 ;;		_getu
  3178 ;;		_i2c_rb
  3179 ;;		_i2c_start
  3180 ;;		_i2c_stop
  3181 ;;		_i2c_wb
  3182 ;; This function is called by:
  3183 ;;		_lcdPrint
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           	psect	text6
  3188  001E04                     __ptext6:
  3189                           	opt stack 0
  3190  001E04                     _rtc_r:
  3191                           	opt stack 26
  3192                           
  3193                           ;sw_rtc.c: 22: unsigned char tmp;
  3194                           ;sw_rtc.c: 24: i2c_start();
  3195                           
  3196                           ;incstack = 0
  3197  001E04  ECEF  F016         	call	_i2c_start	;wreg free
  3198                           
  3199                           ;sw_rtc.c: 25: i2c_wb(0xD0);
  3200  001E08  0ED0               	movlw	208
  3201  001E0A  ECE4  F014         	call	_i2c_wb
  3202                           
  3203                           ;sw_rtc.c: 26: i2c_wb(0);
  3204  001E0E  0E00               	movlw	0
  3205  001E10  ECE4  F014         	call	_i2c_wb
  3206                           
  3207                           ;sw_rtc.c: 28: i2c_start();
  3208  001E14  ECEF  F016         	call	_i2c_start	;wreg free
  3209                           
  3210                           ;sw_rtc.c: 29: i2c_wb(0xD1);
  3211  001E18  0ED1               	movlw	209
  3212  001E1A  ECE4  F014         	call	_i2c_wb
  3213                           
  3214                           ;sw_rtc.c: 30: tmp= 0x7F & i2c_rb(1);
  3215  001E1E  0E01               	movlw	1
  3216  001E20  EC95  F013         	call	_i2c_rb
  3217  001E24  0B7F               	andlw	127
  3218  001E26  6E1A               	movwf	rtc_r@tmp,c
  3219                           
  3220                           ;sw_rtc.c: 31: time[5]=':';
  3221  001E28  0E3A               	movlw	58
  3222  001E2A  0100               	movlb	0	; () banked
  3223  001E2C  6FE0               	movwf	(_time+5)& (0+255),b	;volatile
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;sw_rtc.c: 32: time[6]=getd(tmp);
  3227  001E2E  501A               	movf	rtc_r@tmp,w,c
  3228  001E30  ECFF  F016         	call	_getd
  3229  001E34  0100               	movlb	0	; () banked
  3230  001E36  6FE1               	movwf	(_time+6)& (0+255),b	;volatile
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;sw_rtc.c: 33: time[7]=getu(tmp);
  3234  001E38  501A               	movf	rtc_r@tmp,w,c
  3235  001E3A  EC0B  F017         	call	_getu
  3236  001E3E  0100               	movlb	0	; () banked
  3237  001E40  6FE2               	movwf	(_time+7)& (0+255),b	;volatile
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;sw_rtc.c: 34: time[8]=0;
  3241  001E42  0E00               	movlw	0
  3242  001E44  6FE3               	movwf	(_time+8)& (0+255),b	;volatile
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;sw_rtc.c: 36: tmp= 0x7F & i2c_rb(1);
  3246  001E46  0E01               	movlw	1
  3247  001E48  EC95  F013         	call	_i2c_rb
  3248  001E4C  0B7F               	andlw	127
  3249  001E4E  6E1A               	movwf	rtc_r@tmp,c
  3250                           
  3251                           ;sw_rtc.c: 37: time[2]=':';
  3252  001E50  0E3A               	movlw	58
  3253  001E52  0100               	movlb	0	; () banked
  3254  001E54  6FDD               	movwf	(_time+2)& (0+255),b	;volatile
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;sw_rtc.c: 38: time[3]=getd(tmp);
  3258  001E56  501A               	movf	rtc_r@tmp,w,c
  3259  001E58  ECFF  F016         	call	_getd
  3260  001E5C  0100               	movlb	0	; () banked
  3261  001E5E  6FDE               	movwf	(_time+3)& (0+255),b	;volatile
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;sw_rtc.c: 39: time[4]=getu(tmp);
  3265  001E60  501A               	movf	rtc_r@tmp,w,c
  3266  001E62  EC0B  F017         	call	_getu
  3267  001E66  0100               	movlb	0	; () banked
  3268  001E68  6FDF               	movwf	(_time+4)& (0+255),b	;volatile
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;sw_rtc.c: 41: tmp= 0x3F & i2c_rb(1);
  3272  001E6A  0E01               	movlw	1
  3273  001E6C  EC95  F013         	call	_i2c_rb
  3274  001E70  0B3F               	andlw	63
  3275  001E72  6E1A               	movwf	rtc_r@tmp,c
  3276                           
  3277                           ;sw_rtc.c: 42: time[0]=getd(tmp);
  3278  001E74  501A               	movf	rtc_r@tmp,w,c
  3279  001E76  ECFF  F016         	call	_getd
  3280  001E7A  0100               	movlb	0	; () banked
  3281  001E7C  6FDB               	movwf	_time& (0+255),b	;volatile
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;sw_rtc.c: 43: time[1]=getu(tmp);
  3285  001E7E  501A               	movf	rtc_r@tmp,w,c
  3286  001E80  EC0B  F017         	call	_getu
  3287  001E84  0100               	movlb	0	; () banked
  3288  001E86  6FDC               	movwf	(_time+1)& (0+255),b	;volatile
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;sw_rtc.c: 45: tmp = i2c_rb(1);
  3292  001E88  0E01               	movlw	1
  3293  001E8A  EC95  F013         	call	_i2c_rb
  3294  001E8E  6E1A               	movwf	rtc_r@tmp,c
  3295                           
  3296                           ;sw_rtc.c: 46: date[9] = tmp & 0x07;
  3297  001E90  501A               	movf	rtc_r@tmp,w,c
  3298  001E92  0B07               	andlw	7
  3299  001E94  0100               	movlb	0	; () banked
  3300  001E96  6FEE               	movwf	(_date+9)& (0+255),b	;volatile
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;sw_rtc.c: 48: tmp= 0x3F & i2c_rb(1);
  3304  001E98  0E01               	movlw	1
  3305  001E9A  EC95  F013         	call	_i2c_rb
  3306  001E9E  0B3F               	andlw	63
  3307  001EA0  6E1A               	movwf	rtc_r@tmp,c
  3308                           
  3309                           ;sw_rtc.c: 49: date[0]=getd(tmp);
  3310  001EA2  501A               	movf	rtc_r@tmp,w,c
  3311  001EA4  ECFF  F016         	call	_getd
  3312  001EA8  0100               	movlb	0	; () banked
  3313  001EAA  6FE5               	movwf	_date& (0+255),b	;volatile
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;sw_rtc.c: 50: date[1]=getu(tmp);
  3317  001EAC  501A               	movf	rtc_r@tmp,w,c
  3318  001EAE  EC0B  F017         	call	_getu
  3319  001EB2  0100               	movlb	0	; () banked
  3320  001EB4  6FE6               	movwf	(_date+1)& (0+255),b	;volatile
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;sw_rtc.c: 53: tmp= 0x1F & i2c_rb(1);
  3324  001EB6  0E01               	movlw	1
  3325  001EB8  EC95  F013         	call	_i2c_rb
  3326  001EBC  0B1F               	andlw	31
  3327  001EBE  6E1A               	movwf	rtc_r@tmp,c
  3328                           
  3329                           ;sw_rtc.c: 54: date[2]='/';
  3330  001EC0  0E2F               	movlw	47
  3331  001EC2  0100               	movlb	0	; () banked
  3332  001EC4  6FE7               	movwf	(_date+2)& (0+255),b	;volatile
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;sw_rtc.c: 55: date[3]=getd(tmp);
  3336  001EC6  501A               	movf	rtc_r@tmp,w,c
  3337  001EC8  ECFF  F016         	call	_getd
  3338  001ECC  0100               	movlb	0	; () banked
  3339  001ECE  6FE8               	movwf	(_date+3)& (0+255),b	;volatile
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;sw_rtc.c: 56: date[4]=getu(tmp);
  3343  001ED0  501A               	movf	rtc_r@tmp,w,c
  3344  001ED2  EC0B  F017         	call	_getu
  3345  001ED6  0100               	movlb	0	; () banked
  3346  001ED8  6FE9               	movwf	(_date+4)& (0+255),b	;volatile
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;sw_rtc.c: 58: tmp= i2c_rb(0);
  3350  001EDA  0E00               	movlw	0
  3351  001EDC  EC95  F013         	call	_i2c_rb
  3352  001EE0  6E1A               	movwf	rtc_r@tmp,c
  3353                           
  3354                           ;sw_rtc.c: 59: date[5]='/';
  3355  001EE2  0E2F               	movlw	47
  3356  001EE4  0100               	movlb	0	; () banked
  3357  001EE6  6FEA               	movwf	(_date+5)& (0+255),b	;volatile
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;sw_rtc.c: 60: date[6]=getd(tmp);
  3361  001EE8  501A               	movf	rtc_r@tmp,w,c
  3362  001EEA  ECFF  F016         	call	_getd
  3363  001EEE  0100               	movlb	0	; () banked
  3364  001EF0  6FEB               	movwf	(_date+6)& (0+255),b	;volatile
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;sw_rtc.c: 61: date[7]=getu(tmp);
  3368  001EF2  501A               	movf	rtc_r@tmp,w,c
  3369  001EF4  EC0B  F017         	call	_getu
  3370  001EF8  0100               	movlb	0	; () banked
  3371  001EFA  6FEC               	movwf	(_date+7)& (0+255),b	;volatile
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;sw_rtc.c: 62: date[8]=0;
  3375  001EFC  0E00               	movlw	0
  3376  001EFE  6FED               	movwf	(_date+8)& (0+255),b	;volatile
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;sw_rtc.c: 64: i2c_stop();
  3380  001F00  ECE7  F016         	call	_i2c_stop	;wreg free
  3381  001F04  0012               	return		;funcret
  3382  001F06                     __end_of_rtc_r:
  3383                           	opt stack 0
  3384                           tblptru	equ	0xFF8
  3385                           tblptrh	equ	0xFF7
  3386                           tblptrl	equ	0xFF6
  3387                           tablat	equ	0xFF5
  3388                           prodh	equ	0xFF4
  3389                           prodl	equ	0xFF3
  3390                           postinc0	equ	0xFEE
  3391                           wreg	equ	0xFE8
  3392                           indf1	equ	0xFE7
  3393                           postdec1	equ	0xFE5
  3394                           fsr1h	equ	0xFE2
  3395                           fsr1l	equ	0xFE1
  3396                           postinc2	equ	0xFDE
  3397                           fsr2h	equ	0xFDA
  3398                           fsr2l	equ	0xFD9
  3399                           status	equ	0xFD8
  3400                           
  3401 ;; *************** function _i2c_rb *****************
  3402 ;; Defined at:
  3403 ;;		line 71 in file "sw_i2c.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;  ack             1    wreg     unsigned char 
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;  ack             1   22[COMRAM] unsigned char 
  3408 ;;  i               1   24[COMRAM] unsigned char 
  3409 ;;  ret             1   23[COMRAM] unsigned char 
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1    wreg      unsigned char 
  3412 ;; Registers used:
  3413 ;;		wreg, status,2, status,0, cstack
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;Total ram usage:        5 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    2
  3426 ;; This function calls:
  3427 ;;		_delay
  3428 ;; This function is called by:
  3429 ;;		_rtc_r
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text7
  3434  00272A                     __ptext7:
  3435                           	opt stack 0
  3436  00272A                     _i2c_rb:
  3437                           	opt stack 26
  3438                           
  3439                           ;incstack = 0
  3440                           ;i2c_rb@ack stored from wreg
  3441  00272A  6E17               	movwf	i2c_rb@ack,c
  3442                           
  3443                           ;sw_i2c.c: 73: char i;
  3444                           ;sw_i2c.c: 74: unsigned char ret=0;
  3445  00272C  0E00               	movlw	0
  3446  00272E  6E18               	movwf	i2c_rb@ret,c
  3447                           
  3448                           ;sw_i2c.c: 76: PORTCbits.RC3=0;
  3449  002730  9682               	bcf	3970,3,c	;volatile
  3450                           
  3451                           ;sw_i2c.c: 77: PORTCbits.RC4=1;
  3452  002732  8882               	bsf	3970,4,c	;volatile
  3453                           
  3454                           ;sw_i2c.c: 78: TRISCbits.TRISC4=1;
  3455  002734  8894               	bsf	3988,4,c	;volatile
  3456                           
  3457                           ;sw_i2c.c: 81: for(i=0;i<8;i++)
  3458  002736  0E00               	movlw	0
  3459  002738  6E19               	movwf	i2c_rb@i,c
  3460  00273A  D018               	goto	l5183
  3461  00273C                     l296:
  3462                           
  3463                           ;sw_i2c.c: 82: {
  3464                           ;sw_i2c.c: 83: PORTCbits.RC3=1;
  3465  00273C  8682               	bsf	3970,3,c	;volatile
  3466                           
  3467                           ;sw_i2c.c: 84: delay();
  3468  00273E  EC10  F017         	call	_delay	;wreg free
  3469                           
  3470                           ;sw_i2c.c: 85: ret|=(PORTCbits.RC4<<(7-i));
  3471  002742  5019               	movf	i2c_rb@i,w,c
  3472  002744  0800               	sublw	0
  3473  002746  6E15               	movwf	??_i2c_rb& (0+255),c
  3474  002748  0E07               	movlw	7
  3475  00274A  2615               	addwf	??_i2c_rb,f,c
  3476  00274C  A882               	btfss	3970,4,c	;volatile
  3477  00274E  D003               	goto	u5450
  3478  002750  6A16               	clrf	(??_i2c_rb+1)& (0+255),c
  3479  002752  2A16               	incf	(??_i2c_rb+1)& (0+255),f,c
  3480  002754  D001               	goto	u5458
  3481  002756                     u5450:
  3482  002756  6A16               	clrf	(??_i2c_rb+1)& (0+255),c
  3483  002758                     u5458:
  3484  002758  2A15               	incf	??_i2c_rb,f,c
  3485  00275A  D002               	goto	u5464
  3486  00275C                     u5465:
  3487  00275C  90D8               	bcf	status,0,c
  3488  00275E  3616               	rlcf	??_i2c_rb+1,f,c
  3489  002760                     u5464:
  3490  002760  2E15               	decfsz	??_i2c_rb,f,c
  3491  002762  D7FC               	goto	u5465
  3492  002764  5016               	movf	??_i2c_rb+1,w,c
  3493  002766  1218               	iorwf	i2c_rb@ret,f,c
  3494                           
  3495                           ;sw_i2c.c: 86: PORTCbits.RC3=0;
  3496  002768  9682               	bcf	3970,3,c	;volatile
  3497  00276A  2A19               	incf	i2c_rb@i,f,c
  3498  00276C                     l5183:
  3499  00276C  0E07               	movlw	7
  3500  00276E  6419               	cpfsgt	i2c_rb@i,c
  3501  002770  D7E5               	goto	l296
  3502                           
  3503                           ;sw_i2c.c: 88: }
  3504                           ;sw_i2c.c: 89: TRISCbits.TRISC4=0;
  3505  002772  9894               	bcf	3988,4,c	;volatile
  3506  002774  0004               	clrwdt		;# 
  3507                           
  3508                           ;sw_i2c.c: 91: if(ack)
  3509  002776  5017               	movf	i2c_rb@ack,w,c
  3510  002778  B4D8               	btfsc	status,2,c
  3511  00277A  D002               	goto	l298
  3512                           
  3513                           ;sw_i2c.c: 92: PORTCbits.RC4=0;
  3514  00277C  9882               	bcf	3970,4,c	;volatile
  3515  00277E  D001               	goto	l299
  3516  002780                     l298:
  3517                           
  3518                           ;sw_i2c.c: 93: else
  3519                           ;sw_i2c.c: 94: PORTCbits.RC4=1;
  3520  002780  8882               	bsf	3970,4,c	;volatile
  3521  002782                     l299:
  3522                           
  3523                           ;sw_i2c.c: 95: delay();
  3524  002782  EC10  F017         	call	_delay	;wreg free
  3525                           
  3526                           ;sw_i2c.c: 96: PORTCbits.RC3=1;
  3527  002786  8682               	bsf	3970,3,c	;volatile
  3528                           
  3529                           ;sw_i2c.c: 97: delay();
  3530  002788  EC10  F017         	call	_delay	;wreg free
  3531                           
  3532                           ;sw_i2c.c: 98: PORTCbits.RC3=0;
  3533  00278C  9682               	bcf	3970,3,c	;volatile
  3534                           
  3535                           ;sw_i2c.c: 100: return ret;
  3536  00278E  5018               	movf	i2c_rb@ret,w,c
  3537  002790  0012               	return	
  3538  002792                     __end_of_i2c_rb:
  3539                           	opt stack 0
  3540                           tblptru	equ	0xFF8
  3541                           tblptrh	equ	0xFF7
  3542                           tblptrl	equ	0xFF6
  3543                           tablat	equ	0xFF5
  3544                           prodh	equ	0xFF4
  3545                           prodl	equ	0xFF3
  3546                           postinc0	equ	0xFEE
  3547                           wreg	equ	0xFE8
  3548                           indf1	equ	0xFE7
  3549                           postdec1	equ	0xFE5
  3550                           fsr1h	equ	0xFE2
  3551                           fsr1l	equ	0xFE1
  3552                           postinc2	equ	0xFDE
  3553                           fsr2h	equ	0xFDA
  3554                           fsr2l	equ	0xFD9
  3555                           status	equ	0xFD8
  3556                           
  3557 ;; *************** function _getu *****************
  3558 ;; Defined at:
  3559 ;;		line 14 in file "sw_rtc.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;  nn              1    wreg     unsigned char 
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  nn              1   20[COMRAM] unsigned char 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  1    wreg      unsigned char 
  3566 ;; Registers used:
  3567 ;;		wreg, status,2, status,0
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;Total ram usage:        1 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:    1
  3580 ;; This function calls:
  3581 ;;		Nothing
  3582 ;; This function is called by:
  3583 ;;		_rtc_r
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text8
  3588  002E16                     __ptext8:
  3589                           	opt stack 0
  3590  002E16                     _getu:
  3591                           	opt stack 27
  3592                           
  3593                           ;incstack = 0
  3594                           ;getu@nn stored from wreg
  3595  002E16  6E15               	movwf	getu@nn,c
  3596                           
  3597                           ;sw_rtc.c: 16: return (nn & 0x0F)+0x30;
  3598  002E18  5015               	movf	getu@nn,w,c
  3599  002E1A  0B0F               	andlw	15
  3600  002E1C  0F30               	addlw	48
  3601  002E1E  0012               	return	
  3602  002E20                     __end_of_getu:
  3603                           	opt stack 0
  3604                           tblptru	equ	0xFF8
  3605                           tblptrh	equ	0xFF7
  3606                           tblptrl	equ	0xFF6
  3607                           tablat	equ	0xFF5
  3608                           prodh	equ	0xFF4
  3609                           prodl	equ	0xFF3
  3610                           postinc0	equ	0xFEE
  3611                           wreg	equ	0xFE8
  3612                           indf1	equ	0xFE7
  3613                           postdec1	equ	0xFE5
  3614                           fsr1h	equ	0xFE2
  3615                           fsr1l	equ	0xFE1
  3616                           postinc2	equ	0xFDE
  3617                           fsr2h	equ	0xFDA
  3618                           fsr2l	equ	0xFD9
  3619                           status	equ	0xFD8
  3620                           
  3621 ;; *************** function _getd *****************
  3622 ;; Defined at:
  3623 ;;		line 9 in file "sw_rtc.c"
  3624 ;; Parameters:    Size  Location     Type
  3625 ;;  nn              1    wreg     unsigned char 
  3626 ;; Auto vars:     Size  Location     Type
  3627 ;;  nn              1   20[COMRAM] unsigned char 
  3628 ;; Return value:  Size  Location     Type
  3629 ;;                  1    wreg      unsigned char 
  3630 ;; Registers used:
  3631 ;;		wreg, status,2, status,0
  3632 ;; Tracked objects:
  3633 ;;		On entry : 0/0
  3634 ;;		On exit  : 0/0
  3635 ;;		Unchanged: 0/0
  3636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3638 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3640 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3641 ;;Total ram usage:        1 bytes
  3642 ;; Hardware stack levels used:    1
  3643 ;; Hardware stack levels required when called:    1
  3644 ;; This function calls:
  3645 ;;		Nothing
  3646 ;; This function is called by:
  3647 ;;		_rtc_r
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text9
  3652  002DFE                     __ptext9:
  3653                           	opt stack 0
  3654  002DFE                     _getd:
  3655                           	opt stack 27
  3656                           
  3657                           ;incstack = 0
  3658                           ;getd@nn stored from wreg
  3659  002DFE  6E15               	movwf	getd@nn,c
  3660                           
  3661                           ;sw_rtc.c: 11: return ((nn & 0xF0)>>4)+0x30;
  3662  002E00  3815               	swapf	getd@nn,w,c
  3663  002E02  0B0F               	andlw	15
  3664  002E04  0B0F               	andlw	15
  3665  002E06  0F30               	addlw	48
  3666  002E08  0012               	return	
  3667  002E0A                     __end_of_getd:
  3668                           	opt stack 0
  3669                           tblptru	equ	0xFF8
  3670                           tblptrh	equ	0xFF7
  3671                           tblptrl	equ	0xFF6
  3672                           tablat	equ	0xFF5
  3673                           prodh	equ	0xFF4
  3674                           prodl	equ	0xFF3
  3675                           postinc0	equ	0xFEE
  3676                           wreg	equ	0xFE8
  3677                           indf1	equ	0xFE7
  3678                           postdec1	equ	0xFE5
  3679                           fsr1h	equ	0xFE2
  3680                           fsr1l	equ	0xFE1
  3681                           postinc2	equ	0xFDE
  3682                           fsr2h	equ	0xFDA
  3683                           fsr2l	equ	0xFD9
  3684                           status	equ	0xFD8
  3685                           
  3686 ;; *************** function _read_adc_voltage *****************
  3687 ;; Defined at:
  3688 ;;		line 48 in file "my_adc.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;  channel         1    wreg     unsigned char 
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  channel         1   76[COMRAM] unsigned char 
  3693 ;;  voltage         3   73[COMRAM] float 
  3694 ;;  raw_value       2   77[COMRAM] int 
  3695 ;; Return value:  Size  Location     Type
  3696 ;;                  3   70[COMRAM] float 
  3697 ;; Registers used:
  3698 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3699 ;; Tracked objects:
  3700 ;;		On entry : 0/0
  3701 ;;		On exit  : 0/0
  3702 ;;		Unchanged: 0/0
  3703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3704 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3705 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3707 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3708 ;;Total ram usage:        9 bytes
  3709 ;; Hardware stack levels used:    1
  3710 ;; Hardware stack levels required when called:    3
  3711 ;; This function calls:
  3712 ;;		___awtoft
  3713 ;;		___ftdiv
  3714 ;;		___wmul
  3715 ;;		_read_adc_raw_no_lib
  3716 ;; This function is called by:
  3717 ;;		_lcdPrint
  3718 ;;		_main
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text10
  3723  002792                     __ptext10:
  3724                           	opt stack 0
  3725  002792                     _read_adc_voltage:
  3726                           	opt stack 27
  3727                           
  3728                           ;incstack = 0
  3729                           ;read_adc_voltage@channel stored from wreg
  3730  002792  6E4D               	movwf	read_adc_voltage@channel,c
  3731                           
  3732                           ;my_adc.c: 49: int raw_value;
  3733                           ;my_adc.c: 50: float voltage;
  3734                           ;my_adc.c: 51: raw_value = read_adc_raw_no_lib(channel);
  3735  002794  504D               	movf	read_adc_voltage@channel,w,c
  3736  002796  ECB3  F015         	call	_read_adc_raw_no_lib
  3737  00279A  C015  F04E         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  3738  00279E  C016  F04F         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  3739                           
  3740                           ;my_adc.c: 52: voltage = (raw_value * 5) / 1023.0;
  3741  0027A2  C04E  F023         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  3742  0027A6  C04F  F024         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  3743  0027AA  0E00               	movlw	0
  3744  0027AC  6E26               	movwf	___wmul@multiplicand+1,c
  3745  0027AE  0E05               	movlw	5
  3746  0027B0  6E25               	movwf	___wmul@multiplicand,c
  3747  0027B2  EC30  F016         	call	___wmul	;wreg free
  3748  0027B6  C023  F029         	movff	?___wmul,___awtoft@c
  3749  0027BA  C024  F02A         	movff	?___wmul+1,___awtoft@c+1
  3750  0027BE  ECD0  F015         	call	___awtoft	;wreg free
  3751  0027C2  C029  F038         	movff	?___awtoft,___ftdiv@f1
  3752  0027C6  C02A  F039         	movff	?___awtoft+1,___ftdiv@f1+1
  3753  0027CA  C02B  F03A         	movff	?___awtoft+2,___ftdiv@f1+2
  3754  0027CE  0EC0               	movlw	192
  3755  0027D0  6E3B               	movwf	___ftdiv@f2,c
  3756  0027D2  0E7F               	movlw	127
  3757  0027D4  6E3C               	movwf	___ftdiv@f2+1,c
  3758  0027D6  0E44               	movlw	68
  3759  0027D8  6E3D               	movwf	___ftdiv@f2+2,c
  3760  0027DA  EC79  F010         	call	___ftdiv	;wreg free
  3761  0027DE  C038  F04A         	movff	?___ftdiv,read_adc_voltage@voltage
  3762  0027E2  C039  F04B         	movff	?___ftdiv+1,read_adc_voltage@voltage+1
  3763  0027E6  C03A  F04C         	movff	?___ftdiv+2,read_adc_voltage@voltage+2
  3764                           
  3765                           ;my_adc.c: 53: return voltage;
  3766  0027EA  C04A  F047         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  3767  0027EE  C04B  F048         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  3768  0027F2  C04C  F049         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  3769  0027F6  0012               	return	
  3770  0027F8                     __end_of_read_adc_voltage:
  3771                           	opt stack 0
  3772                           tblptru	equ	0xFF8
  3773                           tblptrh	equ	0xFF7
  3774                           tblptrl	equ	0xFF6
  3775                           tablat	equ	0xFF5
  3776                           prodh	equ	0xFF4
  3777                           prodl	equ	0xFF3
  3778                           postinc0	equ	0xFEE
  3779                           wreg	equ	0xFE8
  3780                           indf1	equ	0xFE7
  3781                           postdec1	equ	0xFE5
  3782                           fsr1h	equ	0xFE2
  3783                           fsr1l	equ	0xFE1
  3784                           postinc2	equ	0xFDE
  3785                           fsr2h	equ	0xFDA
  3786                           fsr2l	equ	0xFD9
  3787                           status	equ	0xFD8
  3788                           
  3789 ;; *************** function _read_adc_raw_no_lib *****************
  3790 ;; Defined at:
  3791 ;;		line 32 in file "my_adc.c"
  3792 ;; Parameters:    Size  Location     Type
  3793 ;;  channel         1    wreg     unsigned char 
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;  channel         1   24[COMRAM] unsigned char 
  3796 ;;  raw_value       2   25[COMRAM] int 
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  2   20[COMRAM] int 
  3799 ;; Registers used:
  3800 ;;		wreg, status,2, status,0
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3806 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;Total ram usage:        7 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:    1
  3813 ;; This function calls:
  3814 ;;		Nothing
  3815 ;; This function is called by:
  3816 ;;		_main
  3817 ;;		_read_adc_voltage
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           	psect	text11
  3822  002B66                     __ptext11:
  3823                           	opt stack 0
  3824  002B66                     _read_adc_raw_no_lib:
  3825                           	opt stack 28
  3826                           
  3827                           ;incstack = 0
  3828                           ;read_adc_raw_no_lib@channel stored from wreg
  3829  002B66  6E19               	movwf	read_adc_raw_no_lib@channel,c
  3830                           
  3831                           ;my_adc.c: 33: int raw_value;
  3832                           ;my_adc.c: 34: ADCON0bits.CHS = channel;
  3833  002B68  C019  F017         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  3834  002B6C  4617               	rlncf	??_read_adc_raw_no_lib,f,c
  3835  002B6E  4617               	rlncf	??_read_adc_raw_no_lib,f,c
  3836  002B70  50C2               	movf	4034,w,c	;volatile
  3837  002B72  1817               	xorwf	??_read_adc_raw_no_lib,w,c
  3838  002B74  0BC3               	andlw	-61
  3839  002B76  1817               	xorwf	??_read_adc_raw_no_lib,w,c
  3840  002B78  6EC2               	movwf	4034,c	;volatile
  3841                           
  3842                           ;my_adc.c: 37: ADCON0bits.GO = 1;
  3843  002B7A  82C2               	bsf	4034,1,c	;volatile
  3844  002B7C  B2C2               	btfsc	4034,1,c	;volatile
  3845  002B7E  D7FE               	goto	l434
  3846                           
  3847                           ;my_adc.c: 41: raw_value = ADRESH << 8 | ADRESL;
  3848  002B80  50C3               	movf	4035,w,c	;volatile
  3849  002B82  CFC4 F017          	movff	4036,??_read_adc_raw_no_lib	;volatile
  3850  002B86  6A18               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  3851  002B88  C017  F018         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  3852  002B8C  6A17               	clrf	??_read_adc_raw_no_lib,c
  3853  002B8E  1017               	iorwf	??_read_adc_raw_no_lib,w,c
  3854  002B90  6E1A               	movwf	read_adc_raw_no_lib@raw_value,c
  3855  002B92  5018               	movf	??_read_adc_raw_no_lib+1,w,c
  3856  002B94  6E1B               	movwf	read_adc_raw_no_lib@raw_value+1,c
  3857                           
  3858                           ;my_adc.c: 45: return raw_value;
  3859  002B96  C01A  F015         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  3860  002B9A  C01B  F016         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  3861  002B9E  0012               	return	
  3862  002BA0                     __end_of_read_adc_raw_no_lib:
  3863                           	opt stack 0
  3864                           tblptru	equ	0xFF8
  3865                           tblptrh	equ	0xFF7
  3866                           tblptrl	equ	0xFF6
  3867                           tablat	equ	0xFF5
  3868                           prodh	equ	0xFF4
  3869                           prodl	equ	0xFF3
  3870                           postinc0	equ	0xFEE
  3871                           wreg	equ	0xFE8
  3872                           indf1	equ	0xFE7
  3873                           postdec1	equ	0xFE5
  3874                           fsr1h	equ	0xFE2
  3875                           fsr1l	equ	0xFE1
  3876                           postinc2	equ	0xFDE
  3877                           fsr2h	equ	0xFDA
  3878                           fsr2l	equ	0xFD9
  3879                           status	equ	0xFD8
  3880                           
  3881 ;; *************** function ___awtoft *****************
  3882 ;; Defined at:
  3883 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  c               2   40[COMRAM] int 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;  sign            1   43[COMRAM] unsigned char 
  3888 ;; Return value:  Size  Location     Type
  3889 ;;                  3   40[COMRAM] float 
  3890 ;; Registers used:
  3891 ;;		wreg, status,2, status,0, cstack
  3892 ;; Tracked objects:
  3893 ;;		On entry : 0/0
  3894 ;;		On exit  : 0/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3897 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3898 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3900 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;Total ram usage:        4 bytes
  3902 ;; Hardware stack levels used:    1
  3903 ;; Hardware stack levels required when called:    2
  3904 ;; This function calls:
  3905 ;;		___ftpack
  3906 ;; This function is called by:
  3907 ;;		_lcdPrint
  3908 ;;		_main
  3909 ;;		_read_adc_voltage
  3910 ;; This function uses a non-reentrant model
  3911 ;;
  3912                           
  3913                           	psect	text12
  3914  002BA0                     __ptext12:
  3915                           	opt stack 0
  3916  002BA0                     ___awtoft:
  3917                           	opt stack 27
  3918                           
  3919                           ;incstack = 0
  3920  002BA0  0E00               	movlw	0
  3921  002BA2  6E2C               	movwf	___awtoft@sign,c
  3922  002BA4  AE2A               	btfss	___awtoft@c+1,7,c
  3923  002BA6  D006               	goto	l810
  3924  002BA8  6C29               	negf	___awtoft@c,c
  3925  002BAA  1E2A               	comf	___awtoft@c+1,f,c
  3926  002BAC  B0D8               	btfsc	status,0,c
  3927  002BAE  2A2A               	incf	___awtoft@c+1,f,c
  3928  002BB0  0E01               	movlw	1
  3929  002BB2  6E2C               	movwf	___awtoft@sign,c
  3930  002BB4                     l810:
  3931  002BB4  C029  F015         	movff	___awtoft@c,___ftpack@arg
  3932  002BB8  C02A  F016         	movff	___awtoft@c+1,___ftpack@arg+1
  3933  002BBC  6A17               	clrf	___ftpack@arg+2,c
  3934  002BBE  0E8E               	movlw	142
  3935  002BC0  6E18               	movwf	___ftpack@exp,c
  3936  002BC2  C02C  F019         	movff	___awtoft@sign,___ftpack@sign
  3937  002BC6  EC05  F012         	call	___ftpack	;wreg free
  3938  002BCA  C015  F029         	movff	?___ftpack,?___awtoft
  3939  002BCE  C016  F02A         	movff	?___ftpack+1,?___awtoft+1
  3940  002BD2  C017  F02B         	movff	?___ftpack+2,?___awtoft+2
  3941  002BD6  0012               	return	
  3942  002BD8                     __end_of___awtoft:
  3943                           	opt stack 0
  3944                           tblptru	equ	0xFF8
  3945                           tblptrh	equ	0xFF7
  3946                           tblptrl	equ	0xFF6
  3947                           tablat	equ	0xFF5
  3948                           prodh	equ	0xFF4
  3949                           prodl	equ	0xFF3
  3950                           postinc0	equ	0xFEE
  3951                           wreg	equ	0xFE8
  3952                           indf1	equ	0xFE7
  3953                           postdec1	equ	0xFE5
  3954                           fsr1h	equ	0xFE2
  3955                           fsr1l	equ	0xFE1
  3956                           postinc2	equ	0xFDE
  3957                           fsr2h	equ	0xFDA
  3958                           fsr2l	equ	0xFD9
  3959                           status	equ	0xFD8
  3960                           
  3961 ;; *************** function _lcd_puts *****************
  3962 ;; Defined at:
  3963 ;;		line 113 in file "lcd_x8.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  s               2   34[COMRAM] PTR unsigned char 
  3966 ;;		 -> lcdPrint@Buffer(32), time(10), date(10), 
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;		None
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  1    wreg      void 
  3971 ;; Registers used:
  3972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3978 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;Total ram usage:        2 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:    6
  3985 ;; This function calls:
  3986 ;;		_lcd_putc
  3987 ;; This function is called by:
  3988 ;;		_lcdPrint
  3989 ;; This function uses a non-reentrant model
  3990 ;;
  3991                           
  3992                           	psect	text13
  3993  002CAC                     __ptext13:
  3994                           	opt stack 0
  3995  002CAC                     _lcd_puts:
  3996                           	opt stack 23
  3997                           
  3998                           ;lcd_x8.c: 114: while (*s) {
  3999                           
  4000                           ;incstack = 0
  4001  002CAC  D009               	goto	l376
  4002  002CAE                     
  4003                           ;lcd_x8.c: 115: lcd_putc(*s);
  4004  002CAE  C023  FFD9         	movff	lcd_puts@s,fsr2l
  4005  002CB2  C024  FFDA         	movff	lcd_puts@s+1,fsr2h
  4006  002CB6  50DF               	movf	indf2,w,c
  4007  002CB8  ECB9  F014         	call	_lcd_putc
  4008                           
  4009                           ;lcd_x8.c: 116: s++;
  4010  002CBC  4A23               	infsnz	lcd_puts@s,f,c
  4011  002CBE  2A24               	incf	lcd_puts@s+1,f,c
  4012  002CC0                     l376:
  4013  002CC0  C023  FFD9         	movff	lcd_puts@s,fsr2l
  4014  002CC4  C024  FFDA         	movff	lcd_puts@s+1,fsr2h
  4015  002CC8  50DF               	movf	indf2,w,c
  4016  002CCA  B4D8               	btfsc	status,2,c
  4017  002CCC  0012               	return	
  4018  002CCE  D7EF               	goto	l377
  4019  002CD0                     __end_of_lcd_puts:
  4020                           	opt stack 0
  4021                           tblptru	equ	0xFF8
  4022                           tblptrh	equ	0xFF7
  4023                           tblptrl	equ	0xFF6
  4024                           tablat	equ	0xFF5
  4025                           prodh	equ	0xFF4
  4026                           prodl	equ	0xFF3
  4027                           postinc0	equ	0xFEE
  4028                           wreg	equ	0xFE8
  4029                           indf1	equ	0xFE7
  4030                           postdec1	equ	0xFE5
  4031                           fsr1h	equ	0xFE2
  4032                           fsr1l	equ	0xFE1
  4033                           indf2	equ	0xFDF
  4034                           postinc2	equ	0xFDE
  4035                           fsr2h	equ	0xFDA
  4036                           fsr2l	equ	0xFD9
  4037                           status	equ	0xFD8
  4038                           
  4039 ;; *************** function _is_byte_available *****************
  4040 ;; Defined at:
  4041 ;;		line 21 in file "my_ser.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;		None
  4044 ;; Auto vars:     Size  Location     Type
  4045 ;;		None
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  1    wreg      unsigned char 
  4048 ;; Registers used:
  4049 ;;		wreg
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4059 ;;Total ram usage:        0 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    1
  4062 ;; This function calls:
  4063 ;;		Nothing
  4064 ;; This function is called by:
  4065 ;;		_main
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           	psect	text14
  4070  002D96                     __ptext14:
  4071                           	opt stack 0
  4072  002D96                     _is_byte_available:
  4073                           	opt stack 29
  4074                           
  4075                           ;my_ser.c: 23: if (RCSTAbits.FERR || RCSTAbits.OERR)
  4076                           
  4077                           ;incstack = 0
  4078  002D96  B4AB               	btfsc	4011,2,c	;volatile
  4079  002D98  D002               	goto	u4420
  4080  002D9A  A2AB               	btfss	4011,1,c	;volatile
  4081  002D9C  D002               	goto	l465
  4082  002D9E                     u4420:
  4083                           
  4084                           ;my_ser.c: 24: {
  4085                           ;my_ser.c: 25: RCSTAbits.CREN = 0;
  4086  002D9E  98AB               	bcf	4011,4,c	;volatile
  4087                           
  4088                           ;my_ser.c: 26: RCSTAbits.CREN = 1;
  4089  002DA0  88AB               	bsf	4011,4,c	;volatile
  4090  002DA2                     l465:
  4091                           
  4092                           ;my_ser.c: 27: }
  4093                           ;my_ser.c: 29: if (PIR1bits.RCIF) return 1;
  4094  002DA2  AA9E               	btfss	3998,5,c	;volatile
  4095  002DA4  D002               	goto	l468
  4096  002DA6  0E01               	movlw	1
  4097  002DA8  0012               	return	
  4098  002DAA                     l468:
  4099                           
  4100                           ;my_ser.c: 30: else return 0;
  4101  002DAA  0E00               	movlw	0
  4102  002DAC  0012               	return	
  4103  002DAE                     __end_of_is_byte_available:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           prodh	equ	0xFF4
  4110                           prodl	equ	0xFF3
  4111                           postinc0	equ	0xFEE
  4112                           wreg	equ	0xFE8
  4113                           indf1	equ	0xFE7
  4114                           postdec1	equ	0xFE5
  4115                           fsr1h	equ	0xFE2
  4116                           fsr1l	equ	0xFE1
  4117                           indf2	equ	0xFDF
  4118                           postinc2	equ	0xFDE
  4119                           fsr2h	equ	0xFDA
  4120                           fsr2l	equ	0xFD9
  4121                           status	equ	0xFD8
  4122                           
  4123 ;; *************** function _initTimers01 *****************
  4124 ;; Defined at:
  4125 ;;		line 104 in file "project.c"
  4126 ;; Parameters:    Size  Location     Type
  4127 ;;		None
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;		None
  4130 ;; Return value:  Size  Location     Type
  4131 ;;                  1    wreg      void 
  4132 ;; Registers used:
  4133 ;;		wreg, status,2
  4134 ;; Tracked objects:
  4135 ;;		On entry : 0/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4143 ;;Total ram usage:        0 bytes
  4144 ;; Hardware stack levels used:    1
  4145 ;; Hardware stack levels required when called:    1
  4146 ;; This function calls:
  4147 ;;		Nothing
  4148 ;; This function is called by:
  4149 ;;		_main
  4150 ;; This function uses a non-reentrant model
  4151 ;;
  4152                           
  4153                           	psect	text15
  4154  002C34                     __ptext15:
  4155                           	opt stack 0
  4156  002C34                     _initTimers01:
  4157                           	opt stack 29
  4158                           
  4159                           ;project.c: 105: T0CON = 0;
  4160                           
  4161                           ;incstack = 0
  4162  002C34  0E00               	movlw	0
  4163  002C36  6ED5               	movwf	4053,c	;volatile
  4164                           
  4165                           ;project.c: 109: INTCONbits.T0IF = 0;
  4166  002C38  94F2               	bcf	intcon,2,c	;volatile
  4167                           
  4168                           ;project.c: 110: T0CONbits.T0PS0 = 1;
  4169  002C3A  80D5               	bsf	4053,0,c	;volatile
  4170                           
  4171                           ;project.c: 111: T0CONbits.T0PS1 = 0;
  4172  002C3C  92D5               	bcf	4053,1,c	;volatile
  4173                           
  4174                           ;project.c: 112: T0CONbits.T0PS2 = 1;
  4175  002C3E  84D5               	bsf	4053,2,c	;volatile
  4176                           
  4177                           ;project.c: 113: TMR0H = (unsigned char) ((3036 >> 8) & 0x00FF);
  4178  002C40  0E0B               	movlw	11
  4179  002C42  6ED7               	movwf	4055,c	;volatile
  4180                           
  4181                           ;project.c: 114: TMR0L = (unsigned char) (3036 & 0x00FF);
  4182  002C44  0EDC               	movlw	220
  4183  002C46  6ED6               	movwf	4054,c	;volatile
  4184                           
  4185                           ;project.c: 116: T1CONbits.TMR1CS = 1;
  4186  002C48  82CD               	bsf	4045,1,c	;volatile
  4187                           
  4188                           ;project.c: 117: T1CONbits.T1CKPS1 = 0;
  4189  002C4A  9ACD               	bcf	4045,5,c	;volatile
  4190                           
  4191                           ;project.c: 118: T1CONbits.T1CKPS0 = 0;
  4192  002C4C  98CD               	bcf	4045,4,c	;volatile
  4193                           
  4194                           ;project.c: 121: TMR1H = 0;
  4195  002C4E  0E00               	movlw	0
  4196  002C50  6ECF               	movwf	4047,c	;volatile
  4197                           
  4198                           ;project.c: 122: TMR1L = 0;
  4199  002C52  0E00               	movlw	0
  4200  002C54  6ECE               	movwf	4046,c	;volatile
  4201                           
  4202                           ;project.c: 123: INTCONbits.GIE = 1;
  4203  002C56  8EF2               	bsf	intcon,7,c	;volatile
  4204                           
  4205                           ;project.c: 124: INTCONbits.T0IE = 1;
  4206  002C58  8AF2               	bsf	intcon,5,c	;volatile
  4207                           
  4208                           ;project.c: 125: T1CONbits.TMR1ON = 1;
  4209  002C5A  80CD               	bsf	4045,0,c	;volatile
  4210                           
  4211                           ;project.c: 126: T0CONbits.TMR0ON = 1;
  4212  002C5C  8ED5               	bsf	4053,7,c	;volatile
  4213  002C5E  0012               	return		;funcret
  4214  002C60                     __end_of_initTimers01:
  4215                           	opt stack 0
  4216                           tblptru	equ	0xFF8
  4217                           tblptrh	equ	0xFF7
  4218                           tblptrl	equ	0xFF6
  4219                           tablat	equ	0xFF5
  4220                           prodh	equ	0xFF4
  4221                           prodl	equ	0xFF3
  4222                           intcon	equ	0xFF2
  4223                           postinc0	equ	0xFEE
  4224                           wreg	equ	0xFE8
  4225                           indf1	equ	0xFE7
  4226                           postdec1	equ	0xFE5
  4227                           fsr1h	equ	0xFE2
  4228                           fsr1l	equ	0xFE1
  4229                           indf2	equ	0xFDF
  4230                           postinc2	equ	0xFDE
  4231                           fsr2h	equ	0xFDA
  4232                           fsr2l	equ	0xFD9
  4233                           status	equ	0xFD8
  4234                           
  4235 ;; *************** function _executeWriteCommand *****************
  4236 ;; Defined at:
  4237 ;;		line 215 in file "project.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;  commandType     1    wreg     unsigned char 
  4240 ;;  value           1   86[COMRAM] unsigned char 
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;  commandType     1   86[BANK0 ] unsigned char 
  4243 ;;  Buffer         32   54[BANK0 ] unsigned char [32]
  4244 ;; Return value:  Size  Location     Type
  4245 ;;                  1    wreg      void 
  4246 ;; Registers used:
  4247 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4248 ;; Tracked objects:
  4249 ;;		On entry : 0/0
  4250 ;;		On exit  : 0/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4253 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4254 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4256 ;;      Totals:         1      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4257 ;;Total ram usage:       34 bytes
  4258 ;; Hardware stack levels used:    1
  4259 ;; Hardware stack levels required when called:    6
  4260 ;; This function calls:
  4261 ;;		_delay_ms
  4262 ;;		_lcd_putc
  4263 ;;		_sprintf
  4264 ;; This function is called by:
  4265 ;;		_main
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           	psect	text16
  4270  0021D8                     __ptext16:
  4271                           	opt stack 0
  4272  0021D8                     _executeWriteCommand:
  4273                           	opt stack 24
  4274                           
  4275                           ;incstack = 0
  4276                           ;executeWriteCommand@commandType stored from wreg
  4277  0021D8  0100               	movlb	0	; () banked
  4278  0021DA  6FD6               	movwf	executeWriteCommand@commandType& (0+255),b
  4279                           
  4280                           ;project.c: 216: switch (commandType) {
  4281  0021DC  D04B               	goto	l151
  4282  0021DE                     
  4283                           ;project.c: 219: if (value <= 59) {
  4284  0021DE  0E3C               	movlw	60
  4285  0021E0  6057               	cpfslt	executeWriteCommand@value,c
  4286  0021E2  0012               	return	
  4287                           
  4288                           ;project.c: 220: seconds = value;
  4289  0021E4  C057  F066         	movff	executeWriteCommand@value,_seconds
  4290                           
  4291                           ;project.c: 221: }
  4292                           ;project.c: 222: break;
  4293  0021E8  0012               	return	
  4294  0021EA                     
  4295                           ;project.c: 225: if (value <= 59) {
  4296  0021EA  0E3C               	movlw	60
  4297  0021EC  6057               	cpfslt	executeWriteCommand@value,c
  4298  0021EE  0012               	return	
  4299                           
  4300                           ;project.c: 226: minutes = value;
  4301  0021F0  C057  F065         	movff	executeWriteCommand@value,_minutes
  4302                           
  4303                           ;project.c: 227: }
  4304                           ;project.c: 228: break;
  4305  0021F4  0012               	return	
  4306  0021F6                     
  4307                           ;project.c: 231: if (value <= 23) {
  4308  0021F6  0E18               	movlw	24
  4309  0021F8  6057               	cpfslt	executeWriteCommand@value,c
  4310  0021FA  0012               	return	
  4311                           
  4312                           ;project.c: 232: hours = value;
  4313  0021FC  C057  F064         	movff	executeWriteCommand@value,_hours
  4314                           
  4315                           ;project.c: 233: }
  4316                           ;project.c: 234: break;
  4317  002200  0012               	return	
  4318  002202                     
  4319                           ;project.c: 237: if (value >= 1 && value <= 7) {
  4320  002202  5057               	movf	executeWriteCommand@value,w,c
  4321  002204  B4D8               	btfsc	status,2,c
  4322  002206  0012               	return	
  4323  002208  0E08               	movlw	8
  4324  00220A  6057               	cpfslt	executeWriteCommand@value,c
  4325  00220C  0012               	return	
  4326                           
  4327                           ;project.c: 238: weekday = value;
  4328  00220E  C057  F063         	movff	executeWriteCommand@value,_weekday
  4329                           
  4330                           ;project.c: 239: }
  4331                           ;project.c: 240: break;
  4332  002212  0012               	return	
  4333  002214                     
  4334                           ;project.c: 243: if (value >= 1 && value <= 31) {
  4335  002214  5057               	movf	executeWriteCommand@value,w,c
  4336  002216  B4D8               	btfsc	status,2,c
  4337  002218  0012               	return	
  4338  00221A  0E20               	movlw	32
  4339  00221C  6057               	cpfslt	executeWriteCommand@value,c
  4340  00221E  0012               	return	
  4341                           
  4342                           ;project.c: 244: dayOfMonth = value;
  4343  002220  C057  F062         	movff	executeWriteCommand@value,_dayOfMonth
  4344                           
  4345                           ;project.c: 245: }
  4346                           ;project.c: 246: break;
  4347  002224  0012               	return	
  4348  002226                     
  4349                           ;project.c: 249: if (value >= 1 && value <= 12) {
  4350  002226  5057               	movf	executeWriteCommand@value,w,c
  4351  002228  B4D8               	btfsc	status,2,c
  4352  00222A  0012               	return	
  4353  00222C  0E0D               	movlw	13
  4354  00222E  6057               	cpfslt	executeWriteCommand@value,c
  4355  002230  0012               	return	
  4356                           
  4357                           ;project.c: 250: month = value;
  4358  002232  C057  F061         	movff	executeWriteCommand@value,_month
  4359                           
  4360                           ;project.c: 252: }
  4361                           ;project.c: 253: break;
  4362  002236  0012               	return	
  4363  002238                     
  4364                           ;project.c: 256: if (value <= 99) {
  4365  002238  0E64               	movlw	100
  4366  00223A  6057               	cpfslt	executeWriteCommand@value,c
  4367  00223C  0012               	return	
  4368                           
  4369                           ;project.c: 257: year = value;
  4370  00223E  C057  F060         	movff	executeWriteCommand@value,_year
  4371                           
  4372                           ;project.c: 258: }
  4373                           ;project.c: 259: break;
  4374  002242  0012               	return	
  4375  002244                     
  4376                           ;project.c: 261: lcd_putc('\f');
  4377  002244  0E0C               	movlw	12
  4378  002246  ECB9  F014         	call	_lcd_putc
  4379                           
  4380                           ;project.c: 262: char Buffer[32];
  4381                           ;project.c: 263: sprintf(Buffer,"INVALID COMMAND\n");
  4382  00224A  0EB6               	movlw	low executeWriteCommand@Buffer
  4383  00224C  0100               	movlb	0	; () banked
  4384  00224E  6F86               	movwf	sprintf@sp& (0+255),b
  4385  002250  0E00               	movlw	high executeWriteCommand@Buffer
  4386  002252  6F87               	movwf	(sprintf@sp+1)& (0+255),b
  4387  002254  0E97               	movlw	low STR_12
  4388  002256  6F88               	movwf	sprintf@f& (0+255),b
  4389  002258  0EFF               	movlw	high STR_12
  4390  00225A  6F89               	movwf	(sprintf@f+1)& (0+255),b
  4391  00225C  EC09  F000         	call	_sprintf	;wreg free
  4392                           
  4393                           ;project.c: 264: lcd_putc(Buffer);
  4394  002260  0EB6               	movlw	executeWriteCommand@Buffer& (0+255)
  4395  002262  ECB9  F014         	call	_lcd_putc
  4396                           
  4397                           ;project.c: 265: delay_ms(1000);
  4398  002266  0E03               	movlw	3
  4399  002268  6E16               	movwf	delay_ms@n+1,c
  4400  00226A  0EE8               	movlw	232
  4401  00226C  6E15               	movwf	delay_ms@n,c
  4402  00226E  EC43  F016         	call	_delay_ms	;wreg free
  4403                           
  4404                           ;project.c: 267: }
  4405                           
  4406                           ;project.c: 266: break;
  4407  002272  0012               	return	
  4408  002274                     l151:
  4409  002274  0100               	movlb	0	; () banked
  4410  002276  51D6               	movf	executeWriteCommand@commandType& (0+255),w,b
  4411                           
  4412                           ; Switch size 1, requested type "space"
  4413                           ; Number of cases is 7, Range of values is 77 to 121
  4414                           ; switch strategies available:
  4415                           ; Name         Instructions Cycles
  4416                           ; simple_byte           22    12 (average)
  4417                           ;	Chosen strategy is simple_byte
  4418  002278  0A4D               	xorlw	77	; case 77
  4419  00227A  B4D8               	btfsc	status,2,c
  4420  00227C  D7D4               	goto	l163
  4421  00227E  0A29               	xorlw	41	; case 100
  4422  002280  B4D8               	btfsc	status,2,c
  4423  002282  D7C8               	goto	l161
  4424  002284  0A0C               	xorlw	12	; case 104
  4425  002286  B4D8               	btfsc	status,2,c
  4426  002288  D7B6               	goto	l157
  4427  00228A  0A05               	xorlw	5	; case 109
  4428  00228C  B4D8               	btfsc	status,2,c
  4429  00228E  D7AD               	goto	l155
  4430  002290  0A1E               	xorlw	30	; case 115
  4431  002292  B4D8               	btfsc	status,2,c
  4432  002294  D7A4               	goto	l152
  4433  002296  0A04               	xorlw	4	; case 119
  4434  002298  B4D8               	btfsc	status,2,c
  4435  00229A  D7B3               	goto	l159
  4436  00229C  0A0E               	xorlw	14	; case 121
  4437  00229E  B4D8               	btfsc	status,2,c
  4438  0022A0  D7CB               	goto	l165
  4439  0022A2  D7D0               	goto	l167
  4440  0022A4                     __end_of_executeWriteCommand:
  4441                           	opt stack 0
  4442                           tblptru	equ	0xFF8
  4443                           tblptrh	equ	0xFF7
  4444                           tblptrl	equ	0xFF6
  4445                           tablat	equ	0xFF5
  4446                           prodh	equ	0xFF4
  4447                           prodl	equ	0xFF3
  4448                           intcon	equ	0xFF2
  4449                           postinc0	equ	0xFEE
  4450                           wreg	equ	0xFE8
  4451                           indf1	equ	0xFE7
  4452                           postdec1	equ	0xFE5
  4453                           fsr1h	equ	0xFE2
  4454                           fsr1l	equ	0xFE1
  4455                           indf2	equ	0xFDF
  4456                           postinc2	equ	0xFDE
  4457                           fsr2h	equ	0xFDA
  4458                           fsr2l	equ	0xFD9
  4459                           status	equ	0xFD8
  4460                           
  4461 ;; *************** function _sprintf *****************
  4462 ;; Defined at:
  4463 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;  sp              2    6[BANK0 ] PTR unsigned char 
  4466 ;;		 -> main@Buffer(128), executeWriteCommand@Buffer(32), lcdPrint@Buffer(32), 
  4467 ;;  f               2    8[BANK0 ] PTR const unsigned char 
  4468 ;;		 -> STR_25(17), STR_21(13), STR_18(54), STR_12(17), 
  4469 ;;		 -> STR_11(12), STR_10(8), STR_9(20), time(10), 
  4470 ;;		 -> date(10), 
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;  val             4   40[BANK0 ] unsigned long 
  4473 ;;  tmpval          4   36[BANK0 ] struct .
  4474 ;;  fval            3   48[BANK0 ] struct .
  4475 ;;  prec            2   51[BANK0 ] int 
  4476 ;;  width           2   46[BANK0 ] int 
  4477 ;;  exp             2   44[BANK0 ] int 
  4478 ;;  flag            2   34[BANK0 ] unsigned short 
  4479 ;;  len             2   32[BANK0 ] unsigned int 
  4480 ;;  ap              2   30[BANK0 ] PTR void [1]
  4481 ;;		 -> ?_sprintf(2), 
  4482 ;;  cp              2   28[BANK0 ] PTR const unsigned char 
  4483 ;;		 -> sprintf@c(1), 
  4484 ;;  c               1   53[BANK0 ] char 
  4485 ;;  d               1    0        unsigned char 
  4486 ;; Return value:  Size  Location     Type
  4487 ;;                  2    6[BANK0 ] int 
  4488 ;; Registers used:
  4489 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 0/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4495 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;      Totals:         0      48       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;Total ram usage:       48 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:    4
  4502 ;; This function calls:
  4503 ;;		___awdiv
  4504 ;;		___ftadd
  4505 ;;		___ftge
  4506 ;;		___ftmul
  4507 ;;		___ftneg
  4508 ;;		___ftsub
  4509 ;;		___fttol
  4510 ;;		___lldiv
  4511 ;;		___llmod
  4512 ;;		___lltoft
  4513 ;;		___wmul
  4514 ;;		__div_to_l_
  4515 ;;		__tdiv_to_l_
  4516 ;;		_fround
  4517 ;;		_isdigit
  4518 ;;		_scale
  4519 ;; This function is called by:
  4520 ;;		_lcdPrint
  4521 ;;		_executeWriteCommand
  4522 ;;		_main
  4523 ;; This function uses a non-reentrant model
  4524 ;;
  4525                           
  4526                           	psect	text17
  4527  000012                     __ptext17:
  4528                           	opt stack 0
  4529  000012                     _sprintf:
  4530                           	opt stack 26
  4531                           
  4532                           ;doprnt.c: 494: va_list ap;
  4533                           ;doprnt.c: 499: signed char c;
  4534                           ;doprnt.c: 501: int width;
  4535                           ;doprnt.c: 504: int prec;
  4536                           ;doprnt.c: 508: unsigned short flag;
  4537                           ;doprnt.c: 515: char d;
  4538                           ;doprnt.c: 516: double fval;
  4539                           ;doprnt.c: 517: int exp;
  4540                           ;doprnt.c: 523: union {
  4541                           ;doprnt.c: 524: unsigned long vd;
  4542                           ;doprnt.c: 525: double integ;
  4543                           ;doprnt.c: 526: } tmpval;
  4544                           ;doprnt.c: 528: unsigned long val;
  4545                           ;doprnt.c: 529: unsigned len;
  4546                           ;doprnt.c: 530: const char * cp;
  4547                           ;doprnt.c: 533: *ap = __va_start();
  4548                           
  4549                           ;incstack = 0
  4550  000012  0E8A               	movlw	low (?_sprintf+4)
  4551  000014  0100               	movlb	0	; () banked
  4552  000016  6F9E               	movwf	sprintf@ap& (0+255),b
  4553  000018  0E00               	movlw	high (?_sprintf+4)
  4554  00001A  6F9F               	movwf	(sprintf@ap+1)& (0+255),b
  4555                           
  4556                           ;doprnt.c: 536: while(c = *f++) {
  4557  00001C  EF76  F005         	goto	u6610
  4558  000020                     
  4559                           ; BSR set to: 0
  4560                           ;doprnt.c: 538: if(c != '%')
  4561                           
  4562                           ; BSR set to: 0
  4563  000020  0E25               	movlw	37
  4564  000022  19B5               	xorwf	sprintf@c& (0+255),w,b
  4565  000024  B4D8               	btfsc	status,2,c
  4566  000026  D00A               	goto	l522
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;doprnt.c: 540: {
  4570                           ;doprnt.c: 541: ((*sp++ = (c)));
  4571  000028  C086  FFD9         	movff	sprintf@sp,fsr2l
  4572  00002C  C087  FFDA         	movff	sprintf@sp+1,fsr2h
  4573  000030  C0B5  FFDF         	movff	sprintf@c,indf2
  4574                           
  4575                           ; BSR set to: 0
  4576  000034  4B86               	infsnz	sprintf@sp& (0+255),f,b
  4577  000036  2B87               	incf	(sprintf@sp+1)& (0+255),f,b
  4578                           
  4579                           ;doprnt.c: 542: continue;
  4580  000038  EF76  F005         	goto	u6610
  4581  00003C                     l522:
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;doprnt.c: 543: }
  4585                           ;doprnt.c: 546: width = 0;
  4586                           
  4587                           ; BSR set to: 0
  4588  00003C  0E00               	movlw	0
  4589  00003E  6FAF               	movwf	(sprintf@width+1)& (0+255),b
  4590  000040  0E00               	movlw	0
  4591  000042  6FAE               	movwf	sprintf@width& (0+255),b
  4592                           
  4593                           ;doprnt.c: 548: flag = 0;
  4594  000044  0E00               	movlw	0
  4595  000046  6FA3               	movwf	(sprintf@flag+1)& (0+255),b
  4596  000048  0E00               	movlw	0
  4597  00004A  6FA2               	movwf	sprintf@flag& (0+255),b
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4601  00004C  C088  FFF6         	movff	sprintf@f,tblptrl
  4602  000050  C089  FFF7         	movff	sprintf@f+1,tblptrh
  4603  000054  0E00               	movlw	low (__mediumconst shr (0+16))
  4604  000056  6EF8               	movwf	tblptru,c
  4605  000058  0E0F               	movlw	(high __ramtop+-1)
  4606  00005A  64F7               	cpfsgt	tblptrh,c
  4607  00005C  D003               	bra	u6027
  4608  00005E  0008               	tblrd		*
  4609  000060  50F5               	movf	tablat,w,c
  4610  000062  D005               	bra	u6020
  4611  000064                     u6027:
  4612  000064  CFF6 FFE1          	movff	tblptrl,fsr1l
  4613  000068  CFF7 FFE2          	movff	tblptrh,fsr1h
  4614  00006C  50E7               	movf	indf1,w,c
  4615  00006E                     u6020:
  4616  00006E  ECAF  F016         	call	_isdigit
  4617  000072  A0D8               	btfss	status,0,c
  4618  000074  D04B               	goto	u6060
  4619                           
  4620                           ;doprnt.c: 598: width = 0;
  4621  000076  0E00               	movlw	0
  4622  000078  0100               	movlb	0	; () banked
  4623  00007A  6FAF               	movwf	(sprintf@width+1)& (0+255),b
  4624  00007C  0E00               	movlw	0
  4625  00007E  6FAE               	movwf	sprintf@width& (0+255),b
  4626  000080                     
  4627                           ;doprnt.c: 600: width *= 10;
  4628                           
  4629                           ; BSR set to: 0
  4630  000080  C0AE  F023         	movff	sprintf@width,___wmul@multiplier
  4631  000084  C0AF  F024         	movff	sprintf@width+1,___wmul@multiplier+1
  4632  000088  0E00               	movlw	0
  4633  00008A  6E26               	movwf	___wmul@multiplicand+1,c
  4634  00008C  0E0A               	movlw	10
  4635  00008E  6E25               	movwf	___wmul@multiplicand,c
  4636  000090  EC30  F016         	call	___wmul	;wreg free
  4637  000094  C023  F0AE         	movff	?___wmul,sprintf@width
  4638  000098  C024  F0AF         	movff	?___wmul+1,sprintf@width+1
  4639                           
  4640                           ;doprnt.c: 601: width += *f++ - '0';
  4641  00009C  0ED0               	movlw	208
  4642  00009E  0100               	movlb	0	; () banked
  4643  0000A0  6F93               	movwf	??_sprintf& (0+255),b
  4644  0000A2  0EFF               	movlw	255
  4645  0000A4  6F94               	movwf	(??_sprintf+1)& (0+255),b
  4646  0000A6  C088  FFF6         	movff	sprintf@f,tblptrl
  4647  0000AA  C089  FFF7         	movff	sprintf@f+1,tblptrh
  4648  0000AE  0E00               	movlw	low (__mediumconst shr (0+16))
  4649  0000B0  6EF8               	movwf	tblptru,c
  4650  0000B2  0E0F               	movlw	(high __ramtop+-1)
  4651  0000B4  64F7               	cpfsgt	tblptrh,c
  4652  0000B6  D003               	bra	u6047
  4653  0000B8  0008               	tblrd		*
  4654  0000BA  50F5               	movf	tablat,w,c
  4655  0000BC  D005               	bra	u6040
  4656  0000BE                     u6047:
  4657  0000BE  CFF6 FFE1          	movff	tblptrl,fsr1l
  4658  0000C2  CFF7 FFE2          	movff	tblptrh,fsr1h
  4659  0000C6  50E7               	movf	indf1,w,c
  4660  0000C8                     u6040:
  4661  0000C8  0100               	movlb	0	; () banked
  4662  0000CA  6F95               	movwf	(??_sprintf+2)& (0+255),b
  4663  0000CC  6B96               	clrf	(??_sprintf+3)& (0+255),b
  4664  0000CE  5193               	movf	??_sprintf& (0+255),w,b
  4665  0000D0  2795               	addwf	(??_sprintf+2)& (0+255),f,b
  4666  0000D2  5194               	movf	(??_sprintf+1)& (0+255),w,b
  4667  0000D4  2396               	addwfc	(??_sprintf+3)& (0+255),f,b
  4668  0000D6  5195               	movf	(??_sprintf+2)& (0+255),w,b
  4669  0000D8  27AE               	addwf	sprintf@width& (0+255),f,b
  4670  0000DA  5196               	movf	(??_sprintf+3)& (0+255),w,b
  4671  0000DC  23AF               	addwfc	(sprintf@width+1)& (0+255),f,b
  4672                           
  4673                           ; BSR set to: 0
  4674  0000DE  4B88               	infsnz	sprintf@f& (0+255),f,b
  4675  0000E0  2B89               	incf	(sprintf@f+1)& (0+255),f,b
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4679  0000E2  C088  FFF6         	movff	sprintf@f,tblptrl
  4680  0000E6  C089  FFF7         	movff	sprintf@f+1,tblptrh
  4681  0000EA  0E00               	movlw	low (__mediumconst shr (0+16))
  4682  0000EC  6EF8               	movwf	tblptru,c
  4683  0000EE  0E0F               	movlw	(high __ramtop+-1)
  4684  0000F0  64F7               	cpfsgt	tblptrh,c
  4685  0000F2  D003               	bra	u6057
  4686  0000F4  0008               	tblrd		*
  4687  0000F6  50F5               	movf	tablat,w,c
  4688  0000F8  D005               	bra	u6050
  4689  0000FA                     u6057:
  4690  0000FA  CFF6 FFE1          	movff	tblptrl,fsr1l
  4691  0000FE  CFF7 FFE2          	movff	tblptrh,fsr1h
  4692  000102  50E7               	movf	indf1,w,c
  4693  000104                     u6050:
  4694  000104  ECAF  F016         	call	_isdigit
  4695  000108  B0D8               	btfsc	status,0,c
  4696  00010A  D7BA               	goto	l524
  4697  00010C                     u6060:
  4698                           
  4699                           ;doprnt.c: 608: }
  4700                           ;doprnt.c: 611: if(*f == '.') {
  4701  00010C  C088  FFF6         	movff	sprintf@f,tblptrl
  4702  000110  C089  FFF7         	movff	sprintf@f+1,tblptrh
  4703  000114  0E00               	movlw	low (__mediumconst shr (0+16))
  4704  000116  6EF8               	movwf	tblptru,c
  4705  000118  0E0F               	movlw	(high __ramtop+-1)
  4706  00011A  64F7               	cpfsgt	tblptrh,c
  4707  00011C  D003               	bra	u6077
  4708  00011E  0008               	tblrd		*
  4709  000120  50F5               	movf	tablat,w,c
  4710  000122  D005               	bra	u6070
  4711  000124                     u6077:
  4712  000124  CFF6 FFE1          	movff	tblptrl,fsr1l
  4713  000128  CFF7 FFE2          	movff	tblptrh,fsr1h
  4714  00012C  50E7               	movf	indf1,w,c
  4715  00012E                     u6070:
  4716  00012E  0A2E               	xorlw	46
  4717  000130  A4D8               	btfss	status,2,c
  4718  000132  D048               	goto	l526
  4719                           
  4720                           ;doprnt.c: 612: flag |= 0x4000;
  4721  000134  0100               	movlb	0	; () banked
  4722  000136  8DA3               	bsf	(sprintf@flag+1)& (0+255),6,b
  4723                           
  4724                           ;doprnt.c: 613: f++;
  4725  000138  4B88               	infsnz	sprintf@f& (0+255),f,b
  4726  00013A  2B89               	incf	(sprintf@f+1)& (0+255),f,b
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;doprnt.c: 620: {
  4730                           ;doprnt.c: 621: prec = 0;
  4731  00013C  0E00               	movlw	0
  4732  00013E  6FB4               	movwf	(sprintf@prec+1)& (0+255),b
  4733  000140  0E00               	movlw	0
  4734  000142  6FB3               	movwf	sprintf@prec& (0+255),b
  4735                           
  4736                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4737  000144  D029               	goto	l527
  4738  000146                     
  4739                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4740                           
  4741                           ; BSR set to: 0
  4742  000146  C0B3  F023         	movff	sprintf@prec,___wmul@multiplier
  4743  00014A  C0B4  F024         	movff	sprintf@prec+1,___wmul@multiplier+1
  4744  00014E  0E00               	movlw	0
  4745  000150  6E26               	movwf	___wmul@multiplicand+1,c
  4746  000152  0E0A               	movlw	10
  4747  000154  6E25               	movwf	___wmul@multiplicand,c
  4748  000156  EC30  F016         	call	___wmul	;wreg free
  4749  00015A  C088  FFF6         	movff	sprintf@f,tblptrl
  4750  00015E  C089  FFF7         	movff	sprintf@f+1,tblptrh
  4751  000162  0E00               	movlw	low (__mediumconst shr (0+16))
  4752  000164  6EF8               	movwf	tblptru,c
  4753  000166  0E0F               	movlw	(high __ramtop+-1)
  4754  000168  64F7               	cpfsgt	tblptrh,c
  4755  00016A  D003               	bra	u6097
  4756  00016C  0008               	tblrd		*
  4757  00016E  50F5               	movf	tablat,w,c
  4758  000170  D005               	bra	u6090
  4759  000172                     u6097:
  4760  000172  CFF6 FFE1          	movff	tblptrl,fsr1l
  4761  000176  CFF7 FFE2          	movff	tblptrh,fsr1h
  4762  00017A  50E7               	movf	indf1,w,c
  4763  00017C                     u6090:
  4764  00017C  0100               	movlb	0	; () banked
  4765  00017E  6F93               	movwf	??_sprintf& (0+255),b
  4766  000180  5193               	movf	??_sprintf& (0+255),w,b
  4767  000182  2623               	addwf	?___wmul,f,c
  4768  000184  0E00               	movlw	0
  4769  000186  2224               	addwfc	?___wmul+1,f,c
  4770  000188  0ED0               	movlw	208
  4771  00018A  2423               	addwf	?___wmul,w,c
  4772  00018C  6FB3               	movwf	sprintf@prec& (0+255),b
  4773  00018E  0EFF               	movlw	255
  4774  000190  2024               	addwfc	?___wmul+1,w,c
  4775  000192  6FB4               	movwf	(sprintf@prec+1)& (0+255),b
  4776                           
  4777                           ; BSR set to: 0
  4778  000194  4B88               	infsnz	sprintf@f& (0+255),f,b
  4779  000196  2B89               	incf	(sprintf@f+1)& (0+255),f,b
  4780  000198                     l527:
  4781                           
  4782                           ; BSR set to: 0
  4783                           
  4784                           ; BSR set to: 0
  4785  000198  C088  FFF6         	movff	sprintf@f,tblptrl
  4786  00019C  C089  FFF7         	movff	sprintf@f+1,tblptrh
  4787  0001A0  0E00               	movlw	low (__mediumconst shr (0+16))
  4788  0001A2  6EF8               	movwf	tblptru,c
  4789  0001A4  0E0F               	movlw	(high __ramtop+-1)
  4790  0001A6  64F7               	cpfsgt	tblptrh,c
  4791  0001A8  D003               	bra	u6107
  4792  0001AA  0008               	tblrd		*
  4793  0001AC  50F5               	movf	tablat,w,c
  4794  0001AE  D005               	bra	u6100
  4795  0001B0                     u6107:
  4796  0001B0  CFF6 FFE1          	movff	tblptrl,fsr1l
  4797  0001B4  CFF7 FFE2          	movff	tblptrh,fsr1h
  4798  0001B8  50E7               	movf	indf1,w,c
  4799  0001BA                     u6100:
  4800  0001BA  ECAF  F016         	call	_isdigit
  4801  0001BE  A0D8               	btfss	status,0,c
  4802  0001C0  D05A               	goto	l531
  4803  0001C2  D7C1               	goto	l528
  4804  0001C4                     l526:
  4805                           
  4806                           ;doprnt.c: 626: prec = 0;
  4807  0001C4  0E00               	movlw	0
  4808  0001C6  0100               	movlb	0	; () banked
  4809  0001C8  6FB4               	movwf	(sprintf@prec+1)& (0+255),b
  4810  0001CA  0E00               	movlw	0
  4811  0001CC  6FB3               	movwf	sprintf@prec& (0+255),b
  4812                           
  4813                           ; BSR set to: 0
  4814                           ;doprnt.c: 628: flag |= 0x1000;
  4815  0001CE  89A3               	bsf	(sprintf@flag+1)& (0+255),4,b
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;doprnt.c: 630: }
  4819                           ;doprnt.c: 635: switch(c = *f++) {
  4820  0001D0  D052               	goto	l531
  4821  0001D2                     
  4822                           ; BSR set to: 0
  4823                           ;doprnt.c: 663: flag |= 0x400;
  4824                           
  4825                           ; BSR set to: 0
  4826  0001D2  85A3               	bsf	(sprintf@flag+1)& (0+255),2,b
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;doprnt.c: 698: case 'i':
  4830                           ;doprnt.c: 699: break;
  4831                           
  4832                           ; BSR set to: 0
  4833                           
  4834                           ;doprnt.c: 697: case 'd':
  4835                           
  4836                           ;doprnt.c: 664: break;
  4837  0001D4  D078               	goto	l535
  4838  0001D6                     
  4839                           ; BSR set to: 0
  4840                           ;doprnt.c: 753: if(prec && prec < len)
  4841                           
  4842                           ; BSR set to: 0
  4843  0001D6  51B3               	movf	sprintf@prec& (0+255),w,b
  4844  0001D8  11B4               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4845  0001DA  B4D8               	btfsc	status,2,c
  4846  0001DC  D00A               	goto	l539
  4847                           
  4848                           ; BSR set to: 0
  4849  0001DE  51A0               	movf	sprintf@len& (0+255),w,b
  4850  0001E0  5DB3               	subwf	sprintf@prec& (0+255),w,b
  4851  0001E2  51A1               	movf	(sprintf@len+1)& (0+255),w,b
  4852  0001E4  59B4               	subwfb	(sprintf@prec+1)& (0+255),w,b
  4853  0001E6  B0D8               	btfsc	status,0,c
  4854  0001E8  D004               	goto	l539
  4855                           
  4856                           ; BSR set to: 0
  4857                           ;doprnt.c: 754: len = prec;
  4858  0001EA  C0B3  F0A0         	movff	sprintf@prec,sprintf@len
  4859  0001EE  C0B4  F0A1         	movff	sprintf@prec+1,sprintf@len+1
  4860  0001F2                     l539:
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;doprnt.c: 757: if(width > len)
  4864                           
  4865                           ; BSR set to: 0
  4866  0001F2  51AE               	movf	sprintf@width& (0+255),w,b
  4867  0001F4  5DA0               	subwf	sprintf@len& (0+255),w,b
  4868  0001F6  51AF               	movf	(sprintf@width+1)& (0+255),w,b
  4869  0001F8  59A1               	subwfb	(sprintf@len+1)& (0+255),w,b
  4870  0001FA  B0D8               	btfsc	status,0,c
  4871  0001FC  D005               	goto	l540
  4872                           
  4873                           ; BSR set to: 0
  4874                           ;doprnt.c: 758: width -= len;
  4875  0001FE  51A0               	movf	sprintf@len& (0+255),w,b
  4876  000200  5FAE               	subwf	sprintf@width& (0+255),f,b
  4877  000202  51A1               	movf	(sprintf@len+1)& (0+255),w,b
  4878  000204  5BAF               	subwfb	(sprintf@width+1)& (0+255),f,b
  4879  000206  D00D               	goto	l542
  4880  000208                     l540:
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;doprnt.c: 759: else
  4884                           ;doprnt.c: 760: width = 0;
  4885                           
  4886                           ; BSR set to: 0
  4887  000208  0E00               	movlw	0
  4888  00020A  6FAF               	movwf	(sprintf@width+1)& (0+255),b
  4889  00020C  0E00               	movlw	0
  4890  00020E  6FAE               	movwf	sprintf@width& (0+255),b
  4891                           
  4892                           ; BSR set to: 0
  4893                           ;doprnt.c: 764: while(width--)
  4894  000210  D008               	goto	l542
  4895  000212                     l5707:
  4896                           
  4897                           ; BSR set to: 0
  4898                           ;doprnt.c: 765: ((*sp++ = (' ')));
  4899  000212  C086  FFD9         	movff	sprintf@sp,fsr2l
  4900  000216  C087  FFDA         	movff	sprintf@sp+1,fsr2h
  4901  00021A  0E20               	movlw	32
  4902  00021C  6EDF               	movwf	indf2,c
  4903                           
  4904                           ; BSR set to: 0
  4905  00021E  4B86               	infsnz	sprintf@sp& (0+255),f,b
  4906  000220  2B87               	incf	(sprintf@sp+1)& (0+255),f,b
  4907  000222                     l542:
  4908                           
  4909                           ; BSR set to: 0
  4910                           
  4911                           ; BSR set to: 0
  4912  000222  07AE               	decf	sprintf@width& (0+255),f,b
  4913  000224  A0D8               	btfss	status,0,c
  4914  000226  07AF               	decf	(sprintf@width+1)& (0+255),f,b
  4915  000228  29AE               	incf	sprintf@width& (0+255),w,b
  4916  00022A  E1F3               	bnz	l5707
  4917  00022C  29AF               	incf	(sprintf@width+1)& (0+255),w,b
  4918  00022E  B4D8               	btfsc	status,2,c
  4919  000230  D00F               	goto	l545
  4920  000232  D7EF               	goto	l543
  4921  000234                     l5713:
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  4925  000234  C09C  FFD9         	movff	sprintf@cp,fsr2l
  4926  000238  C09D  FFDA         	movff	sprintf@cp+1,fsr2h
  4927  00023C  C086  FFE1         	movff	sprintf@sp,fsr1l
  4928  000240  C087  FFE2         	movff	sprintf@sp+1,fsr1h
  4929  000244  CFDF FFE7          	movff	indf2,indf1
  4930                           
  4931                           ; BSR set to: 0
  4932  000248  4B9C               	infsnz	sprintf@cp& (0+255),f,b
  4933  00024A  2B9D               	incf	(sprintf@cp+1)& (0+255),f,b
  4934                           
  4935                           ; BSR set to: 0
  4936  00024C  4B86               	infsnz	sprintf@sp& (0+255),f,b
  4937  00024E  2B87               	incf	(sprintf@sp+1)& (0+255),f,b
  4938  000250                     l545:
  4939                           
  4940                           ; BSR set to: 0
  4941                           
  4942                           ; BSR set to: 0
  4943  000250  07A0               	decf	sprintf@len& (0+255),f,b
  4944  000252  A0D8               	btfss	status,0,c
  4945  000254  07A1               	decf	(sprintf@len+1)& (0+255),f,b
  4946  000256  29A0               	incf	sprintf@len& (0+255),w,b
  4947  000258  E1ED               	bnz	l5713
  4948  00025A  29A1               	incf	(sprintf@len+1)& (0+255),w,b
  4949  00025C  B4D8               	btfsc	status,2,c
  4950  00025E  EF76  F005         	goto	u6610
  4951  000262  D7E8               	goto	l546
  4952  000264                     
  4953                           ; BSR set to: 0
  4954                           ;doprnt.c: 805: cp = (char *)&c;
  4955                           
  4956                           ; BSR set to: 0
  4957  000264  0EB5               	movlw	low sprintf@c
  4958  000266  6F9C               	movwf	sprintf@cp& (0+255),b
  4959  000268  0E00               	movlw	high sprintf@c
  4960  00026A  6F9D               	movwf	(sprintf@cp+1)& (0+255),b
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;doprnt.c: 806: len = 1;
  4964  00026C  0E00               	movlw	0
  4965  00026E  6FA1               	movwf	(sprintf@len+1)& (0+255),b
  4966  000270  0E01               	movlw	1
  4967  000272  6FA0               	movwf	sprintf@len& (0+255),b
  4968                           
  4969                           ;doprnt.c: 807: goto dostring;
  4970  000274  D7B0               	goto	l538
  4971  000276                     l531:
  4972                           
  4973                           ; BSR set to: 0
  4974  000276  0100               	movlb	0	; () banked
  4975  000278  5188               	movf	sprintf@f& (0+255),w,b
  4976  00027A  6F93               	movwf	??_sprintf& (0+255),b
  4977  00027C  5189               	movf	(sprintf@f+1)& (0+255),w,b
  4978  00027E  6F94               	movwf	(??_sprintf+1)& (0+255),b
  4979  000280  4B88               	infsnz	sprintf@f& (0+255),f,b
  4980  000282  2B89               	incf	(sprintf@f+1)& (0+255),f,b
  4981  000284  C093  FFF6         	movff	??_sprintf,tblptrl
  4982  000288  C094  FFF7         	movff	??_sprintf+1,tblptrh
  4983  00028C  0E00               	movlw	low (__mediumconst shr (0+16))
  4984  00028E  6EF8               	movwf	tblptru,c
  4985  000290  0E0F               	movlw	(high __ramtop+-1)
  4986  000292  64F7               	cpfsgt	tblptrh,c
  4987  000294  D003               	bra	u6177
  4988  000296  0008               	tblrd		*
  4989  000298  50F5               	movf	tablat,w,c
  4990  00029A  D005               	bra	u6170
  4991  00029C                     u6177:
  4992  00029C  CFF6 FFE1          	movff	tblptrl,fsr1l
  4993  0002A0  CFF7 FFE2          	movff	tblptrh,fsr1h
  4994  0002A4  50E7               	movf	indf1,w,c
  4995  0002A6                     u6170:
  4996  0002A6  0100               	movlb	0	; () banked
  4997  0002A8  6FB5               	movwf	sprintf@c& (0+255),b
  4998  0002AA  51B5               	movf	sprintf@c& (0+255),w,b
  4999                           
  5000                           ; Switch size 1, requested type "space"
  5001                           ; Number of cases is 4, Range of values is 0 to 105
  5002                           ; switch strategies available:
  5003                           ; Name         Instructions Cycles
  5004                           ; simple_byte           13     7 (average)
  5005                           ;	Chosen strategy is simple_byte
  5006  0002AC  0A00               	xorlw	0	; case 0
  5007  0002AE  B4D8               	btfsc	status,2,c
  5008  0002B0  EF93  F005         	goto	u6630
  5009  0002B4  0A64               	xorlw	100	; case 100
  5010  0002B6  B4D8               	btfsc	status,2,c
  5011  0002B8  D006               	goto	l535
  5012  0002BA  0A02               	xorlw	2	; case 102
  5013  0002BC  B4D8               	btfsc	status,2,c
  5014  0002BE  D789               	goto	l534
  5015  0002C0  0A0F               	xorlw	15	; case 105
  5016  0002C2  A4D8               	btfss	status,2,c
  5017  0002C4  D7CF               	goto	l548
  5018  0002C6                     l535:
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;doprnt.c: 825: if(flag & (0x700)) {
  5022                           
  5023                           ; BSR set to: 0
  5024  0002C6  0E07               	movlw	7
  5025  0002C8  15A3               	andwf	(sprintf@flag+1)& (0+255),w,b
  5026  0002CA  B4D8               	btfsc	status,2,c
  5027  0002CC  D2FE               	goto	l549
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;doprnt.c: 827: if(flag & 0x1000)
  5031  0002CE  A9A3               	btfss	(sprintf@flag+1)& (0+255),4,b
  5032  0002D0  D004               	goto	l550
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;doprnt.c: 829: prec = 6;
  5036  0002D2  0E00               	movlw	0
  5037  0002D4  6FB4               	movwf	(sprintf@prec+1)& (0+255),b
  5038  0002D6  0E06               	movlw	6
  5039  0002D8  6FB3               	movwf	sprintf@prec& (0+255),b
  5040  0002DA                     l550:
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5044                           
  5045                           ; BSR set to: 0
  5046  0002DA  C09E  FFD9         	movff	sprintf@ap,fsr2l
  5047  0002DE  C09F  FFDA         	movff	sprintf@ap+1,fsr2h
  5048  0002E2  CFDE F0B0          	movff	postinc2,sprintf@fval
  5049  0002E6  CFDE F0B1          	movff	postinc2,sprintf@fval+1
  5050  0002EA  CFDD F0B2          	movff	postdec2,sprintf@fval+2
  5051                           
  5052                           ; BSR set to: 0
  5053  0002EE  0E03               	movlw	3
  5054  0002F0  279E               	addwf	sprintf@ap& (0+255),f,b
  5055  0002F2  0E00               	movlw	0
  5056  0002F4  239F               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;doprnt.c: 831: if(fval < 0.0) {
  5060  0002F6  AFB2               	btfss	(sprintf@fval+2)& (0+255),7,b
  5061  0002F8  D011               	goto	l551
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;doprnt.c: 832: fval = -fval;
  5065  0002FA  C0B0  F015         	movff	sprintf@fval,___ftneg@f1
  5066  0002FE  C0B1  F016         	movff	sprintf@fval+1,___ftneg@f1+1
  5067  000302  C0B2  F017         	movff	sprintf@fval+2,___ftneg@f1+2
  5068  000306  EC68  F016         	call	___ftneg	;wreg free
  5069  00030A  C015  F0B0         	movff	?___ftneg,sprintf@fval
  5070  00030E  C016  F0B1         	movff	?___ftneg+1,sprintf@fval+1
  5071  000312  C017  F0B2         	movff	?___ftneg+2,sprintf@fval+2
  5072                           
  5073                           ;doprnt.c: 833: flag |= 0x03;
  5074  000316  0E03               	movlw	3
  5075  000318  0100               	movlb	0	; () banked
  5076  00031A  13A2               	iorwf	sprintf@flag& (0+255),f,b
  5077  00031C                     l551:
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;doprnt.c: 834: }
  5081                           ;doprnt.c: 835: exp = 0;
  5082                           
  5083                           ; BSR set to: 0
  5084  00031C  0E00               	movlw	0
  5085  00031E  6FAD               	movwf	(sprintf@exp+1)& (0+255),b
  5086  000320  0E00               	movlw	0
  5087  000322  6FAC               	movwf	sprintf@exp& (0+255),b
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;doprnt.c: 836: if( fval!=0) {
  5091  000324  51B0               	movf	sprintf@fval& (0+255),w,b
  5092  000326  11B1               	iorwf	(sprintf@fval+1)& (0+255),w,b
  5093  000328  11B2               	iorwf	(sprintf@fval+2)& (0+255),w,b
  5094  00032A  B4D8               	btfsc	status,2,c
  5095  00032C  D086               	goto	l556
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5099  00032E  0E82               	movlw	130
  5100  000330  6F93               	movwf	??_sprintf& (0+255),b
  5101  000332  0EFF               	movlw	255
  5102  000334  6F94               	movwf	(??_sprintf+1)& (0+255),b
  5103  000336  C0B0  F095         	movff	sprintf@fval,??_sprintf+2
  5104  00033A  C0B1  F096         	movff	sprintf@fval+1,??_sprintf+3
  5105  00033E  C0B2  F097         	movff	sprintf@fval+2,??_sprintf+4
  5106  000342  C0B3  F098         	movff	sprintf@fval+3,??_sprintf+5
  5107  000346  0E10               	movlw	16
  5108  000348  D005               	goto	u6220
  5109  00034A                     u6225:
  5110  00034A  90D8               	bcf	status,0,c
  5111  00034C  3398               	rrcf	(??_sprintf+5)& (0+255),f,b
  5112  00034E  3397               	rrcf	(??_sprintf+4)& (0+255),f,b
  5113  000350  3396               	rrcf	(??_sprintf+3)& (0+255),f,b
  5114  000352  3395               	rrcf	(??_sprintf+2)& (0+255),f,b
  5115  000354                     u6220:
  5116  000354  2EE8               	decfsz	wreg,f,c
  5117  000356  D7F9               	goto	u6225
  5118  000358  5195               	movf	(??_sprintf+2)& (0+255),w,b
  5119  00035A  2593               	addwf	??_sprintf& (0+255),w,b
  5120  00035C  6FAC               	movwf	sprintf@exp& (0+255),b
  5121  00035E  0E00               	movlw	0
  5122  000360  2194               	addwfc	(??_sprintf+1)& (0+255),w,b
  5123  000362  6FAD               	movwf	(sprintf@exp+1)& (0+255),b
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;doprnt.c: 838: exp--;
  5127  000364  07AC               	decf	sprintf@exp& (0+255),f,b
  5128  000366  A0D8               	btfss	status,0,c
  5129  000368  07AD               	decf	(sprintf@exp+1)& (0+255),f,b
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;doprnt.c: 839: exp *= 3;
  5133  00036A  C0AC  F023         	movff	sprintf@exp,___wmul@multiplier
  5134  00036E  C0AD  F024         	movff	sprintf@exp+1,___wmul@multiplier+1
  5135  000372  0E00               	movlw	0
  5136  000374  6E26               	movwf	___wmul@multiplicand+1,c
  5137  000376  0E03               	movlw	3
  5138  000378  6E25               	movwf	___wmul@multiplicand,c
  5139  00037A  EC30  F016         	call	___wmul	;wreg free
  5140  00037E  C023  F0AC         	movff	?___wmul,sprintf@exp
  5141  000382  C024  F0AD         	movff	?___wmul+1,sprintf@exp+1
  5142                           
  5143                           ;doprnt.c: 840: exp /= 10;
  5144  000386  C0AC  F01B         	movff	sprintf@exp,___awdiv@dividend
  5145  00038A  C0AD  F01C         	movff	sprintf@exp+1,___awdiv@dividend+1
  5146  00038E  0E00               	movlw	0
  5147  000390  6E1E               	movwf	___awdiv@divisor+1,c
  5148  000392  0E0A               	movlw	10
  5149  000394  6E1D               	movwf	___awdiv@divisor,c
  5150  000396  ECA4  F012         	call	___awdiv	;wreg free
  5151  00039A  C01B  F0AC         	movff	?___awdiv,sprintf@exp
  5152  00039E  C01C  F0AD         	movff	?___awdiv+1,sprintf@exp+1
  5153                           
  5154                           ;doprnt.c: 841: if(exp < 0)
  5155  0003A2  0100               	movlb	0	; () banked
  5156  0003A4  AFAD               	btfss	(sprintf@exp+1)& (0+255),7,b
  5157  0003A6  D003               	goto	l553
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;doprnt.c: 842: exp--;
  5161  0003A8  07AC               	decf	sprintf@exp& (0+255),f,b
  5162  0003AA  A0D8               	btfss	status,0,c
  5163  0003AC  07AD               	decf	(sprintf@exp+1)& (0+255),f,b
  5164  0003AE                     l553:
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5168                           
  5169                           ; BSR set to: 0
  5170  0003AE  51AC               	movf	sprintf@exp& (0+255),w,b
  5171  0003B0  0800               	sublw	0
  5172  0003B2  EC29  F008         	call	_scale
  5173  0003B6  C038  F0A4         	movff	?_scale,sprintf@tmpval
  5174  0003BA  C039  F0A5         	movff	?_scale+1,sprintf@tmpval+1
  5175  0003BE  C03A  F0A6         	movff	?_scale+2,sprintf@tmpval+2
  5176                           
  5177                           ;doprnt.c: 847: tmpval.integ *= fval;
  5178  0003C2  C0A4  F029         	movff	sprintf@tmpval,___ftmul@f1
  5179  0003C6  C0A5  F02A         	movff	sprintf@tmpval+1,___ftmul@f1+1
  5180  0003CA  C0A6  F02B         	movff	sprintf@tmpval+2,___ftmul@f1+2
  5181  0003CE  C0B0  F02C         	movff	sprintf@fval,___ftmul@f2
  5182  0003D2  C0B1  F02D         	movff	sprintf@fval+1,___ftmul@f2+1
  5183  0003D6  C0B2  F02E         	movff	sprintf@fval+2,___ftmul@f2+2
  5184  0003DA  ECFF  F00F         	call	___ftmul	;wreg free
  5185  0003DE  C029  F0A4         	movff	?___ftmul,sprintf@tmpval
  5186  0003E2  C02A  F0A5         	movff	?___ftmul+1,sprintf@tmpval+1
  5187  0003E6  C02B  F0A6         	movff	?___ftmul+2,sprintf@tmpval+2
  5188                           
  5189                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5190  0003EA  C0A4  F015         	movff	sprintf@tmpval,___ftge@ff1
  5191  0003EE  C0A5  F016         	movff	sprintf@tmpval+1,___ftge@ff1+1
  5192  0003F2  C0A6  F017         	movff	sprintf@tmpval+2,___ftge@ff1+2
  5193  0003F6  0E00               	movlw	0
  5194  0003F8  6E18               	movwf	___ftge@ff2,c
  5195  0003FA  0E80               	movlw	128
  5196  0003FC  6E19               	movwf	___ftge@ff2+1,c
  5197  0003FE  0E3F               	movlw	63
  5198  000400  6E1A               	movwf	___ftge@ff2+2,c
  5199  000402  EC5C  F012         	call	___ftge	;wreg free
  5200  000406  B0D8               	btfsc	status,0,c
  5201  000408  D005               	goto	l554
  5202                           
  5203                           ;doprnt.c: 849: exp--;
  5204  00040A  0100               	movlb	0	; () banked
  5205  00040C  07AC               	decf	sprintf@exp& (0+255),f,b
  5206  00040E  A0D8               	btfss	status,0,c
  5207  000410  07AD               	decf	(sprintf@exp+1)& (0+255),f,b
  5208  000412  D013               	goto	l556
  5209  000414                     l554:
  5210                           
  5211                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5212                           
  5213                           ; BSR set to: 0
  5214  000414  C0A4  F015         	movff	sprintf@tmpval,___ftge@ff1
  5215  000418  C0A5  F016         	movff	sprintf@tmpval+1,___ftge@ff1+1
  5216  00041C  C0A6  F017         	movff	sprintf@tmpval+2,___ftge@ff1+2
  5217  000420  0E00               	movlw	0
  5218  000422  6E18               	movwf	___ftge@ff2,c
  5219  000424  0E20               	movlw	32
  5220  000426  6E19               	movwf	___ftge@ff2+1,c
  5221  000428  0E41               	movlw	65
  5222  00042A  6E1A               	movwf	___ftge@ff2+2,c
  5223  00042C  EC5C  F012         	call	___ftge	;wreg free
  5224  000430  A0D8               	btfss	status,0,c
  5225  000432  D003               	goto	l556
  5226                           
  5227                           ;doprnt.c: 851: exp++;
  5228  000434  0100               	movlb	0	; () banked
  5229  000436  4BAC               	infsnz	sprintf@exp& (0+255),f,b
  5230  000438  2BAD               	incf	(sprintf@exp+1)& (0+255),f,b
  5231  00043A                     l556:
  5232                           
  5233                           ;doprnt.c: 852: }
  5234                           ;doprnt.c: 1112: if(prec <= 12)
  5235                           
  5236                           ; BSR set to: 0
  5237                           
  5238                           ; BSR set to: 0
  5239                           
  5240                           ; BSR set to: 0
  5241  00043A  0100               	movlb	0	; () banked
  5242  00043C  BFB4               	btfsc	(sprintf@prec+1)& (0+255),7,b
  5243  00043E  D006               	goto	u6260
  5244  000440  51B4               	movf	(sprintf@prec+1)& (0+255),w,b
  5245  000442  E11B               	bnz	l5777
  5246  000444  0E0D               	movlw	13
  5247  000446  5DB3               	subwf	sprintf@prec& (0+255),w,b
  5248  000448  B0D8               	btfsc	status,0,c
  5249  00044A  D017               	goto	l557
  5250  00044C                     u6260:
  5251                           
  5252                           ; BSR set to: 0
  5253                           ;doprnt.c: 1113: fval += fround(prec);
  5254  00044C  C0B0  F042         	movff	sprintf@fval,___ftadd@f1
  5255  000450  C0B1  F043         	movff	sprintf@fval+1,___ftadd@f1+1
  5256  000454  C0B2  F044         	movff	sprintf@fval+2,___ftadd@f1+2
  5257  000458  51B3               	movf	sprintf@prec& (0+255),w,b
  5258  00045A  EC2D  F00A         	call	_fround
  5259  00045E  C038  F045         	movff	?_fround,___ftadd@f2
  5260  000462  C039  F046         	movff	?_fround+1,___ftadd@f2+1
  5261  000466  C03A  F047         	movff	?_fround+2,___ftadd@f2+2
  5262  00046A  EC4F  F00C         	call	___ftadd	;wreg free
  5263  00046E  C042  F0B0         	movff	?___ftadd,sprintf@fval
  5264  000472  C043  F0B1         	movff	?___ftadd+1,sprintf@fval+1
  5265  000476  C044  F0B2         	movff	?___ftadd+2,sprintf@fval+2
  5266  00047A                     l557:
  5267  00047A                     l5777:
  5268                           
  5269                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5270  00047A  0100               	movlb	0	; () banked
  5271  00047C  BFAD               	btfsc	(sprintf@exp+1)& (0+255),7,b
  5272  00047E  D006               	goto	u6270
  5273  000480  51AD               	movf	(sprintf@exp+1)& (0+255),w,b
  5274  000482  E120               	bnz	l5785
  5275  000484  0E0A               	movlw	10
  5276  000486  5DAC               	subwf	sprintf@exp& (0+255),w,b
  5277  000488  B0D8               	btfsc	status,0,c
  5278  00048A  D01C               	goto	u6300
  5279  00048C                     u6270:
  5280                           
  5281                           ; BSR set to: 0
  5282  00048C  51B0               	movf	sprintf@fval& (0+255),w,b
  5283  00048E  11B1               	iorwf	(sprintf@fval+1)& (0+255),w,b
  5284  000490  11B2               	iorwf	(sprintf@fval+2)& (0+255),w,b
  5285  000492  B4D8               	btfsc	status,2,c
  5286  000494  D056               	goto	l558
  5287                           
  5288                           ; BSR set to: 0
  5289  000496  C0B0  F04E         	movff	sprintf@fval,___fttol@f1
  5290  00049A  C0B1  F04F         	movff	sprintf@fval+1,___fttol@f1+1
  5291  00049E  C0B2  F050         	movff	sprintf@fval+2,___fttol@f1+2
  5292  0004A2  EC83  F00F         	call	___fttol	;wreg free
  5293  0004A6  504E               	movf	?___fttol,w,c
  5294  0004A8  104F               	iorwf	?___fttol+1,w,c
  5295  0004AA  1050               	iorwf	?___fttol+2,w,c
  5296  0004AC  1051               	iorwf	?___fttol+3,w,c
  5297  0004AE  A4D8               	btfss	status,2,c
  5298  0004B0  D048               	goto	l558
  5299  0004B2  0100               	movlb	0	; () banked
  5300  0004B4  BFAD               	btfsc	(sprintf@exp+1)& (0+255),7,b
  5301  0004B6  D045               	goto	l558
  5302  0004B8  51AD               	movf	(sprintf@exp+1)& (0+255),w,b
  5303  0004BA  E104               	bnz	l5785
  5304  0004BC  0E02               	movlw	2
  5305  0004BE  5DAC               	subwf	sprintf@exp& (0+255),w,b
  5306  0004C0  A0D8               	btfss	status,0,c
  5307  0004C2  D03F               	goto	l558
  5308  0004C4                     u6300:
  5309  0004C4                     l5785:
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5313  0004C4  C0A4  F015         	movff	sprintf@tmpval,___ftge@ff1
  5314  0004C8  C0A5  F016         	movff	sprintf@tmpval+1,___ftge@ff1+1
  5315  0004CC  C0A6  F017         	movff	sprintf@tmpval+2,___ftge@ff1+2
  5316  0004D0  0E70               	movlw	112
  5317  0004D2  6E18               	movwf	___ftge@ff2,c
  5318  0004D4  0E89               	movlw	137
  5319  0004D6  6E19               	movwf	___ftge@ff2+1,c
  5320  0004D8  0E40               	movlw	64
  5321  0004DA  6E1A               	movwf	___ftge@ff2+2,c
  5322  0004DC  EC5C  F012         	call	___ftge	;wreg free
  5323  0004E0  B0D8               	btfsc	status,0,c
  5324  0004E2  D003               	goto	l561
  5325                           
  5326                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5327  0004E4  0100               	movlb	0	; () banked
  5328  0004E6  0EF7               	movlw	247
  5329  0004E8  D002               	goto	L1
  5330  0004EA                     l561:
  5331                           
  5332                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5333                           
  5334                           ; BSR set to: 0
  5335  0004EA  0100               	movlb	0	; () banked
  5336  0004EC  0EF8               	movlw	248
  5337  0004EE                     L1:
  5338  0004EE  27AC               	addwf	sprintf@exp& (0+255),f,b
  5339  0004F0  0EFF               	movlw	255
  5340  0004F2  23AD               	addwfc	(sprintf@exp+1)& (0+255),f,b
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;doprnt.c: 1124: }
  5344                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5345                           
  5346                           ; BSR set to: 0
  5347  0004F4  51AC               	movf	sprintf@exp& (0+255),w,b
  5348  0004F6  EC29  F008         	call	_scale
  5349  0004FA  C038  F0A4         	movff	?_scale,sprintf@tmpval
  5350  0004FE  C039  F0A5         	movff	?_scale+1,sprintf@tmpval+1
  5351  000502  C03A  F0A6         	movff	?_scale+2,sprintf@tmpval+2
  5352                           
  5353                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5354  000506  C0B0  F015         	movff	sprintf@fval,__tdiv_to_l_@f1
  5355  00050A  C0B1  F016         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  5356  00050E  C0B2  F017         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  5357  000512  C0A4  F018         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  5358  000516  C0A5  F019         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  5359  00051A  C0A6  F01A         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  5360  00051E  ECD5  F00D         	call	__tdiv_to_l_	;wreg free
  5361  000522  C015  F0A8         	movff	?__tdiv_to_l_,sprintf@val
  5362  000526  C016  F0A9         	movff	?__tdiv_to_l_+1,sprintf@val+1
  5363  00052A  C017  F0AA         	movff	?__tdiv_to_l_+2,sprintf@val+2
  5364  00052E  C018  F0AB         	movff	?__tdiv_to_l_+3,sprintf@val+3
  5365                           
  5366                           ;doprnt.c: 1129: fval = 0.0;
  5367  000532  0E00               	movlw	0
  5368  000534  0100               	movlb	0	; () banked
  5369  000536  6FB0               	movwf	sprintf@fval& (0+255),b
  5370  000538  0E00               	movlw	0
  5371  00053A  6FB1               	movwf	(sprintf@fval+1)& (0+255),b
  5372  00053C  0E00               	movlw	0
  5373  00053E  6FB2               	movwf	(sprintf@fval+2)& (0+255),b
  5374                           
  5375                           ;doprnt.c: 1130: } else {
  5376  000540  D033               	goto	l567
  5377  000542                     l558:
  5378                           
  5379                           ;doprnt.c: 1131: val = (unsigned long)fval;
  5380                           
  5381                           ; BSR set to: 0
  5382  000542  C0B0  F04E         	movff	sprintf@fval,___fttol@f1
  5383  000546  C0B1  F04F         	movff	sprintf@fval+1,___fttol@f1+1
  5384  00054A  C0B2  F050         	movff	sprintf@fval+2,___fttol@f1+2
  5385  00054E  EC83  F00F         	call	___fttol	;wreg free
  5386  000552  C04E  F0A8         	movff	?___fttol,sprintf@val
  5387  000556  C04F  F0A9         	movff	?___fttol+1,sprintf@val+1
  5388  00055A  C050  F0AA         	movff	?___fttol+2,sprintf@val+2
  5389  00055E  C051  F0AB         	movff	?___fttol+3,sprintf@val+3
  5390                           
  5391                           ;doprnt.c: 1132: fval -= (double)val;
  5392  000562  C0B0  F04E         	movff	sprintf@fval,___ftsub@f1
  5393  000566  C0B1  F04F         	movff	sprintf@fval+1,___ftsub@f1+1
  5394  00056A  C0B2  F050         	movff	sprintf@fval+2,___ftsub@f1+2
  5395  00056E  C0A8  F01D         	movff	sprintf@val,___lltoft@c
  5396  000572  C0A9  F01E         	movff	sprintf@val+1,___lltoft@c+1
  5397  000576  C0AA  F01F         	movff	sprintf@val+2,___lltoft@c+2
  5398  00057A  C0AB  F020         	movff	sprintf@val+3,___lltoft@c+3
  5399  00057E  EC60  F014         	call	___lltoft	;wreg free
  5400  000582  C01D  F051         	movff	?___lltoft,___ftsub@f2
  5401  000586  C01E  F052         	movff	?___lltoft+1,___ftsub@f2+1
  5402  00058A  C01F  F053         	movff	?___lltoft+2,___ftsub@f2+2
  5403  00058E  EC54  F015         	call	___ftsub	;wreg free
  5404  000592  C04E  F0B0         	movff	?___ftsub,sprintf@fval
  5405  000596  C04F  F0B1         	movff	?___ftsub+1,sprintf@fval+1
  5406  00059A  C050  F0B2         	movff	?___ftsub+2,sprintf@fval+2
  5407                           
  5408                           ;doprnt.c: 1133: exp = 0;
  5409  00059E  0E00               	movlw	0
  5410  0005A0  0100               	movlb	0	; () banked
  5411  0005A2  6FAD               	movwf	(sprintf@exp+1)& (0+255),b
  5412  0005A4  0E00               	movlw	0
  5413  0005A6  6FAC               	movwf	sprintf@exp& (0+255),b
  5414  0005A8                     l567:
  5415                           
  5416                           ; BSR set to: 0
  5417                           ;doprnt.c: 1134: }
  5418                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  5419                           
  5420                           ; BSR set to: 0
  5421  0005A8  0E01               	movlw	1
  5422  0005AA  6FB5               	movwf	sprintf@c& (0+255),b
  5423  0005AC                     l5805:
  5424                           
  5425                           ; BSR set to: 0
  5426  0005AC  0E0A               	movlw	10
  5427  0005AE  19B5               	xorwf	sprintf@c& (0+255),w,b
  5428  0005B0  B4D8               	btfsc	status,2,c
  5429  0005B2  D018               	goto	u6340
  5430                           
  5431                           ; BSR set to: 0
  5432                           ;doprnt.c: 1137: if(val < dpowers[c])
  5433                           
  5434                           ; BSR set to: 0
  5435                           
  5436                           ; BSR set to: 0
  5437  0005B4  51B5               	movf	sprintf@c& (0+255),w,b
  5438  0005B6  0D04               	mullw	4
  5439  0005B8  0ED7               	movlw	low _dpowers
  5440  0005BA  24F3               	addwf	prodl,w,c
  5441  0005BC  6EF6               	movwf	tblptrl,c
  5442  0005BE  0EFE               	movlw	high _dpowers
  5443  0005C0  20F4               	addwfc	prodh,w,c
  5444  0005C2  6EF7               	movwf	tblptrh,c
  5445  0005C4                     	if	0	;There are less than 3 active tblptr bytes
  5446  0005C4                     	endif
  5447  0005C4  0009               	tblrd		*+
  5448  0005C6  50F5               	movf	tablat,w,c
  5449  0005C8  5DA8               	subwf	sprintf@val& (0+255),w,b
  5450  0005CA  0009               	tblrd		*+
  5451  0005CC  50F5               	movf	tablat,w,c
  5452  0005CE  59A9               	subwfb	(sprintf@val+1)& (0+255),w,b
  5453  0005D0  0009               	tblrd		*+
  5454  0005D2  50F5               	movf	tablat,w,c
  5455  0005D4  59AA               	subwfb	(sprintf@val+2)& (0+255),w,b
  5456  0005D6  0009               	tblrd		*+
  5457  0005D8  50F5               	movf	tablat,w,c
  5458  0005DA  59AB               	subwfb	(sprintf@val+3)& (0+255),w,b
  5459  0005DC  A0D8               	btfss	status,0,c
  5460  0005DE  D002               	goto	u6340
  5461                           
  5462                           ; BSR set to: 0
  5463                           
  5464                           ; BSR set to: 0
  5465                           
  5466                           ; BSR set to: 0
  5467                           ;doprnt.c: 1138: break;
  5468  0005E0  2BB5               	incf	sprintf@c& (0+255),f,b
  5469  0005E2  D7E4               	goto	l5805
  5470  0005E4                     u6340:
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;doprnt.c: 1142: width -= prec + c + exp;
  5474                           
  5475                           ; BSR set to: 0
  5476  0005E4  C0B5  F093         	movff	sprintf@c,??_sprintf
  5477  0005E8  6B94               	clrf	(??_sprintf+1)& (0+255),b
  5478  0005EA  BF93               	btfsc	??_sprintf& (0+255),7,b
  5479  0005EC  0794               	decf	(??_sprintf+1)& (0+255),f,b
  5480  0005EE  51B3               	movf	sprintf@prec& (0+255),w,b
  5481  0005F0  2793               	addwf	??_sprintf& (0+255),f,b
  5482  0005F2  51B4               	movf	(sprintf@prec+1)& (0+255),w,b
  5483  0005F4  2394               	addwfc	(??_sprintf+1)& (0+255),f,b
  5484  0005F6  51AC               	movf	sprintf@exp& (0+255),w,b
  5485  0005F8  2793               	addwf	??_sprintf& (0+255),f,b
  5486  0005FA  51AD               	movf	(sprintf@exp+1)& (0+255),w,b
  5487  0005FC  2394               	addwfc	(??_sprintf+1)& (0+255),f,b
  5488  0005FE  5193               	movf	??_sprintf& (0+255),w,b
  5489  000600  5FAE               	subwf	sprintf@width& (0+255),f,b
  5490  000602  5194               	movf	(??_sprintf+1)& (0+255),w,b
  5491  000604  5BAF               	subwfb	(sprintf@width+1)& (0+255),f,b
  5492                           
  5493                           ;doprnt.c: 1143: if(
  5494                           ;doprnt.c: 1147: prec)
  5495  000606  51B3               	movf	sprintf@prec& (0+255),w,b
  5496  000608  11B4               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5497  00060A  B4D8               	btfsc	status,2,c
  5498  00060C  D003               	goto	l571
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;doprnt.c: 1148: width--;
  5502  00060E  07AE               	decf	sprintf@width& (0+255),f,b
  5503  000610  A0D8               	btfss	status,0,c
  5504  000612  07AF               	decf	(sprintf@width+1)& (0+255),f,b
  5505  000614                     l571:
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;doprnt.c: 1149: if(flag & 0x03)
  5509                           
  5510                           ; BSR set to: 0
  5511  000614  0E03               	movlw	3
  5512  000616  15A2               	andwf	sprintf@flag& (0+255),w,b
  5513  000618  6F93               	movwf	??_sprintf& (0+255),b
  5514  00061A  0E00               	movlw	0
  5515  00061C  15A3               	andwf	(sprintf@flag+1)& (0+255),w,b
  5516  00061E  6F94               	movwf	(??_sprintf+1)& (0+255),b
  5517  000620  5193               	movf	??_sprintf& (0+255),w,b
  5518  000622  1194               	iorwf	(??_sprintf+1)& (0+255),w,b
  5519  000624  B4D8               	btfsc	status,2,c
  5520  000626  D00C               	goto	l573
  5521  000628  D008               	goto	l5829
  5522  00062A                     l5825:
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  5526  00062A  C086  FFD9         	movff	sprintf@sp,fsr2l
  5527  00062E  C087  FFDA         	movff	sprintf@sp+1,fsr2h
  5528  000632  0E20               	movlw	32
  5529  000634  6EDF               	movwf	indf2,c
  5530                           
  5531                           ; BSR set to: 0
  5532  000636  4B86               	infsnz	sprintf@sp& (0+255),f,b
  5533  000638  2B87               	incf	(sprintf@sp+1)& (0+255),f,b
  5534  00063A                     l5829:
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;doprnt.c: 1182: width--;
  5538  00063A  07AE               	decf	sprintf@width& (0+255),f,b
  5539  00063C  A0D8               	btfss	status,0,c
  5540  00063E  07AF               	decf	(sprintf@width+1)& (0+255),f,b
  5541  000640                     l573:
  5542                           
  5543                           ; BSR set to: 0
  5544                           
  5545                           ; BSR set to: 0
  5546  000640  BFAF               	btfsc	(sprintf@width+1)& (0+255),7,b
  5547  000642  D005               	goto	u6370
  5548  000644  51AF               	movf	(sprintf@width+1)& (0+255),w,b
  5549  000646  E1F1               	bnz	l5825
  5550  000648  05AE               	decf	sprintf@width& (0+255),w,b
  5551  00064A  B0D8               	btfsc	status,0,c
  5552  00064C  D7EE               	goto	l574
  5553  00064E                     u6370:
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;doprnt.c: 1183: }
  5557                           ;doprnt.c: 1188: if(flag & 0x03)
  5558                           
  5559                           ; BSR set to: 0
  5560  00064E  0E03               	movlw	3
  5561  000650  15A2               	andwf	sprintf@flag& (0+255),w,b
  5562  000652  6F93               	movwf	??_sprintf& (0+255),b
  5563  000654  0E00               	movlw	0
  5564  000656  15A3               	andwf	(sprintf@flag+1)& (0+255),w,b
  5565  000658  6F94               	movwf	(??_sprintf+1)& (0+255),b
  5566  00065A  5193               	movf	??_sprintf& (0+255),w,b
  5567  00065C  1194               	iorwf	(??_sprintf+1)& (0+255),w,b
  5568  00065E  B4D8               	btfsc	status,2,c
  5569  000660  D050               	goto	l577
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  5573  000662  C086  FFD9         	movff	sprintf@sp,fsr2l
  5574  000666  C087  FFDA         	movff	sprintf@sp+1,fsr2h
  5575  00066A  0E2D               	movlw	45
  5576  00066C  D047               	goto	L2
  5577  00066E                     
  5578                           ; BSR set to: 0
  5579                           ;doprnt.c: 1200: {
  5580                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  5581                           
  5582                           ; BSR set to: 0
  5583  00066E  C0A8  F015         	movff	sprintf@val,___lldiv@dividend
  5584  000672  C0A9  F016         	movff	sprintf@val+1,___lldiv@dividend+1
  5585  000676  C0AA  F017         	movff	sprintf@val+2,___lldiv@dividend+2
  5586  00067A  C0AB  F018         	movff	sprintf@val+3,___lldiv@dividend+3
  5587  00067E  51B5               	movf	sprintf@c& (0+255),w,b
  5588  000680  0D04               	mullw	4
  5589  000682  0ED7               	movlw	low _dpowers
  5590  000684  24F3               	addwf	prodl,w,c
  5591  000686  6EF6               	movwf	tblptrl,c
  5592  000688  0EFE               	movlw	high _dpowers
  5593  00068A  20F4               	addwfc	prodh,w,c
  5594  00068C  6EF7               	movwf	tblptrh,c
  5595  00068E                     	if	0	;There are less than 3 active tblptr bytes
  5596  00068E                     	endif
  5597  00068E  0009               	tblrd		*+
  5598  000690  CFF5 F019          	movff	tablat,___lldiv@divisor
  5599  000694  0009               	tblrd		*+
  5600  000696  CFF5 F01A          	movff	tablat,___lldiv@divisor+1
  5601  00069A  0009               	tblrd		*+
  5602  00069C  CFF5 F01B          	movff	tablat,___lldiv@divisor+2
  5603  0006A0  000A               	tblrd		*-
  5604  0006A2  CFF5 F01C          	movff	tablat,___lldiv@divisor+3
  5605  0006A6  ECE6  F012         	call	___lldiv	;wreg free
  5606  0006AA  C015  F0A4         	movff	?___lldiv,sprintf@tmpval
  5607  0006AE  C016  F0A5         	movff	?___lldiv+1,sprintf@tmpval+1
  5608  0006B2  C017  F0A6         	movff	?___lldiv+2,sprintf@tmpval+2
  5609  0006B6  C018  F0A7         	movff	?___lldiv+3,sprintf@tmpval+3
  5610                           
  5611                           ;doprnt.c: 1202: tmpval.vd %= 10;
  5612  0006BA  C0A4  F022         	movff	sprintf@tmpval,___llmod@dividend
  5613  0006BE  C0A5  F023         	movff	sprintf@tmpval+1,___llmod@dividend+1
  5614  0006C2  C0A6  F024         	movff	sprintf@tmpval+2,___llmod@dividend+2
  5615  0006C6  C0A7  F025         	movff	sprintf@tmpval+3,___llmod@dividend+3
  5616  0006CA  0E0A               	movlw	10
  5617  0006CC  6E26               	movwf	___llmod@divisor,c
  5618  0006CE  0E00               	movlw	0
  5619  0006D0  6E27               	movwf	___llmod@divisor+1,c
  5620  0006D2  0E00               	movlw	0
  5621  0006D4  6E28               	movwf	___llmod@divisor+2,c
  5622  0006D6  0E00               	movlw	0
  5623  0006D8  6E29               	movwf	___llmod@divisor+3,c
  5624  0006DA  ECFC  F013         	call	___llmod	;wreg free
  5625  0006DE  C022  F0A4         	movff	?___llmod,sprintf@tmpval
  5626  0006E2  C023  F0A5         	movff	?___llmod+1,sprintf@tmpval+1
  5627  0006E6  C024  F0A6         	movff	?___llmod+2,sprintf@tmpval+2
  5628  0006EA  C025  F0A7         	movff	?___llmod+3,sprintf@tmpval+3
  5629                           
  5630                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  5631  0006EE  0100               	movlb	0	; () banked
  5632  0006F0  51A4               	movf	sprintf@tmpval& (0+255),w,b
  5633  0006F2  0F30               	addlw	48
  5634  0006F4  C086  FFD9         	movff	sprintf@sp,fsr2l
  5635  0006F8  C087  FFDA         	movff	sprintf@sp+1,fsr2h
  5636  0006FC                     L2:
  5637  0006FC  6EDF               	movwf	indf2,c
  5638                           
  5639                           ; BSR set to: 0
  5640  0006FE  4B86               	infsnz	sprintf@sp& (0+255),f,b
  5641  000700  2B87               	incf	(sprintf@sp+1)& (0+255),f,b
  5642  000702                     l577:
  5643                           
  5644                           ; BSR set to: 0
  5645                           
  5646                           ; BSR set to: 0
  5647  000702  07B5               	decf	sprintf@c& (0+255),f,b
  5648  000704  29B5               	incf	sprintf@c& (0+255),w,b
  5649  000706  B4D8               	btfsc	status,2,c
  5650  000708  D00C               	goto	l580
  5651  00070A  D7B1               	goto	l578
  5652  00070C                     l5849:
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  5656  00070C  C086  FFD9         	movff	sprintf@sp,fsr2l
  5657  000710  C087  FFDA         	movff	sprintf@sp+1,fsr2h
  5658  000714  0E30               	movlw	48
  5659  000716  6EDF               	movwf	indf2,c
  5660                           
  5661                           ; BSR set to: 0
  5662  000718  4B86               	infsnz	sprintf@sp& (0+255),f,b
  5663  00071A  2B87               	incf	(sprintf@sp+1)& (0+255),f,b
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;doprnt.c: 1209: exp--;
  5667  00071C  07AC               	decf	sprintf@exp& (0+255),f,b
  5668  00071E  A0D8               	btfss	status,0,c
  5669  000720  07AD               	decf	(sprintf@exp+1)& (0+255),f,b
  5670  000722                     l580:
  5671                           
  5672                           ; BSR set to: 0
  5673                           
  5674                           ; BSR set to: 0
  5675  000722  BFAD               	btfsc	(sprintf@exp+1)& (0+255),7,b
  5676  000724  D005               	goto	u6400
  5677  000726  51AD               	movf	(sprintf@exp+1)& (0+255),w,b
  5678  000728  E1F1               	bnz	l5849
  5679  00072A  05AC               	decf	sprintf@exp& (0+255),w,b
  5680  00072C  B0D8               	btfsc	status,0,c
  5681  00072E  D7EE               	goto	l581
  5682  000730                     u6400:
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;doprnt.c: 1210: }
  5686                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  5687                           
  5688                           ; BSR set to: 0
  5689  000730  BFB4               	btfsc	(sprintf@prec+1)& (0+255),7,b
  5690  000732  D009               	goto	l583
  5691  000734  51B4               	movf	(sprintf@prec+1)& (0+255),w,b
  5692  000736  E104               	bnz	u6410
  5693  000738  0E09               	movlw	9
  5694  00073A  5DB3               	subwf	sprintf@prec& (0+255),w,b
  5695  00073C  A0D8               	btfss	status,0,c
  5696  00073E  D003               	goto	l583
  5697  000740                     u6410:
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  5701  000740  0E08               	movlw	8
  5702  000742  6FB5               	movwf	sprintf@c& (0+255),b
  5703  000744  D002               	goto	l584
  5704  000746                     l583:
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;doprnt.c: 1213: else
  5708                           ;doprnt.c: 1214: c = prec;
  5709  000746  C0B3  F0B5         	movff	sprintf@prec,sprintf@c
  5710  00074A                     l584:
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;doprnt.c: 1215: prec -= c;
  5714                           
  5715                           ; BSR set to: 0
  5716  00074A  51B5               	movf	sprintf@c& (0+255),w,b
  5717  00074C  5FB3               	subwf	sprintf@prec& (0+255),f,b
  5718  00074E  0E00               	movlw	0
  5719  000750  BFB5               	btfsc	sprintf@c& (0+255),7,b
  5720  000752  0EFF               	movlw	255
  5721  000754  5BB4               	subwfb	(sprintf@prec+1)& (0+255),f,b
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;doprnt.c: 1219: if(c)
  5725  000756  51B5               	movf	sprintf@c& (0+255),w,b
  5726  000758  B4D8               	btfsc	status,2,c
  5727  00075A  D008               	goto	l585
  5728                           
  5729                           ; BSR set to: 0
  5730                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  5731  00075C  C086  FFD9         	movff	sprintf@sp,fsr2l
  5732  000760  C087  FFDA         	movff	sprintf@sp+1,fsr2h
  5733  000764  0E2E               	movlw	46
  5734  000766  6EDF               	movwf	indf2,c
  5735                           
  5736                           ; BSR set to: 0
  5737  000768  4B86               	infsnz	sprintf@sp& (0+255),f,b
  5738  00076A  2B87               	incf	(sprintf@sp+1)& (0+255),f,b
  5739  00076C                     l585:
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5743                           
  5744                           ; BSR set to: 0
  5745  00076C  51B5               	movf	sprintf@c& (0+255),w,b
  5746  00076E  EC29  F008         	call	_scale
  5747  000772  C038  F099         	movff	?_scale,_sprintf$1967
  5748  000776  C039  F09A         	movff	?_scale+1,_sprintf$1967+1
  5749  00077A  C03A  F09B         	movff	?_scale+2,_sprintf$1967+2
  5750                           
  5751                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  5752  00077E  C0B0  F02C         	movff	sprintf@fval,___ftmul@f2
  5753  000782  C0B1  F02D         	movff	sprintf@fval+1,___ftmul@f2+1
  5754  000786  C0B2  F02E         	movff	sprintf@fval+2,___ftmul@f2+2
  5755  00078A  C099  F029         	movff	_sprintf$1967,___ftmul@f1
  5756  00078E  C09A  F02A         	movff	_sprintf$1967+1,___ftmul@f1+1
  5757  000792  C09B  F02B         	movff	_sprintf$1967+2,___ftmul@f1+2
  5758  000796  ECFF  F00F         	call	___ftmul	;wreg free
  5759  00079A  C029  F04E         	movff	?___ftmul,___fttol@f1
  5760  00079E  C02A  F04F         	movff	?___ftmul+1,___fttol@f1+1
  5761  0007A2  C02B  F050         	movff	?___ftmul+2,___fttol@f1+2
  5762  0007A6  EC83  F00F         	call	___fttol	;wreg free
  5763  0007AA  C04E  F0A8         	movff	?___fttol,sprintf@val
  5764  0007AE  C04F  F0A9         	movff	?___fttol+1,sprintf@val+1
  5765  0007B2  C050  F0AA         	movff	?___fttol+2,sprintf@val+2
  5766  0007B6  C051  F0AB         	movff	?___fttol+3,sprintf@val+3
  5767                           
  5768                           ;doprnt.c: 1228: while(c--) {
  5769  0007BA  D071               	goto	l586
  5770  0007BC                     
  5771                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  5772  0007BC  C0A8  F015         	movff	sprintf@val,___lldiv@dividend
  5773  0007C0  C0A9  F016         	movff	sprintf@val+1,___lldiv@dividend+1
  5774  0007C4  C0AA  F017         	movff	sprintf@val+2,___lldiv@dividend+2
  5775  0007C8  C0AB  F018         	movff	sprintf@val+3,___lldiv@dividend+3
  5776  0007CC  0100               	movlb	0	; () banked
  5777  0007CE  51B5               	movf	sprintf@c& (0+255),w,b
  5778  0007D0  0D04               	mullw	4
  5779  0007D2  0ED7               	movlw	low _dpowers
  5780  0007D4  24F3               	addwf	prodl,w,c
  5781  0007D6  6EF6               	movwf	tblptrl,c
  5782  0007D8  0EFE               	movlw	high _dpowers
  5783  0007DA  20F4               	addwfc	prodh,w,c
  5784  0007DC  6EF7               	movwf	tblptrh,c
  5785  0007DE                     	if	0	;There are less than 3 active tblptr bytes
  5786  0007DE                     	endif
  5787  0007DE  0009               	tblrd		*+
  5788  0007E0  CFF5 F019          	movff	tablat,___lldiv@divisor
  5789  0007E4  0009               	tblrd		*+
  5790  0007E6  CFF5 F01A          	movff	tablat,___lldiv@divisor+1
  5791  0007EA  0009               	tblrd		*+
  5792  0007EC  CFF5 F01B          	movff	tablat,___lldiv@divisor+2
  5793  0007F0  000A               	tblrd		*-
  5794  0007F2  CFF5 F01C          	movff	tablat,___lldiv@divisor+3
  5795  0007F6  ECE6  F012         	call	___lldiv	;wreg free
  5796  0007FA  C015  F0A4         	movff	?___lldiv,sprintf@tmpval
  5797  0007FE  C016  F0A5         	movff	?___lldiv+1,sprintf@tmpval+1
  5798  000802  C017  F0A6         	movff	?___lldiv+2,sprintf@tmpval+2
  5799  000806  C018  F0A7         	movff	?___lldiv+3,sprintf@tmpval+3
  5800                           
  5801                           ;doprnt.c: 1230: tmpval.vd %= 10;
  5802  00080A  C0A4  F022         	movff	sprintf@tmpval,___llmod@dividend
  5803  00080E  C0A5  F023         	movff	sprintf@tmpval+1,___llmod@dividend+1
  5804  000812  C0A6  F024         	movff	sprintf@tmpval+2,___llmod@dividend+2
  5805  000816  C0A7  F025         	movff	sprintf@tmpval+3,___llmod@dividend+3
  5806  00081A  0E0A               	movlw	10
  5807  00081C  6E26               	movwf	___llmod@divisor,c
  5808  00081E  0E00               	movlw	0
  5809  000820  6E27               	movwf	___llmod@divisor+1,c
  5810  000822  0E00               	movlw	0
  5811  000824  6E28               	movwf	___llmod@divisor+2,c
  5812  000826  0E00               	movlw	0
  5813  000828  6E29               	movwf	___llmod@divisor+3,c
  5814  00082A  ECFC  F013         	call	___llmod	;wreg free
  5815  00082E  C022  F0A4         	movff	?___llmod,sprintf@tmpval
  5816  000832  C023  F0A5         	movff	?___llmod+1,sprintf@tmpval+1
  5817  000836  C024  F0A6         	movff	?___llmod+2,sprintf@tmpval+2
  5818  00083A  C025  F0A7         	movff	?___llmod+3,sprintf@tmpval+3
  5819                           
  5820                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  5821  00083E  0100               	movlb	0	; () banked
  5822  000840  51A4               	movf	sprintf@tmpval& (0+255),w,b
  5823  000842  0F30               	addlw	48
  5824  000844  C086  FFD9         	movff	sprintf@sp,fsr2l
  5825  000848  C087  FFDA         	movff	sprintf@sp+1,fsr2h
  5826  00084C  6EDF               	movwf	indf2,c
  5827                           
  5828                           ; BSR set to: 0
  5829  00084E  4B86               	infsnz	sprintf@sp& (0+255),f,b
  5830  000850  2B87               	incf	(sprintf@sp+1)& (0+255),f,b
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;doprnt.c: 1232: val %= dpowers[c];
  5834  000852  C0A8  F022         	movff	sprintf@val,___llmod@dividend
  5835  000856  C0A9  F023         	movff	sprintf@val+1,___llmod@dividend+1
  5836  00085A  C0AA  F024         	movff	sprintf@val+2,___llmod@dividend+2
  5837  00085E  C0AB  F025         	movff	sprintf@val+3,___llmod@dividend+3
  5838  000862  51B5               	movf	sprintf@c& (0+255),w,b
  5839  000864  0D04               	mullw	4
  5840  000866  0ED7               	movlw	low _dpowers
  5841  000868  24F3               	addwf	prodl,w,c
  5842  00086A  6EF6               	movwf	tblptrl,c
  5843  00086C  0EFE               	movlw	high _dpowers
  5844  00086E  20F4               	addwfc	prodh,w,c
  5845  000870  6EF7               	movwf	tblptrh,c
  5846  000872                     	if	0	;There are less than 3 active tblptr bytes
  5847  000872                     	endif
  5848  000872  0009               	tblrd		*+
  5849  000874  CFF5 F026          	movff	tablat,___llmod@divisor
  5850  000878  0009               	tblrd		*+
  5851  00087A  CFF5 F027          	movff	tablat,___llmod@divisor+1
  5852  00087E  0009               	tblrd		*+
  5853  000880  CFF5 F028          	movff	tablat,___llmod@divisor+2
  5854  000884  000A               	tblrd		*-
  5855  000886  CFF5 F029          	movff	tablat,___llmod@divisor+3
  5856  00088A  ECFC  F013         	call	___llmod	;wreg free
  5857  00088E  C022  F0A8         	movff	?___llmod,sprintf@val
  5858  000892  C023  F0A9         	movff	?___llmod+1,sprintf@val+1
  5859  000896  C024  F0AA         	movff	?___llmod+2,sprintf@val+2
  5860  00089A  C025  F0AB         	movff	?___llmod+3,sprintf@val+3
  5861  00089E                     l586:
  5862  00089E  0100               	movlb	0	; () banked
  5863  0008A0  07B5               	decf	sprintf@c& (0+255),f,b
  5864  0008A2  29B5               	incf	sprintf@c& (0+255),w,b
  5865  0008A4  B4D8               	btfsc	status,2,c
  5866  0008A6  D00C               	goto	l589
  5867  0008A8  D789               	goto	l587
  5868  0008AA                     
  5869                           ; BSR set to: 0
  5870                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  5871                           
  5872                           ; BSR set to: 0
  5873  0008AA  C086  FFD9         	movff	sprintf@sp,fsr2l
  5874  0008AE  C087  FFDA         	movff	sprintf@sp+1,fsr2h
  5875  0008B2  0E30               	movlw	48
  5876  0008B4  6EDF               	movwf	indf2,c
  5877                           
  5878                           ; BSR set to: 0
  5879  0008B6  4B86               	infsnz	sprintf@sp& (0+255),f,b
  5880  0008B8  2B87               	incf	(sprintf@sp+1)& (0+255),f,b
  5881                           
  5882                           ; BSR set to: 0
  5883                           ;doprnt.c: 1237: prec--;
  5884  0008BA  07B3               	decf	sprintf@prec& (0+255),f,b
  5885  0008BC  A0D8               	btfss	status,0,c
  5886  0008BE  07B4               	decf	(sprintf@prec+1)& (0+255),f,b
  5887  0008C0                     l589:
  5888                           
  5889                           ; BSR set to: 0
  5890                           
  5891                           ; BSR set to: 0
  5892  0008C0  51B3               	movf	sprintf@prec& (0+255),w,b
  5893  0008C2  11B4               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5894  0008C4  B4D8               	btfsc	status,2,c
  5895  0008C6  D112               	goto	u6610
  5896  0008C8  D7F0               	goto	l590
  5897  0008CA                     l549:
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;doprnt.c: 1246: }
  5901                           ;doprnt.c: 1253: {
  5902                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  5903                           
  5904                           ; BSR set to: 0
  5905  0008CA  C09E  FFD9         	movff	sprintf@ap,fsr2l
  5906  0008CE  C09F  FFDA         	movff	sprintf@ap+1,fsr2h
  5907  0008D2  CFDE F0A8          	movff	postinc2,sprintf@val
  5908  0008D6  CFDD F0A9          	movff	postdec2,sprintf@val+1
  5909  0008DA  0E00               	movlw	0
  5910  0008DC  BFA9               	btfsc	(sprintf@val+1)& (0+255),7,b
  5911  0008DE  0EFF               	movlw	-1
  5912  0008E0  6FAA               	movwf	(sprintf@val+2)& (0+255),b
  5913  0008E2  6FAB               	movwf	(sprintf@val+3)& (0+255),b
  5914                           
  5915                           ; BSR set to: 0
  5916  0008E4  0E02               	movlw	2
  5917  0008E6  279E               	addwf	sprintf@ap& (0+255),f,b
  5918  0008E8  0E00               	movlw	0
  5919  0008EA  239F               	addwfc	(sprintf@ap+1)& (0+255),f,b
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;doprnt.c: 1261: if((long)val < 0) {
  5923  0008EC  AFAB               	btfss	(sprintf@val+3)& (0+255),7,b
  5924  0008EE  D00A               	goto	l592
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;doprnt.c: 1262: flag |= 0x03;
  5928  0008F0  0E03               	movlw	3
  5929  0008F2  13A2               	iorwf	sprintf@flag& (0+255),f,b
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;doprnt.c: 1263: val = -val;
  5933  0008F4  1FAB               	comf	(sprintf@val+3)& (0+255),f,b
  5934  0008F6  1FAA               	comf	(sprintf@val+2)& (0+255),f,b
  5935  0008F8  1FA9               	comf	(sprintf@val+1)& (0+255),f,b
  5936  0008FA  6DA8               	negf	sprintf@val& (0+255),b
  5937  0008FC  0E00               	movlw	0
  5938  0008FE  23A9               	addwfc	(sprintf@val+1)& (0+255),f,b
  5939  000900  23AA               	addwfc	(sprintf@val+2)& (0+255),f,b
  5940  000902  23AB               	addwfc	(sprintf@val+3)& (0+255),f,b
  5941  000904                     l592:
  5942                           
  5943                           ; BSR set to: 0
  5944                           ;doprnt.c: 1264: }
  5945                           ;doprnt.c: 1266: }
  5946                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  5947                           
  5948                           ; BSR set to: 0
  5949  000904  51B3               	movf	sprintf@prec& (0+255),w,b
  5950  000906  11B4               	iorwf	(sprintf@prec+1)& (0+255),w,b
  5951  000908  A4D8               	btfss	status,2,c
  5952  00090A  D008               	goto	l593
  5953                           
  5954                           ; BSR set to: 0
  5955  00090C  51A8               	movf	sprintf@val& (0+255),w,b
  5956  00090E  11A9               	iorwf	(sprintf@val+1)& (0+255),w,b
  5957  000910  11AA               	iorwf	(sprintf@val+2)& (0+255),w,b
  5958  000912  11AB               	iorwf	(sprintf@val+3)& (0+255),w,b
  5959  000914  A4D8               	btfss	status,2,c
  5960  000916  D002               	goto	l593
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;doprnt.c: 1291: prec++;
  5964  000918  4BB3               	infsnz	sprintf@prec& (0+255),f,b
  5965  00091A  2BB4               	incf	(sprintf@prec+1)& (0+255),f,b
  5966  00091C                     l593:
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5970                           
  5971                           ; BSR set to: 0
  5972  00091C  0E01               	movlw	1
  5973  00091E  6FB5               	movwf	sprintf@c& (0+255),b
  5974  000920                     l5911:
  5975                           
  5976                           ; BSR set to: 0
  5977  000920  0E0A               	movlw	10
  5978  000922  19B5               	xorwf	sprintf@c& (0+255),w,b
  5979  000924  B4D8               	btfsc	status,2,c
  5980  000926  D018               	goto	u6500
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;doprnt.c: 1306: if(val < dpowers[c])
  5984                           
  5985                           ; BSR set to: 0
  5986                           
  5987                           ; BSR set to: 0
  5988  000928  51B5               	movf	sprintf@c& (0+255),w,b
  5989  00092A  0D04               	mullw	4
  5990  00092C  0ED7               	movlw	low _dpowers
  5991  00092E  24F3               	addwf	prodl,w,c
  5992  000930  6EF6               	movwf	tblptrl,c
  5993  000932  0EFE               	movlw	high _dpowers
  5994  000934  20F4               	addwfc	prodh,w,c
  5995  000936  6EF7               	movwf	tblptrh,c
  5996  000938                     	if	0	;There are less than 3 active tblptr bytes
  5997  000938                     	endif
  5998  000938  0009               	tblrd		*+
  5999  00093A  50F5               	movf	tablat,w,c
  6000  00093C  5DA8               	subwf	sprintf@val& (0+255),w,b
  6001  00093E  0009               	tblrd		*+
  6002  000940  50F5               	movf	tablat,w,c
  6003  000942  59A9               	subwfb	(sprintf@val+1)& (0+255),w,b
  6004  000944  0009               	tblrd		*+
  6005  000946  50F5               	movf	tablat,w,c
  6006  000948  59AA               	subwfb	(sprintf@val+2)& (0+255),w,b
  6007  00094A  0009               	tblrd		*+
  6008  00094C  50F5               	movf	tablat,w,c
  6009  00094E  59AB               	subwfb	(sprintf@val+3)& (0+255),w,b
  6010  000950  A0D8               	btfss	status,0,c
  6011  000952  D002               	goto	u6500
  6012                           
  6013                           ; BSR set to: 0
  6014                           
  6015                           ; BSR set to: 0
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;doprnt.c: 1307: break;
  6019  000954  2BB5               	incf	sprintf@c& (0+255),f,b
  6020  000956  D7E4               	goto	l5911
  6021  000958                     u6500:
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;doprnt.c: 1339: if(c < prec)
  6025                           
  6026                           ; BSR set to: 0
  6027  000958  0E80               	movlw	128
  6028  00095A  BFB5               	btfsc	sprintf@c& (0+255),7,b
  6029  00095C  0E7F               	movlw	127
  6030  00095E  6F93               	movwf	??_sprintf& (0+255),b
  6031  000960  51B3               	movf	sprintf@prec& (0+255),w,b
  6032  000962  5DB5               	subwf	sprintf@c& (0+255),w,b
  6033  000964  51B4               	movf	(sprintf@prec+1)& (0+255),w,b
  6034  000966  0A80               	xorlw	128
  6035  000968  5993               	subwfb	??_sprintf& (0+255),w,b
  6036  00096A  B0D8               	btfsc	status,0,c
  6037  00096C  D003               	goto	l597
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;doprnt.c: 1340: c = prec;
  6041  00096E  C0B3  F0B5         	movff	sprintf@prec,sprintf@c
  6042  000972  D010               	goto	l599
  6043  000974                     l597:
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;doprnt.c: 1341: else if(prec < c)
  6047                           
  6048                           ; BSR set to: 0
  6049  000974  51B4               	movf	(sprintf@prec+1)& (0+255),w,b
  6050  000976  0A80               	xorlw	128
  6051  000978  6F93               	movwf	??_sprintf& (0+255),b
  6052  00097A  51B5               	movf	sprintf@c& (0+255),w,b
  6053  00097C  5DB3               	subwf	sprintf@prec& (0+255),w,b
  6054  00097E  0E80               	movlw	128
  6055  000980  BFB5               	btfsc	sprintf@c& (0+255),7,b
  6056  000982  0E7F               	movlw	127
  6057  000984  5993               	subwfb	??_sprintf& (0+255),w,b
  6058  000986  B0D8               	btfsc	status,0,c
  6059  000988  D005               	goto	l599
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;doprnt.c: 1342: prec = c;
  6063  00098A  51B5               	movf	sprintf@c& (0+255),w,b
  6064  00098C  6FB3               	movwf	sprintf@prec& (0+255),b
  6065  00098E  6BB4               	clrf	(sprintf@prec+1)& (0+255),b
  6066  000990  BFB3               	btfsc	sprintf@prec& (0+255),7,b
  6067  000992  07B4               	decf	(sprintf@prec+1)& (0+255),f,b
  6068  000994                     l599:
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6072                           
  6073                           ; BSR set to: 0
  6074                           
  6075                           ; BSR set to: 0
  6076  000994  51AE               	movf	sprintf@width& (0+255),w,b
  6077  000996  11AF               	iorwf	(sprintf@width+1)& (0+255),w,b
  6078  000998  B4D8               	btfsc	status,2,c
  6079  00099A  D00D               	goto	l600
  6080                           
  6081                           ; BSR set to: 0
  6082  00099C  0E03               	movlw	3
  6083  00099E  15A2               	andwf	sprintf@flag& (0+255),w,b
  6084  0009A0  6F93               	movwf	??_sprintf& (0+255),b
  6085  0009A2  0E00               	movlw	0
  6086  0009A4  15A3               	andwf	(sprintf@flag+1)& (0+255),w,b
  6087  0009A6  6F94               	movwf	(??_sprintf+1)& (0+255),b
  6088  0009A8  5193               	movf	??_sprintf& (0+255),w,b
  6089  0009AA  1194               	iorwf	(??_sprintf+1)& (0+255),w,b
  6090  0009AC  B4D8               	btfsc	status,2,c
  6091  0009AE  D003               	goto	l600
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;doprnt.c: 1346: width--;
  6095  0009B0  07AE               	decf	sprintf@width& (0+255),f,b
  6096  0009B2  A0D8               	btfss	status,0,c
  6097  0009B4  07AF               	decf	(sprintf@width+1)& (0+255),f,b
  6098  0009B6                     l600:
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;doprnt.c: 1348: if(flag & 0x4000) {
  6102                           
  6103                           ; BSR set to: 0
  6104  0009B6  ADA3               	btfss	(sprintf@flag+1)& (0+255),6,b
  6105  0009B8  D013               	goto	l603
  6106                           
  6107                           ; BSR set to: 0
  6108                           ;doprnt.c: 1349: if(width > prec)
  6109  0009BA  51AE               	movf	sprintf@width& (0+255),w,b
  6110  0009BC  5DB3               	subwf	sprintf@prec& (0+255),w,b
  6111  0009BE  51B4               	movf	(sprintf@prec+1)& (0+255),w,b
  6112  0009C0  0A80               	xorlw	128
  6113  0009C2  6F93               	movwf	??_sprintf& (0+255),b
  6114  0009C4  51AF               	movf	(sprintf@width+1)& (0+255),w,b
  6115  0009C6  0A80               	xorlw	128
  6116  0009C8  5993               	subwfb	??_sprintf& (0+255),w,b
  6117  0009CA  B0D8               	btfsc	status,0,c
  6118  0009CC  D005               	goto	l602
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;doprnt.c: 1350: width -= prec;
  6122  0009CE  51B3               	movf	sprintf@prec& (0+255),w,b
  6123  0009D0  5FAE               	subwf	sprintf@width& (0+255),f,b
  6124  0009D2  51B4               	movf	(sprintf@prec+1)& (0+255),w,b
  6125  0009D4  5BAF               	subwfb	(sprintf@width+1)& (0+255),f,b
  6126  0009D6  D004               	goto	l603
  6127  0009D8                     l602:
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;doprnt.c: 1351: else
  6131                           ;doprnt.c: 1352: width = 0;
  6132                           
  6133                           ; BSR set to: 0
  6134  0009D8  0E00               	movlw	0
  6135  0009DA  6FAF               	movwf	(sprintf@width+1)& (0+255),b
  6136  0009DC  0E00               	movlw	0
  6137  0009DE  6FAE               	movwf	sprintf@width& (0+255),b
  6138  0009E0                     l603:
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;doprnt.c: 1353: }
  6142                           ;doprnt.c: 1381: if(width > c)
  6143                           
  6144                           ; BSR set to: 0
  6145                           
  6146                           ; BSR set to: 0
  6147  0009E0  0E80               	movlw	128
  6148  0009E2  BFB5               	btfsc	sprintf@c& (0+255),7,b
  6149  0009E4  0E7F               	movlw	127
  6150  0009E6  6F93               	movwf	??_sprintf& (0+255),b
  6151  0009E8  51AE               	movf	sprintf@width& (0+255),w,b
  6152  0009EA  5DB5               	subwf	sprintf@c& (0+255),w,b
  6153  0009EC  51AF               	movf	(sprintf@width+1)& (0+255),w,b
  6154  0009EE  0A80               	xorlw	128
  6155  0009F0  5993               	subwfb	??_sprintf& (0+255),w,b
  6156  0009F2  B0D8               	btfsc	status,0,c
  6157  0009F4  D007               	goto	l604
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;doprnt.c: 1382: width -= c;
  6161  0009F6  51B5               	movf	sprintf@c& (0+255),w,b
  6162  0009F8  5FAE               	subwf	sprintf@width& (0+255),f,b
  6163  0009FA  0E00               	movlw	0
  6164  0009FC  BFB5               	btfsc	sprintf@c& (0+255),7,b
  6165  0009FE  0EFF               	movlw	255
  6166  000A00  5BAF               	subwfb	(sprintf@width+1)& (0+255),f,b
  6167  000A02  D004               	goto	l605
  6168  000A04                     l604:
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;doprnt.c: 1383: else
  6172                           ;doprnt.c: 1384: width = 0;
  6173                           
  6174                           ; BSR set to: 0
  6175  000A04  0E00               	movlw	0
  6176  000A06  6FAF               	movwf	(sprintf@width+1)& (0+255),b
  6177  000A08  0E00               	movlw	0
  6178  000A0A  6FAE               	movwf	sprintf@width& (0+255),b
  6179  000A0C                     l605:
  6180                           
  6181                           ; BSR set to: 0
  6182                           ;doprnt.c: 1422: {
  6183                           ;doprnt.c: 1424: if(width
  6184                           ;doprnt.c: 1428: )
  6185                           
  6186                           ; BSR set to: 0
  6187  000A0C  51AE               	movf	sprintf@width& (0+255),w,b
  6188  000A0E  11AF               	iorwf	(sprintf@width+1)& (0+255),w,b
  6189  000A10  B4D8               	btfsc	status,2,c
  6190  000A12  D00F               	goto	u6590
  6191  000A14                     u6580:
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  6195                           
  6196                           ; BSR set to: 0
  6197                           
  6198                           ;doprnt.c: 1429: do
  6199  000A14  C086  FFD9         	movff	sprintf@sp,fsr2l
  6200  000A18  C087  FFDA         	movff	sprintf@sp+1,fsr2h
  6201  000A1C  0E20               	movlw	32
  6202  000A1E  6EDF               	movwf	indf2,c
  6203                           
  6204                           ; BSR set to: 0
  6205  000A20  4B86               	infsnz	sprintf@sp& (0+255),f,b
  6206  000A22  2B87               	incf	(sprintf@sp+1)& (0+255),f,b
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;doprnt.c: 1431: while(--width);
  6210  000A24  07AE               	decf	sprintf@width& (0+255),f,b
  6211  000A26  A0D8               	btfss	status,0,c
  6212  000A28  07AF               	decf	(sprintf@width+1)& (0+255),f,b
  6213  000A2A  51AE               	movf	sprintf@width& (0+255),w,b
  6214  000A2C  11AF               	iorwf	(sprintf@width+1)& (0+255),w,b
  6215  000A2E  A4D8               	btfss	status,2,c
  6216  000A30  D7F1               	goto	u6580
  6217  000A32                     u6590:
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;doprnt.c: 1438: if(flag & 0x03)
  6221                           
  6222                           ; BSR set to: 0
  6223                           
  6224                           ; BSR set to: 0
  6225  000A32  0E03               	movlw	3
  6226  000A34  15A2               	andwf	sprintf@flag& (0+255),w,b
  6227  000A36  6F93               	movwf	??_sprintf& (0+255),b
  6228  000A38  0E00               	movlw	0
  6229  000A3A  15A3               	andwf	(sprintf@flag+1)& (0+255),w,b
  6230  000A3C  6F94               	movwf	(??_sprintf+1)& (0+255),b
  6231  000A3E  5193               	movf	??_sprintf& (0+255),w,b
  6232  000A40  1194               	iorwf	(??_sprintf+1)& (0+255),w,b
  6233  000A42  B4D8               	btfsc	status,2,c
  6234  000A44  D04B               	goto	l610
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  6238  000A46  C086  FFD9         	movff	sprintf@sp,fsr2l
  6239  000A4A  C087  FFDA         	movff	sprintf@sp+1,fsr2h
  6240  000A4E  0E2D               	movlw	45
  6241  000A50  6EDF               	movwf	indf2,c
  6242  000A52  D042               	goto	l5969
  6243  000A54                     l5965:
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;doprnt.c: 1478: {
  6247                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6248  000A54  C0B3  F093         	movff	sprintf@prec,??_sprintf
  6249  000A58  C0B4  F094         	movff	sprintf@prec+1,??_sprintf+1
  6250  000A5C  90D8               	bcf	status,0,c
  6251  000A5E  3793               	rlcf	??_sprintf& (0+255),f,b
  6252  000A60  3794               	rlcf	(??_sprintf+1)& (0+255),f,b
  6253  000A62  90D8               	bcf	status,0,c
  6254  000A64  3793               	rlcf	??_sprintf& (0+255),f,b
  6255  000A66  3794               	rlcf	(??_sprintf+1)& (0+255),f,b
  6256  000A68  0ED7               	movlw	low _dpowers
  6257  000A6A  2593               	addwf	??_sprintf& (0+255),w,b
  6258  000A6C  6EF6               	movwf	tblptrl,c
  6259  000A6E  0EFE               	movlw	high _dpowers
  6260  000A70  2194               	addwfc	(??_sprintf+1)& (0+255),w,b
  6261  000A72  6EF7               	movwf	tblptrh,c
  6262  000A74                     	if	0	;There are less than 3 active tblptr bytes
  6263  000A74                     	endif
  6264  000A74  0009               	tblrd		*+
  6265  000A76  CFF5 F019          	movff	tablat,___lldiv@divisor
  6266  000A7A  0009               	tblrd		*+
  6267  000A7C  CFF5 F01A          	movff	tablat,___lldiv@divisor+1
  6268  000A80  0009               	tblrd		*+
  6269  000A82  CFF5 F01B          	movff	tablat,___lldiv@divisor+2
  6270  000A86  000A               	tblrd		*-
  6271  000A88  CFF5 F01C          	movff	tablat,___lldiv@divisor+3
  6272  000A8C  C0A8  F015         	movff	sprintf@val,___lldiv@dividend
  6273  000A90  C0A9  F016         	movff	sprintf@val+1,___lldiv@dividend+1
  6274  000A94  C0AA  F017         	movff	sprintf@val+2,___lldiv@dividend+2
  6275  000A98  C0AB  F018         	movff	sprintf@val+3,___lldiv@dividend+3
  6276  000A9C  ECE6  F012         	call	___lldiv	;wreg free
  6277  000AA0  C015  F022         	movff	?___lldiv,___llmod@dividend
  6278  000AA4  C016  F023         	movff	?___lldiv+1,___llmod@dividend+1
  6279  000AA8  C017  F024         	movff	?___lldiv+2,___llmod@dividend+2
  6280  000AAC  C018  F025         	movff	?___lldiv+3,___llmod@dividend+3
  6281  000AB0  0E0A               	movlw	10
  6282  000AB2  6E26               	movwf	___llmod@divisor,c
  6283  000AB4  0E00               	movlw	0
  6284  000AB6  6E27               	movwf	___llmod@divisor+1,c
  6285  000AB8  0E00               	movlw	0
  6286  000ABA  6E28               	movwf	___llmod@divisor+2,c
  6287  000ABC  0E00               	movlw	0
  6288  000ABE  6E29               	movwf	___llmod@divisor+3,c
  6289  000AC0  ECFC  F013         	call	___llmod	;wreg free
  6290  000AC4  5022               	movf	?___llmod,w,c
  6291  000AC6  0F30               	addlw	48
  6292  000AC8  0100               	movlb	0	; () banked
  6293  000ACA  6FB5               	movwf	sprintf@c& (0+255),b
  6294                           
  6295                           ; BSR set to: 0
  6296                           ;doprnt.c: 1523: }
  6297                           ;doprnt.c: 1524: ((*sp++ = (c)));
  6298  000ACC  C086  FFD9         	movff	sprintf@sp,fsr2l
  6299  000AD0  C087  FFDA         	movff	sprintf@sp+1,fsr2h
  6300  000AD4  C0B5  FFDF         	movff	sprintf@c,indf2
  6301  000AD8                     l5969:
  6302                           
  6303                           ; BSR set to: 0
  6304  000AD8  4B86               	infsnz	sprintf@sp& (0+255),f,b
  6305  000ADA  2B87               	incf	(sprintf@sp+1)& (0+255),f,b
  6306  000ADC                     l610:
  6307                           
  6308                           ; BSR set to: 0
  6309                           
  6310                           ; BSR set to: 0
  6311  000ADC  07B3               	decf	sprintf@prec& (0+255),f,b
  6312  000ADE  A0D8               	btfss	status,0,c
  6313  000AE0  07B4               	decf	(sprintf@prec+1)& (0+255),f,b
  6314  000AE2  29B3               	incf	sprintf@prec& (0+255),w,b
  6315  000AE4  E1B7               	bnz	l5965
  6316  000AE6  29B4               	incf	(sprintf@prec+1)& (0+255),w,b
  6317  000AE8  A4D8               	btfss	status,2,c
  6318  000AEA  D7B4               	goto	l611
  6319  000AEC                     u6610:
  6320                           
  6321                           ; BSR set to: 0
  6322                           
  6323                           ; BSR set to: 0
  6324                           
  6325                           ; BSR set to: 0
  6326  000AEC  5188               	movf	sprintf@f& (0+255),w,b
  6327  000AEE  6F93               	movwf	??_sprintf& (0+255),b
  6328  000AF0  5189               	movf	(sprintf@f+1)& (0+255),w,b
  6329  000AF2  6F94               	movwf	(??_sprintf+1)& (0+255),b
  6330  000AF4  4B88               	infsnz	sprintf@f& (0+255),f,b
  6331  000AF6  2B89               	incf	(sprintf@f+1)& (0+255),f,b
  6332  000AF8  C093  FFF6         	movff	??_sprintf,tblptrl
  6333  000AFC  C094  FFF7         	movff	??_sprintf+1,tblptrh
  6334  000B00  0E00               	movlw	low (__mediumconst shr (0+16))
  6335  000B02  6EF8               	movwf	tblptru,c
  6336  000B04  0E0F               	movlw	(high __ramtop+-1)
  6337  000B06  64F7               	cpfsgt	tblptrh,c
  6338  000B08  D003               	bra	u6627
  6339  000B0A  0008               	tblrd		*
  6340  000B0C  50F5               	movf	tablat,w,c
  6341  000B0E  D005               	bra	u6620
  6342  000B10                     u6627:
  6343  000B10  CFF6 FFE1          	movff	tblptrl,fsr1l
  6344  000B14  CFF7 FFE2          	movff	tblptrh,fsr1h
  6345  000B18  50E7               	movf	indf1,w,c
  6346  000B1A                     u6620:
  6347  000B1A  0100               	movlb	0	; () banked
  6348  000B1C  6FB5               	movwf	sprintf@c& (0+255),b
  6349  000B1E  51B5               	movf	sprintf@c& (0+255),w,b
  6350  000B20  A4D8               	btfss	status,2,c
  6351  000B22  EF10  F000         	goto	l521
  6352  000B26                     u6630:
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;doprnt.c: 1538: *sp = 0;
  6356                           
  6357                           ; BSR set to: 0
  6358                           
  6359                           ;doprnt.c: 1525: }
  6360                           ;doprnt.c: 1533: }
  6361                           ;doprnt.c: 1535: alldone:
  6362                           
  6363                           ; BSR set to: 0
  6364  000B26  C086  FFD9         	movff	sprintf@sp,fsr2l
  6365  000B2A  C087  FFDA         	movff	sprintf@sp+1,fsr2h
  6366  000B2E  0E00               	movlw	0
  6367  000B30  6EDF               	movwf	indf2,c
  6368  000B32  0012               	return	
  6369  000B34                     __end_of_sprintf:
  6370                           	opt stack 0
  6371                           tblptru	equ	0xFF8
  6372                           tblptrh	equ	0xFF7
  6373                           tblptrl	equ	0xFF6
  6374                           tablat	equ	0xFF5
  6375                           prodh	equ	0xFF4
  6376                           prodl	equ	0xFF3
  6377                           intcon	equ	0xFF2
  6378                           postinc0	equ	0xFEE
  6379                           wreg	equ	0xFE8
  6380                           indf1	equ	0xFE7
  6381                           postdec1	equ	0xFE5
  6382                           fsr1h	equ	0xFE2
  6383                           fsr1l	equ	0xFE1
  6384                           indf2	equ	0xFDF
  6385                           postinc2	equ	0xFDE
  6386                           postdec2	equ	0xFDD
  6387                           fsr2h	equ	0xFDA
  6388                           fsr2l	equ	0xFD9
  6389                           status	equ	0xFD8
  6390                           
  6391 ;; *************** function _scale *****************
  6392 ;; Defined at:
  6393 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;  scl             1    wreg     char 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  scl             1   61[COMRAM] char 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  3   55[COMRAM] char 
  6400 ;; Registers used:
  6401 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6407 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6408 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;Total ram usage:        7 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    3
  6414 ;; This function calls:
  6415 ;;		___awdiv
  6416 ;;		___awmod
  6417 ;;		___ftmul
  6418 ;;		___wmul
  6419 ;; This function is called by:
  6420 ;;		_sprintf
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           	psect	text18
  6425  001052                     __ptext18:
  6426                           	opt stack 0
  6427  001052                     _scale:
  6428                           	opt stack 26
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;incstack = 0
  6432                           ;scale@scl stored from wreg
  6433  001052  6E3E               	movwf	scale@scl,c
  6434                           
  6435                           ;doprnt.c: 428: if(scl < 0) {
  6436  001054  AE3E               	btfss	scale@scl,7,c
  6437  001056  D101               	goto	l510
  6438                           
  6439                           ;doprnt.c: 429: scl = -scl;
  6440  001058  6C3E               	negf	scale@scl,c
  6441                           
  6442                           ;doprnt.c: 430: if(scl>=110)
  6443  00105A  503E               	movf	scale@scl,w,c
  6444  00105C  0A80               	xorlw	128
  6445  00105E  0F12               	addlw	-238
  6446  001060  A0D8               	btfss	status,0,c
  6447  001062  D091               	goto	l511
  6448                           
  6449                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6450  001064  0E00               	movlw	0
  6451  001066  6E26               	movwf	___wmul@multiplicand+1,c
  6452  001068  0E03               	movlw	3
  6453  00106A  6E25               	movwf	___wmul@multiplicand,c
  6454  00106C  0E00               	movlw	0
  6455  00106E  6E1E               	movwf	___awdiv@divisor+1,c
  6456  001070  0E0A               	movlw	10
  6457  001072  6E1D               	movwf	___awdiv@divisor,c
  6458  001074  0E00               	movlw	0
  6459  001076  6E18               	movwf	___awmod@divisor+1,c
  6460  001078  0E64               	movlw	100
  6461  00107A  6E17               	movwf	___awmod@divisor,c
  6462  00107C  503E               	movf	scale@scl,w,c
  6463  00107E  6E15               	movwf	___awmod@dividend,c
  6464  001080  6A16               	clrf	___awmod@dividend+1,c
  6465  001082  BE15               	btfsc	___awmod@dividend,7,c
  6466  001084  0616               	decf	___awmod@dividend+1,f,c
  6467  001086  EC27  F013         	call	___awmod	;wreg free
  6468  00108A  C015  F01B         	movff	?___awmod,___awdiv@dividend
  6469  00108E  C016  F01C         	movff	?___awmod+1,___awdiv@dividend+1
  6470  001092  ECA4  F012         	call	___awdiv	;wreg free
  6471  001096  0E09               	movlw	9
  6472  001098  241B               	addwf	?___awdiv,w,c
  6473  00109A  6E23               	movwf	___wmul@multiplier,c
  6474  00109C  0E00               	movlw	0
  6475  00109E  201C               	addwfc	?___awdiv+1,w,c
  6476  0010A0  6E24               	movwf	___wmul@multiplier+1,c
  6477  0010A2  EC30  F016         	call	___wmul	;wreg free
  6478  0010A6  0E26               	movlw	low __npowers_
  6479  0010A8  2423               	addwf	?___wmul,w,c
  6480  0010AA  6EF6               	movwf	tblptrl,c
  6481  0010AC  0EFF               	movlw	high __npowers_
  6482  0010AE  2024               	addwfc	?___wmul+1,w,c
  6483  0010B0  6EF7               	movwf	tblptrh,c
  6484  0010B2                     	if	0	;There are less than 3 active tblptr bytes
  6485  0010B2                     	endif
  6486  0010B2  0009               	tblrd		*+
  6487  0010B4  CFF5 F02C          	movff	tablat,___ftmul@f2
  6488  0010B8  0009               	tblrd		*+
  6489  0010BA  CFF5 F02D          	movff	tablat,___ftmul@f2+1
  6490  0010BE  000A               	tblrd		*-
  6491  0010C0  CFF5 F02E          	movff	tablat,___ftmul@f2+2
  6492  0010C4  0E00               	movlw	0
  6493  0010C6  6E1E               	movwf	___awdiv@divisor+1,c
  6494  0010C8  0E64               	movlw	100
  6495  0010CA  6E1D               	movwf	___awdiv@divisor,c
  6496  0010CC  503E               	movf	scale@scl,w,c
  6497  0010CE  6E1B               	movwf	___awdiv@dividend,c
  6498  0010D0  6A1C               	clrf	___awdiv@dividend+1,c
  6499  0010D2  BE1B               	btfsc	___awdiv@dividend,7,c
  6500  0010D4  061C               	decf	___awdiv@dividend+1,f,c
  6501  0010D6  ECA4  F012         	call	___awdiv	;wreg free
  6502  0010DA  0E12               	movlw	18
  6503  0010DC  241B               	addwf	?___awdiv,w,c
  6504  0010DE  6E23               	movwf	___wmul@multiplier,c
  6505  0010E0  0E00               	movlw	0
  6506  0010E2  201C               	addwfc	?___awdiv+1,w,c
  6507  0010E4  6E24               	movwf	___wmul@multiplier+1,c
  6508  0010E6  0E00               	movlw	0
  6509  0010E8  6E26               	movwf	___wmul@multiplicand+1,c
  6510  0010EA  0E03               	movlw	3
  6511  0010EC  6E25               	movwf	___wmul@multiplicand,c
  6512  0010EE  EC30  F016         	call	___wmul	;wreg free
  6513  0010F2  0E26               	movlw	low __npowers_
  6514  0010F4  2423               	addwf	?___wmul,w,c
  6515  0010F6  6EF6               	movwf	tblptrl,c
  6516  0010F8  0EFF               	movlw	high __npowers_
  6517  0010FA  2024               	addwfc	?___wmul+1,w,c
  6518  0010FC  6EF7               	movwf	tblptrh,c
  6519  0010FE                     	if	0	;There are less than 3 active tblptr bytes
  6520  0010FE                     	endif
  6521  0010FE  0009               	tblrd		*+
  6522  001100  CFF5 F029          	movff	tablat,___ftmul@f1
  6523  001104  0009               	tblrd		*+
  6524  001106  CFF5 F02A          	movff	tablat,___ftmul@f1+1
  6525  00110A  000A               	tblrd		*-
  6526  00110C  CFF5 F02B          	movff	tablat,___ftmul@f1+2
  6527  001110  ECFF  F00F         	call	___ftmul	;wreg free
  6528  001114  C029  F03B         	movff	?___ftmul,_scale$1966
  6529  001118  C02A  F03C         	movff	?___ftmul+1,_scale$1966+1
  6530  00111C  C02B  F03D         	movff	?___ftmul+2,_scale$1966+2
  6531                           
  6532                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6533  001120  C03B  F029         	movff	_scale$1966,___ftmul@f1
  6534  001124  C03C  F02A         	movff	_scale$1966+1,___ftmul@f1+1
  6535  001128  C03D  F02B         	movff	_scale$1966+2,___ftmul@f1+2
  6536  00112C  0E00               	movlw	0
  6537  00112E  6E26               	movwf	___wmul@multiplicand+1,c
  6538  001130  0E03               	movlw	3
  6539  001132  6E25               	movwf	___wmul@multiplicand,c
  6540  001134  0E00               	movlw	0
  6541  001136  6E18               	movwf	___awmod@divisor+1,c
  6542  001138  0E0A               	movlw	10
  6543  00113A  6E17               	movwf	___awmod@divisor,c
  6544  00113C  503E               	movf	scale@scl,w,c
  6545  00113E  6E15               	movwf	___awmod@dividend,c
  6546  001140  6A16               	clrf	___awmod@dividend+1,c
  6547  001142  BE15               	btfsc	___awmod@dividend,7,c
  6548  001144  0616               	decf	___awmod@dividend+1,f,c
  6549  001146  EC27  F013         	call	___awmod	;wreg free
  6550  00114A  C015  F023         	movff	?___awmod,___wmul@multiplier
  6551  00114E  C016  F024         	movff	?___awmod+1,___wmul@multiplier+1
  6552  001152  EC30  F016         	call	___wmul	;wreg free
  6553  001156  0E26               	movlw	low __npowers_
  6554  001158  2423               	addwf	?___wmul,w,c
  6555  00115A  6EF6               	movwf	tblptrl,c
  6556  00115C  0EFF               	movlw	high __npowers_
  6557  00115E  2024               	addwfc	?___wmul+1,w,c
  6558  001160  6EF7               	movwf	tblptrh,c
  6559  001162                     	if	0	;There are less than 3 active tblptr bytes
  6560  001162                     	endif
  6561  001162  0009               	tblrd		*+
  6562  001164  CFF5 F02C          	movff	tablat,___ftmul@f2
  6563  001168  0009               	tblrd		*+
  6564  00116A  CFF5 F02D          	movff	tablat,___ftmul@f2+1
  6565  00116E  000A               	tblrd		*-
  6566  001170  CFF5 F02E          	movff	tablat,___ftmul@f2+2
  6567  001174  ECFF  F00F         	call	___ftmul	;wreg free
  6568  001178  C029  F038         	movff	?___ftmul,?_scale
  6569  00117C  C02A  F039         	movff	?___ftmul+1,?_scale+1
  6570  001180  C02B  F03A         	movff	?___ftmul+2,?_scale+2
  6571  001184  0012               	return	
  6572  001186                     l511:
  6573                           
  6574                           ;doprnt.c: 432: else if(scl > 10)
  6575  001186  503E               	movf	scale@scl,w,c
  6576  001188  0A80               	xorlw	128
  6577  00118A  0F75               	addlw	-139
  6578  00118C  A0D8               	btfss	status,0,c
  6579  00118E  D053               	goto	l514
  6580                           
  6581                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  6582  001190  0E00               	movlw	0
  6583  001192  6E1E               	movwf	___awdiv@divisor+1,c
  6584  001194  0E0A               	movlw	10
  6585  001196  6E1D               	movwf	___awdiv@divisor,c
  6586  001198  503E               	movf	scale@scl,w,c
  6587  00119A  6E1B               	movwf	___awdiv@dividend,c
  6588  00119C  6A1C               	clrf	___awdiv@dividend+1,c
  6589  00119E  BE1B               	btfsc	___awdiv@dividend,7,c
  6590  0011A0  061C               	decf	___awdiv@dividend+1,f,c
  6591  0011A2  ECA4  F012         	call	___awdiv	;wreg free
  6592  0011A6  0E09               	movlw	9
  6593  0011A8  241B               	addwf	?___awdiv,w,c
  6594  0011AA  6E23               	movwf	___wmul@multiplier,c
  6595  0011AC  0E00               	movlw	0
  6596  0011AE  201C               	addwfc	?___awdiv+1,w,c
  6597  0011B0  6E24               	movwf	___wmul@multiplier+1,c
  6598  0011B2  0E00               	movlw	0
  6599  0011B4  6E26               	movwf	___wmul@multiplicand+1,c
  6600  0011B6  0E03               	movlw	3
  6601  0011B8  6E25               	movwf	___wmul@multiplicand,c
  6602  0011BA  EC30  F016         	call	___wmul	;wreg free
  6603  0011BE  0E26               	movlw	low __npowers_
  6604  0011C0  2423               	addwf	?___wmul,w,c
  6605  0011C2  6EF6               	movwf	tblptrl,c
  6606  0011C4  0EFF               	movlw	high __npowers_
  6607  0011C6  2024               	addwfc	?___wmul+1,w,c
  6608  0011C8  6EF7               	movwf	tblptrh,c
  6609  0011CA                     	if	0	;There are less than 3 active tblptr bytes
  6610  0011CA                     	endif
  6611  0011CA  0009               	tblrd		*+
  6612  0011CC  CFF5 F029          	movff	tablat,___ftmul@f1
  6613  0011D0  0009               	tblrd		*+
  6614  0011D2  CFF5 F02A          	movff	tablat,___ftmul@f1+1
  6615  0011D6  000A               	tblrd		*-
  6616  0011D8  CFF5 F02B          	movff	tablat,___ftmul@f1+2
  6617  0011DC  0E00               	movlw	0
  6618  0011DE  6E26               	movwf	___wmul@multiplicand+1,c
  6619  0011E0  0E03               	movlw	3
  6620  0011E2  6E25               	movwf	___wmul@multiplicand,c
  6621  0011E4  0E00               	movlw	0
  6622  0011E6  6E18               	movwf	___awmod@divisor+1,c
  6623  0011E8  0E0A               	movlw	10
  6624  0011EA  6E17               	movwf	___awmod@divisor,c
  6625  0011EC  503E               	movf	scale@scl,w,c
  6626  0011EE  6E15               	movwf	___awmod@dividend,c
  6627  0011F0  6A16               	clrf	___awmod@dividend+1,c
  6628  0011F2  BE15               	btfsc	___awmod@dividend,7,c
  6629  0011F4  0616               	decf	___awmod@dividend+1,f,c
  6630  0011F6  EC27  F013         	call	___awmod	;wreg free
  6631  0011FA  C015  F023         	movff	?___awmod,___wmul@multiplier
  6632  0011FE  C016  F024         	movff	?___awmod+1,___wmul@multiplier+1
  6633  001202  EC30  F016         	call	___wmul	;wreg free
  6634  001206  0E26               	movlw	low __npowers_
  6635  001208  2423               	addwf	?___wmul,w,c
  6636  00120A  6EF6               	movwf	tblptrl,c
  6637  00120C  0EFF               	movlw	high __npowers_
  6638  00120E  2024               	addwfc	?___wmul+1,w,c
  6639  001210  6EF7               	movwf	tblptrh,c
  6640  001212                     	if	0	;There are less than 3 active tblptr bytes
  6641  001212                     	endif
  6642  001212  0009               	tblrd		*+
  6643  001214  CFF5 F02C          	movff	tablat,___ftmul@f2
  6644  001218  0009               	tblrd		*+
  6645  00121A  CFF5 F02D          	movff	tablat,___ftmul@f2+1
  6646  00121E  000A               	tblrd		*-
  6647  001220  CFF5 F02E          	movff	tablat,___ftmul@f2+2
  6648  001224  ECFF  F00F         	call	___ftmul	;wreg free
  6649  001228  C029  F038         	movff	?___ftmul,?_scale
  6650  00122C  C02A  F039         	movff	?___ftmul+1,?_scale+1
  6651  001230  C02B  F03A         	movff	?___ftmul+2,?_scale+2
  6652  001234  0012               	return	
  6653  001236                     l514:
  6654                           
  6655                           ;doprnt.c: 434: return _npowers_[scl];
  6656  001236  503E               	movf	scale@scl,w,c
  6657  001238  0D03               	mullw	3
  6658  00123A  0E26               	movlw	low __npowers_
  6659  00123C  24F3               	addwf	prodl,w,c
  6660  00123E  6EF6               	movwf	tblptrl,c
  6661  001240  0EFF               	movlw	high __npowers_
  6662  001242  20F4               	addwfc	prodh,w,c
  6663  001244  6EF7               	movwf	tblptrh,c
  6664  001246                     	if	0	;There are less than 3 active tblptr bytes
  6665  001246                     	endif
  6666  001246  0009               	tblrd		*+
  6667  001248  CFF5 F038          	movff	tablat,?_scale
  6668  00124C  0009               	tblrd		*+
  6669  00124E  CFF5 F039          	movff	tablat,?_scale+1
  6670  001252  000A               	tblrd		*-
  6671  001254  CFF5 F03A          	movff	tablat,?_scale+2
  6672  001258  0012               	return	
  6673  00125A                     l510:
  6674                           
  6675                           ;doprnt.c: 435: }
  6676                           ;doprnt.c: 436: if(scl>=110)
  6677  00125A  503E               	movf	scale@scl,w,c
  6678  00125C  0A80               	xorlw	128
  6679  00125E  0F12               	addlw	-238
  6680  001260  A0D8               	btfss	status,0,c
  6681  001262  D091               	goto	l515
  6682                           
  6683                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6684  001264  0E00               	movlw	0
  6685  001266  6E26               	movwf	___wmul@multiplicand+1,c
  6686  001268  0E03               	movlw	3
  6687  00126A  6E25               	movwf	___wmul@multiplicand,c
  6688  00126C  0E00               	movlw	0
  6689  00126E  6E1E               	movwf	___awdiv@divisor+1,c
  6690  001270  0E0A               	movlw	10
  6691  001272  6E1D               	movwf	___awdiv@divisor,c
  6692  001274  0E00               	movlw	0
  6693  001276  6E18               	movwf	___awmod@divisor+1,c
  6694  001278  0E64               	movlw	100
  6695  00127A  6E17               	movwf	___awmod@divisor,c
  6696  00127C  503E               	movf	scale@scl,w,c
  6697  00127E  6E15               	movwf	___awmod@dividend,c
  6698  001280  6A16               	clrf	___awmod@dividend+1,c
  6699  001282  BE15               	btfsc	___awmod@dividend,7,c
  6700  001284  0616               	decf	___awmod@dividend+1,f,c
  6701  001286  EC27  F013         	call	___awmod	;wreg free
  6702  00128A  C015  F01B         	movff	?___awmod,___awdiv@dividend
  6703  00128E  C016  F01C         	movff	?___awmod+1,___awdiv@dividend+1
  6704  001292  ECA4  F012         	call	___awdiv	;wreg free
  6705  001296  0E09               	movlw	9
  6706  001298  241B               	addwf	?___awdiv,w,c
  6707  00129A  6E23               	movwf	___wmul@multiplier,c
  6708  00129C  0E00               	movlw	0
  6709  00129E  201C               	addwfc	?___awdiv+1,w,c
  6710  0012A0  6E24               	movwf	___wmul@multiplier+1,c
  6711  0012A2  EC30  F016         	call	___wmul	;wreg free
  6712  0012A6  0EFF               	movlw	low __powers_
  6713  0012A8  2423               	addwf	?___wmul,w,c
  6714  0012AA  6EF6               	movwf	tblptrl,c
  6715  0012AC  0EFE               	movlw	high __powers_
  6716  0012AE  2024               	addwfc	?___wmul+1,w,c
  6717  0012B0  6EF7               	movwf	tblptrh,c
  6718  0012B2                     	if	0	;There are less than 3 active tblptr bytes
  6719  0012B2                     	endif
  6720  0012B2  0009               	tblrd		*+
  6721  0012B4  CFF5 F02C          	movff	tablat,___ftmul@f2
  6722  0012B8  0009               	tblrd		*+
  6723  0012BA  CFF5 F02D          	movff	tablat,___ftmul@f2+1
  6724  0012BE  000A               	tblrd		*-
  6725  0012C0  CFF5 F02E          	movff	tablat,___ftmul@f2+2
  6726  0012C4  0E00               	movlw	0
  6727  0012C6  6E1E               	movwf	___awdiv@divisor+1,c
  6728  0012C8  0E64               	movlw	100
  6729  0012CA  6E1D               	movwf	___awdiv@divisor,c
  6730  0012CC  503E               	movf	scale@scl,w,c
  6731  0012CE  6E1B               	movwf	___awdiv@dividend,c
  6732  0012D0  6A1C               	clrf	___awdiv@dividend+1,c
  6733  0012D2  BE1B               	btfsc	___awdiv@dividend,7,c
  6734  0012D4  061C               	decf	___awdiv@dividend+1,f,c
  6735  0012D6  ECA4  F012         	call	___awdiv	;wreg free
  6736  0012DA  0E12               	movlw	18
  6737  0012DC  241B               	addwf	?___awdiv,w,c
  6738  0012DE  6E23               	movwf	___wmul@multiplier,c
  6739  0012E0  0E00               	movlw	0
  6740  0012E2  201C               	addwfc	?___awdiv+1,w,c
  6741  0012E4  6E24               	movwf	___wmul@multiplier+1,c
  6742  0012E6  0E00               	movlw	0
  6743  0012E8  6E26               	movwf	___wmul@multiplicand+1,c
  6744  0012EA  0E03               	movlw	3
  6745  0012EC  6E25               	movwf	___wmul@multiplicand,c
  6746  0012EE  EC30  F016         	call	___wmul	;wreg free
  6747  0012F2  0EFF               	movlw	low __powers_
  6748  0012F4  2423               	addwf	?___wmul,w,c
  6749  0012F6  6EF6               	movwf	tblptrl,c
  6750  0012F8  0EFE               	movlw	high __powers_
  6751  0012FA  2024               	addwfc	?___wmul+1,w,c
  6752  0012FC  6EF7               	movwf	tblptrh,c
  6753  0012FE                     	if	0	;There are less than 3 active tblptr bytes
  6754  0012FE                     	endif
  6755  0012FE  0009               	tblrd		*+
  6756  001300  CFF5 F029          	movff	tablat,___ftmul@f1
  6757  001304  0009               	tblrd		*+
  6758  001306  CFF5 F02A          	movff	tablat,___ftmul@f1+1
  6759  00130A  000A               	tblrd		*-
  6760  00130C  CFF5 F02B          	movff	tablat,___ftmul@f1+2
  6761  001310  ECFF  F00F         	call	___ftmul	;wreg free
  6762  001314  C029  F03B         	movff	?___ftmul,_scale$1966
  6763  001318  C02A  F03C         	movff	?___ftmul+1,_scale$1966+1
  6764  00131C  C02B  F03D         	movff	?___ftmul+2,_scale$1966+2
  6765                           
  6766                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  6767  001320  C03B  F029         	movff	_scale$1966,___ftmul@f1
  6768  001324  C03C  F02A         	movff	_scale$1966+1,___ftmul@f1+1
  6769  001328  C03D  F02B         	movff	_scale$1966+2,___ftmul@f1+2
  6770  00132C  0E00               	movlw	0
  6771  00132E  6E26               	movwf	___wmul@multiplicand+1,c
  6772  001330  0E03               	movlw	3
  6773  001332  6E25               	movwf	___wmul@multiplicand,c
  6774  001334  0E00               	movlw	0
  6775  001336  6E18               	movwf	___awmod@divisor+1,c
  6776  001338  0E0A               	movlw	10
  6777  00133A  6E17               	movwf	___awmod@divisor,c
  6778  00133C  503E               	movf	scale@scl,w,c
  6779  00133E  6E15               	movwf	___awmod@dividend,c
  6780  001340  6A16               	clrf	___awmod@dividend+1,c
  6781  001342  BE15               	btfsc	___awmod@dividend,7,c
  6782  001344  0616               	decf	___awmod@dividend+1,f,c
  6783  001346  EC27  F013         	call	___awmod	;wreg free
  6784  00134A  C015  F023         	movff	?___awmod,___wmul@multiplier
  6785  00134E  C016  F024         	movff	?___awmod+1,___wmul@multiplier+1
  6786  001352  EC30  F016         	call	___wmul	;wreg free
  6787  001356  0EFF               	movlw	low __powers_
  6788  001358  2423               	addwf	?___wmul,w,c
  6789  00135A  6EF6               	movwf	tblptrl,c
  6790  00135C  0EFE               	movlw	high __powers_
  6791  00135E  2024               	addwfc	?___wmul+1,w,c
  6792  001360  6EF7               	movwf	tblptrh,c
  6793  001362                     	if	0	;There are less than 3 active tblptr bytes
  6794  001362                     	endif
  6795  001362  0009               	tblrd		*+
  6796  001364  CFF5 F02C          	movff	tablat,___ftmul@f2
  6797  001368  0009               	tblrd		*+
  6798  00136A  CFF5 F02D          	movff	tablat,___ftmul@f2+1
  6799  00136E  000A               	tblrd		*-
  6800  001370  CFF5 F02E          	movff	tablat,___ftmul@f2+2
  6801  001374  ECFF  F00F         	call	___ftmul	;wreg free
  6802  001378  C029  F038         	movff	?___ftmul,?_scale
  6803  00137C  C02A  F039         	movff	?___ftmul+1,?_scale+1
  6804  001380  C02B  F03A         	movff	?___ftmul+2,?_scale+2
  6805  001384  0012               	return	
  6806  001386                     l515:
  6807                           
  6808                           ;doprnt.c: 438: else if(scl > 10)
  6809  001386  503E               	movf	scale@scl,w,c
  6810  001388  0A80               	xorlw	128
  6811  00138A  0F75               	addlw	-139
  6812  00138C  A0D8               	btfss	status,0,c
  6813  00138E  D053               	goto	l517
  6814                           
  6815                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  6816  001390  0E00               	movlw	0
  6817  001392  6E1E               	movwf	___awdiv@divisor+1,c
  6818  001394  0E0A               	movlw	10
  6819  001396  6E1D               	movwf	___awdiv@divisor,c
  6820  001398  503E               	movf	scale@scl,w,c
  6821  00139A  6E1B               	movwf	___awdiv@dividend,c
  6822  00139C  6A1C               	clrf	___awdiv@dividend+1,c
  6823  00139E  BE1B               	btfsc	___awdiv@dividend,7,c
  6824  0013A0  061C               	decf	___awdiv@dividend+1,f,c
  6825  0013A2  ECA4  F012         	call	___awdiv	;wreg free
  6826  0013A6  0E09               	movlw	9
  6827  0013A8  241B               	addwf	?___awdiv,w,c
  6828  0013AA  6E23               	movwf	___wmul@multiplier,c
  6829  0013AC  0E00               	movlw	0
  6830  0013AE  201C               	addwfc	?___awdiv+1,w,c
  6831  0013B0  6E24               	movwf	___wmul@multiplier+1,c
  6832  0013B2  0E00               	movlw	0
  6833  0013B4  6E26               	movwf	___wmul@multiplicand+1,c
  6834  0013B6  0E03               	movlw	3
  6835  0013B8  6E25               	movwf	___wmul@multiplicand,c
  6836  0013BA  EC30  F016         	call	___wmul	;wreg free
  6837  0013BE  0EFF               	movlw	low __powers_
  6838  0013C0  2423               	addwf	?___wmul,w,c
  6839  0013C2  6EF6               	movwf	tblptrl,c
  6840  0013C4  0EFE               	movlw	high __powers_
  6841  0013C6  2024               	addwfc	?___wmul+1,w,c
  6842  0013C8  6EF7               	movwf	tblptrh,c
  6843  0013CA                     	if	0	;There are less than 3 active tblptr bytes
  6844  0013CA                     	endif
  6845  0013CA  0009               	tblrd		*+
  6846  0013CC  CFF5 F029          	movff	tablat,___ftmul@f1
  6847  0013D0  0009               	tblrd		*+
  6848  0013D2  CFF5 F02A          	movff	tablat,___ftmul@f1+1
  6849  0013D6  000A               	tblrd		*-
  6850  0013D8  CFF5 F02B          	movff	tablat,___ftmul@f1+2
  6851  0013DC  0E00               	movlw	0
  6852  0013DE  6E26               	movwf	___wmul@multiplicand+1,c
  6853  0013E0  0E03               	movlw	3
  6854  0013E2  6E25               	movwf	___wmul@multiplicand,c
  6855  0013E4  0E00               	movlw	0
  6856  0013E6  6E18               	movwf	___awmod@divisor+1,c
  6857  0013E8  0E0A               	movlw	10
  6858  0013EA  6E17               	movwf	___awmod@divisor,c
  6859  0013EC  503E               	movf	scale@scl,w,c
  6860  0013EE  6E15               	movwf	___awmod@dividend,c
  6861  0013F0  6A16               	clrf	___awmod@dividend+1,c
  6862  0013F2  BE15               	btfsc	___awmod@dividend,7,c
  6863  0013F4  0616               	decf	___awmod@dividend+1,f,c
  6864  0013F6  EC27  F013         	call	___awmod	;wreg free
  6865  0013FA  C015  F023         	movff	?___awmod,___wmul@multiplier
  6866  0013FE  C016  F024         	movff	?___awmod+1,___wmul@multiplier+1
  6867  001402  EC30  F016         	call	___wmul	;wreg free
  6868  001406  0EFF               	movlw	low __powers_
  6869  001408  2423               	addwf	?___wmul,w,c
  6870  00140A  6EF6               	movwf	tblptrl,c
  6871  00140C  0EFE               	movlw	high __powers_
  6872  00140E  2024               	addwfc	?___wmul+1,w,c
  6873  001410  6EF7               	movwf	tblptrh,c
  6874  001412                     	if	0	;There are less than 3 active tblptr bytes
  6875  001412                     	endif
  6876  001412  0009               	tblrd		*+
  6877  001414  CFF5 F02C          	movff	tablat,___ftmul@f2
  6878  001418  0009               	tblrd		*+
  6879  00141A  CFF5 F02D          	movff	tablat,___ftmul@f2+1
  6880  00141E  000A               	tblrd		*-
  6881  001420  CFF5 F02E          	movff	tablat,___ftmul@f2+2
  6882  001424  ECFF  F00F         	call	___ftmul	;wreg free
  6883  001428  C029  F038         	movff	?___ftmul,?_scale
  6884  00142C  C02A  F039         	movff	?___ftmul+1,?_scale+1
  6885  001430  C02B  F03A         	movff	?___ftmul+2,?_scale+2
  6886  001434  0012               	return	
  6887  001436                     l517:
  6888                           
  6889                           ;doprnt.c: 440: return _powers_[scl];
  6890  001436  503E               	movf	scale@scl,w,c
  6891  001438  0D03               	mullw	3
  6892  00143A  0EFF               	movlw	low __powers_
  6893  00143C  24F3               	addwf	prodl,w,c
  6894  00143E  6EF6               	movwf	tblptrl,c
  6895  001440  0EFE               	movlw	high __powers_
  6896  001442  20F4               	addwfc	prodh,w,c
  6897  001444  6EF7               	movwf	tblptrh,c
  6898  001446                     	if	0	;There are less than 3 active tblptr bytes
  6899  001446                     	endif
  6900  001446  0009               	tblrd		*+
  6901  001448  CFF5 F038          	movff	tablat,?_scale
  6902  00144C  0009               	tblrd		*+
  6903  00144E  CFF5 F039          	movff	tablat,?_scale+1
  6904  001452  000A               	tblrd		*-
  6905  001454  CFF5 F03A          	movff	tablat,?_scale+2
  6906  001458  0012               	return	
  6907  00145A                     __end_of_scale:
  6908                           	opt stack 0
  6909                           tblptru	equ	0xFF8
  6910                           tblptrh	equ	0xFF7
  6911                           tblptrl	equ	0xFF6
  6912                           tablat	equ	0xFF5
  6913                           prodh	equ	0xFF4
  6914                           prodl	equ	0xFF3
  6915                           intcon	equ	0xFF2
  6916                           postinc0	equ	0xFEE
  6917                           wreg	equ	0xFE8
  6918                           indf1	equ	0xFE7
  6919                           postdec1	equ	0xFE5
  6920                           fsr1h	equ	0xFE2
  6921                           fsr1l	equ	0xFE1
  6922                           indf2	equ	0xFDF
  6923                           postinc2	equ	0xFDE
  6924                           postdec2	equ	0xFDD
  6925                           fsr2h	equ	0xFDA
  6926                           fsr2l	equ	0xFD9
  6927                           status	equ	0xFD8
  6928                           
  6929 ;; *************** function _isdigit *****************
  6930 ;; Defined at:
  6931 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;  c               1    wreg     unsigned char 
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;  c               1   22[COMRAM] unsigned char 
  6936 ;; Return value:  Size  Location     Type
  6937 ;;		None               void
  6938 ;; Registers used:
  6939 ;;		wreg, status,2, status,0
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;Total ram usage:        3 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; Hardware stack levels required when called:    1
  6952 ;; This function calls:
  6953 ;;		Nothing
  6954 ;; This function is called by:
  6955 ;;		_sprintf
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	text19
  6960  002D5E                     __ptext19:
  6961                           	opt stack 0
  6962  002D5E                     _isdigit:
  6963                           	opt stack 28
  6964                           
  6965                           ;incstack = 0
  6966                           ;isdigit@c stored from wreg
  6967  002D5E  6E17               	movwf	isdigit@c,c
  6968  002D60  0E00               	movlw	0
  6969  002D62  6E16               	movwf	_isdigit$1586,c
  6970  002D64  0E3A               	movlw	58
  6971  002D66  6017               	cpfslt	isdigit@c,c
  6972  002D68  D005               	goto	l978
  6973  002D6A  0E2F               	movlw	47
  6974  002D6C  6417               	cpfsgt	isdigit@c,c
  6975  002D6E  D002               	goto	l978
  6976  002D70  0E01               	movlw	1
  6977  002D72  6E16               	movwf	_isdigit$1586,c
  6978  002D74                     l978:
  6979  002D74  C016  F015         	movff	_isdigit$1586,??_isdigit
  6980  002D78  3015               	rrcf	??_isdigit,w,c
  6981  002D7A  0012               	return	
  6982  002D7C                     __end_of_isdigit:
  6983                           	opt stack 0
  6984                           tblptru	equ	0xFF8
  6985                           tblptrh	equ	0xFF7
  6986                           tblptrl	equ	0xFF6
  6987                           tablat	equ	0xFF5
  6988                           prodh	equ	0xFF4
  6989                           prodl	equ	0xFF3
  6990                           intcon	equ	0xFF2
  6991                           postinc0	equ	0xFEE
  6992                           wreg	equ	0xFE8
  6993                           indf1	equ	0xFE7
  6994                           postdec1	equ	0xFE5
  6995                           fsr1h	equ	0xFE2
  6996                           fsr1l	equ	0xFE1
  6997                           indf2	equ	0xFDF
  6998                           postinc2	equ	0xFDE
  6999                           postdec2	equ	0xFDD
  7000                           fsr2h	equ	0xFDA
  7001                           fsr2l	equ	0xFD9
  7002                           status	equ	0xFD8
  7003                           
  7004 ;; *************** function _fround *****************
  7005 ;; Defined at:
  7006 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  7007 ;; Parameters:    Size  Location     Type
  7008 ;;  prec            1    wreg     unsigned char 
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;  prec            1   64[COMRAM] unsigned char 
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  3   55[COMRAM] unsigned char 
  7013 ;; Registers used:
  7014 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7020 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7023 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;Total ram usage:       10 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    3
  7027 ;; This function calls:
  7028 ;;		___awdiv
  7029 ;;		___awmod
  7030 ;;		___ftmul
  7031 ;;		___wmul
  7032 ;; This function is called by:
  7033 ;;		_sprintf
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           	psect	text20
  7038  00145A                     __ptext20:
  7039                           	opt stack 0
  7040  00145A                     _fround:
  7041                           	opt stack 26
  7042                           
  7043                           ;incstack = 0
  7044                           ;fround@prec stored from wreg
  7045  00145A  6E41               	movwf	fround@prec,c
  7046                           
  7047                           ;doprnt.c: 413: if(prec>=110)
  7048  00145C  0E6D               	movlw	109
  7049  00145E  6441               	cpfsgt	fround@prec,c
  7050  001460  D09F               	goto	l504
  7051                           
  7052                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7053  001462  0E00               	movlw	0
  7054  001464  6E26               	movwf	___wmul@multiplicand+1,c
  7055  001466  0E03               	movlw	3
  7056  001468  6E25               	movwf	___wmul@multiplicand,c
  7057  00146A  0E00               	movlw	0
  7058  00146C  6E1E               	movwf	___awdiv@divisor+1,c
  7059  00146E  0E0A               	movlw	10
  7060  001470  6E1D               	movwf	___awdiv@divisor,c
  7061  001472  0E00               	movlw	0
  7062  001474  6E18               	movwf	___awmod@divisor+1,c
  7063  001476  0E64               	movlw	100
  7064  001478  6E17               	movwf	___awmod@divisor,c
  7065  00147A  C041  F015         	movff	fround@prec,___awmod@dividend
  7066  00147E  6A16               	clrf	___awmod@dividend+1,c
  7067  001480  EC27  F013         	call	___awmod	;wreg free
  7068  001484  C015  F01B         	movff	?___awmod,___awdiv@dividend
  7069  001488  C016  F01C         	movff	?___awmod+1,___awdiv@dividend+1
  7070  00148C  ECA4  F012         	call	___awdiv	;wreg free
  7071  001490  0E09               	movlw	9
  7072  001492  241B               	addwf	?___awdiv,w,c
  7073  001494  6E23               	movwf	___wmul@multiplier,c
  7074  001496  0E00               	movlw	0
  7075  001498  201C               	addwfc	?___awdiv+1,w,c
  7076  00149A  6E24               	movwf	___wmul@multiplier+1,c
  7077  00149C  EC30  F016         	call	___wmul	;wreg free
  7078  0014A0  0E26               	movlw	low __npowers_
  7079  0014A2  2423               	addwf	?___wmul,w,c
  7080  0014A4  6EF6               	movwf	tblptrl,c
  7081  0014A6  0EFF               	movlw	high __npowers_
  7082  0014A8  2024               	addwfc	?___wmul+1,w,c
  7083  0014AA  6EF7               	movwf	tblptrh,c
  7084  0014AC                     	if	0	;There are less than 3 active tblptr bytes
  7085  0014AC                     	endif
  7086  0014AC  0009               	tblrd		*+
  7087  0014AE  CFF5 F02C          	movff	tablat,___ftmul@f2
  7088  0014B2  0009               	tblrd		*+
  7089  0014B4  CFF5 F02D          	movff	tablat,___ftmul@f2+1
  7090  0014B8  000A               	tblrd		*-
  7091  0014BA  CFF5 F02E          	movff	tablat,___ftmul@f2+2
  7092  0014BE  0E00               	movlw	0
  7093  0014C0  6E1E               	movwf	___awdiv@divisor+1,c
  7094  0014C2  0E64               	movlw	100
  7095  0014C4  6E1D               	movwf	___awdiv@divisor,c
  7096  0014C6  C041  F01B         	movff	fround@prec,___awdiv@dividend
  7097  0014CA  6A1C               	clrf	___awdiv@dividend+1,c
  7098  0014CC  ECA4  F012         	call	___awdiv	;wreg free
  7099  0014D0  0E12               	movlw	18
  7100  0014D2  241B               	addwf	?___awdiv,w,c
  7101  0014D4  6E23               	movwf	___wmul@multiplier,c
  7102  0014D6  0E00               	movlw	0
  7103  0014D8  201C               	addwfc	?___awdiv+1,w,c
  7104  0014DA  6E24               	movwf	___wmul@multiplier+1,c
  7105  0014DC  0E00               	movlw	0
  7106  0014DE  6E26               	movwf	___wmul@multiplicand+1,c
  7107  0014E0  0E03               	movlw	3
  7108  0014E2  6E25               	movwf	___wmul@multiplicand,c
  7109  0014E4  EC30  F016         	call	___wmul	;wreg free
  7110  0014E8  0E26               	movlw	low __npowers_
  7111  0014EA  2423               	addwf	?___wmul,w,c
  7112  0014EC  6EF6               	movwf	tblptrl,c
  7113  0014EE  0EFF               	movlw	high __npowers_
  7114  0014F0  2024               	addwfc	?___wmul+1,w,c
  7115  0014F2  6EF7               	movwf	tblptrh,c
  7116  0014F4                     	if	0	;There are less than 3 active tblptr bytes
  7117  0014F4                     	endif
  7118  0014F4  0009               	tblrd		*+
  7119  0014F6  CFF5 F029          	movff	tablat,___ftmul@f1
  7120  0014FA  0009               	tblrd		*+
  7121  0014FC  CFF5 F02A          	movff	tablat,___ftmul@f1+1
  7122  001500  000A               	tblrd		*-
  7123  001502  CFF5 F02B          	movff	tablat,___ftmul@f1+2
  7124  001506  ECFF  F00F         	call	___ftmul	;wreg free
  7125  00150A  C029  F03E         	movff	?___ftmul,_fround$1964
  7126  00150E  C02A  F03F         	movff	?___ftmul+1,_fround$1964+1
  7127  001512  C02B  F040         	movff	?___ftmul+2,_fround$1964+2
  7128                           
  7129                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7130  001516  0E00               	movlw	0
  7131  001518  6E26               	movwf	___wmul@multiplicand+1,c
  7132  00151A  0E03               	movlw	3
  7133  00151C  6E25               	movwf	___wmul@multiplicand,c
  7134  00151E  0E00               	movlw	0
  7135  001520  6E18               	movwf	___awmod@divisor+1,c
  7136  001522  0E0A               	movlw	10
  7137  001524  6E17               	movwf	___awmod@divisor,c
  7138  001526  C041  F015         	movff	fround@prec,___awmod@dividend
  7139  00152A  6A16               	clrf	___awmod@dividend+1,c
  7140  00152C  EC27  F013         	call	___awmod	;wreg free
  7141  001530  C015  F023         	movff	?___awmod,___wmul@multiplier
  7142  001534  C016  F024         	movff	?___awmod+1,___wmul@multiplier+1
  7143  001538  EC30  F016         	call	___wmul	;wreg free
  7144  00153C  0E26               	movlw	low __npowers_
  7145  00153E  2423               	addwf	?___wmul,w,c
  7146  001540  6EF6               	movwf	tblptrl,c
  7147  001542  0EFF               	movlw	high __npowers_
  7148  001544  2024               	addwfc	?___wmul+1,w,c
  7149  001546  6EF7               	movwf	tblptrh,c
  7150  001548                     	if	0	;There are less than 3 active tblptr bytes
  7151  001548                     	endif
  7152  001548  0009               	tblrd		*+
  7153  00154A  CFF5 F02C          	movff	tablat,___ftmul@f2
  7154  00154E  0009               	tblrd		*+
  7155  001550  CFF5 F02D          	movff	tablat,___ftmul@f2+1
  7156  001554  000A               	tblrd		*-
  7157  001556  CFF5 F02E          	movff	tablat,___ftmul@f2+2
  7158  00155A  C03E  F029         	movff	_fround$1964,___ftmul@f1
  7159  00155E  C03F  F02A         	movff	_fround$1964+1,___ftmul@f1+1
  7160  001562  C040  F02B         	movff	_fround$1964+2,___ftmul@f1+2
  7161  001566  ECFF  F00F         	call	___ftmul	;wreg free
  7162  00156A  C029  F03B         	movff	?___ftmul,_fround$1965
  7163  00156E  C02A  F03C         	movff	?___ftmul+1,_fround$1965+1
  7164  001572  C02B  F03D         	movff	?___ftmul+2,_fround$1965+2
  7165                           
  7166                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7167  001576  C03B  F029         	movff	_fround$1965,___ftmul@f1
  7168  00157A  C03C  F02A         	movff	_fround$1965+1,___ftmul@f1+1
  7169  00157E  C03D  F02B         	movff	_fround$1965+2,___ftmul@f1+2
  7170  001582  0E00               	movlw	0
  7171  001584  6E2C               	movwf	___ftmul@f2,c
  7172  001586  0E00               	movlw	0
  7173  001588  6E2D               	movwf	___ftmul@f2+1,c
  7174  00158A  0E3F               	movlw	63
  7175  00158C  6E2E               	movwf	___ftmul@f2+2,c
  7176  00158E  ECFF  F00F         	call	___ftmul	;wreg free
  7177  001592  C029  F038         	movff	?___ftmul,?_fround
  7178  001596  C02A  F039         	movff	?___ftmul+1,?_fround+1
  7179  00159A  C02B  F03A         	movff	?___ftmul+2,?_fround+2
  7180  00159E  0012               	return	
  7181  0015A0                     l504:
  7182                           
  7183                           ;doprnt.c: 415: else if(prec > 10)
  7184  0015A0  0E0A               	movlw	10
  7185  0015A2  6441               	cpfsgt	fround@prec,c
  7186  0015A4  D063               	goto	l507
  7187                           
  7188                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7189  0015A6  0E00               	movlw	0
  7190  0015A8  6E26               	movwf	___wmul@multiplicand+1,c
  7191  0015AA  0E03               	movlw	3
  7192  0015AC  6E25               	movwf	___wmul@multiplicand,c
  7193  0015AE  0E00               	movlw	0
  7194  0015B0  6E18               	movwf	___awmod@divisor+1,c
  7195  0015B2  0E0A               	movlw	10
  7196  0015B4  6E17               	movwf	___awmod@divisor,c
  7197  0015B6  C041  F015         	movff	fround@prec,___awmod@dividend
  7198  0015BA  6A16               	clrf	___awmod@dividend+1,c
  7199  0015BC  EC27  F013         	call	___awmod	;wreg free
  7200  0015C0  C015  F023         	movff	?___awmod,___wmul@multiplier
  7201  0015C4  C016  F024         	movff	?___awmod+1,___wmul@multiplier+1
  7202  0015C8  EC30  F016         	call	___wmul	;wreg free
  7203  0015CC  0E26               	movlw	low __npowers_
  7204  0015CE  2423               	addwf	?___wmul,w,c
  7205  0015D0  6EF6               	movwf	tblptrl,c
  7206  0015D2  0EFF               	movlw	high __npowers_
  7207  0015D4  2024               	addwfc	?___wmul+1,w,c
  7208  0015D6  6EF7               	movwf	tblptrh,c
  7209  0015D8                     	if	0	;There are less than 3 active tblptr bytes
  7210  0015D8                     	endif
  7211  0015D8  0009               	tblrd		*+
  7212  0015DA  CFF5 F02C          	movff	tablat,___ftmul@f2
  7213  0015DE  0009               	tblrd		*+
  7214  0015E0  CFF5 F02D          	movff	tablat,___ftmul@f2+1
  7215  0015E4  000A               	tblrd		*-
  7216  0015E6  CFF5 F02E          	movff	tablat,___ftmul@f2+2
  7217  0015EA  0E00               	movlw	0
  7218  0015EC  6E1E               	movwf	___awdiv@divisor+1,c
  7219  0015EE  0E0A               	movlw	10
  7220  0015F0  6E1D               	movwf	___awdiv@divisor,c
  7221  0015F2  C041  F01B         	movff	fround@prec,___awdiv@dividend
  7222  0015F6  6A1C               	clrf	___awdiv@dividend+1,c
  7223  0015F8  ECA4  F012         	call	___awdiv	;wreg free
  7224  0015FC  0E09               	movlw	9
  7225  0015FE  241B               	addwf	?___awdiv,w,c
  7226  001600  6E23               	movwf	___wmul@multiplier,c
  7227  001602  0E00               	movlw	0
  7228  001604  201C               	addwfc	?___awdiv+1,w,c
  7229  001606  6E24               	movwf	___wmul@multiplier+1,c
  7230  001608  0E00               	movlw	0
  7231  00160A  6E26               	movwf	___wmul@multiplicand+1,c
  7232  00160C  0E03               	movlw	3
  7233  00160E  6E25               	movwf	___wmul@multiplicand,c
  7234  001610  EC30  F016         	call	___wmul	;wreg free
  7235  001614  0E26               	movlw	low __npowers_
  7236  001616  2423               	addwf	?___wmul,w,c
  7237  001618  6EF6               	movwf	tblptrl,c
  7238  00161A  0EFF               	movlw	high __npowers_
  7239  00161C  2024               	addwfc	?___wmul+1,w,c
  7240  00161E  6EF7               	movwf	tblptrh,c
  7241  001620                     	if	0	;There are less than 3 active tblptr bytes
  7242  001620                     	endif
  7243  001620  0009               	tblrd		*+
  7244  001622  CFF5 F029          	movff	tablat,___ftmul@f1
  7245  001626  0009               	tblrd		*+
  7246  001628  CFF5 F02A          	movff	tablat,___ftmul@f1+1
  7247  00162C  000A               	tblrd		*-
  7248  00162E  CFF5 F02B          	movff	tablat,___ftmul@f1+2
  7249  001632  ECFF  F00F         	call	___ftmul	;wreg free
  7250  001636  C029  F03E         	movff	?___ftmul,_fround$1964
  7251  00163A  C02A  F03F         	movff	?___ftmul+1,_fround$1964+1
  7252  00163E  C02B  F040         	movff	?___ftmul+2,_fround$1964+2
  7253                           
  7254                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7255  001642  C03E  F029         	movff	_fround$1964,___ftmul@f1
  7256  001646  C03F  F02A         	movff	_fround$1964+1,___ftmul@f1+1
  7257  00164A  C040  F02B         	movff	_fround$1964+2,___ftmul@f1+2
  7258  00164E  0E00               	movlw	0
  7259  001650  6E2C               	movwf	___ftmul@f2,c
  7260  001652  0E00               	movlw	0
  7261  001654  6E2D               	movwf	___ftmul@f2+1,c
  7262  001656  0E3F               	movlw	63
  7263  001658  6E2E               	movwf	___ftmul@f2+2,c
  7264  00165A  ECFF  F00F         	call	___ftmul	;wreg free
  7265  00165E  C029  F038         	movff	?___ftmul,?_fround
  7266  001662  C02A  F039         	movff	?___ftmul+1,?_fround+1
  7267  001666  C02B  F03A         	movff	?___ftmul+2,?_fround+2
  7268  00166A  0012               	return	
  7269  00166C                     l507:
  7270                           
  7271                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7272  00166C  5041               	movf	fround@prec,w,c
  7273  00166E  0D03               	mullw	3
  7274  001670  0E26               	movlw	low __npowers_
  7275  001672  24F3               	addwf	prodl,w,c
  7276  001674  6EF6               	movwf	tblptrl,c
  7277  001676  0EFF               	movlw	high __npowers_
  7278  001678  20F4               	addwfc	prodh,w,c
  7279  00167A  6EF7               	movwf	tblptrh,c
  7280  00167C                     	if	0	;There are less than 3 active tblptr bytes
  7281  00167C                     	endif
  7282  00167C  0009               	tblrd		*+
  7283  00167E  CFF5 F029          	movff	tablat,___ftmul@f1
  7284  001682  0009               	tblrd		*+
  7285  001684  CFF5 F02A          	movff	tablat,___ftmul@f1+1
  7286  001688  000A               	tblrd		*-
  7287  00168A  CFF5 F02B          	movff	tablat,___ftmul@f1+2
  7288  00168E  0E00               	movlw	0
  7289  001690  6E2C               	movwf	___ftmul@f2,c
  7290  001692  0E00               	movlw	0
  7291  001694  6E2D               	movwf	___ftmul@f2+1,c
  7292  001696  0E3F               	movlw	63
  7293  001698  6E2E               	movwf	___ftmul@f2+2,c
  7294  00169A  ECFF  F00F         	call	___ftmul	;wreg free
  7295  00169E  C029  F038         	movff	?___ftmul,?_fround
  7296  0016A2  C02A  F039         	movff	?___ftmul+1,?_fround+1
  7297  0016A6  C02B  F03A         	movff	?___ftmul+2,?_fround+2
  7298  0016AA  0012               	return	
  7299  0016AC                     __end_of_fround:
  7300                           	opt stack 0
  7301                           tblptru	equ	0xFF8
  7302                           tblptrh	equ	0xFF7
  7303                           tblptrl	equ	0xFF6
  7304                           tablat	equ	0xFF5
  7305                           prodh	equ	0xFF4
  7306                           prodl	equ	0xFF3
  7307                           intcon	equ	0xFF2
  7308                           postinc0	equ	0xFEE
  7309                           wreg	equ	0xFE8
  7310                           indf1	equ	0xFE7
  7311                           postdec1	equ	0xFE5
  7312                           fsr1h	equ	0xFE2
  7313                           fsr1l	equ	0xFE1
  7314                           indf2	equ	0xFDF
  7315                           postinc2	equ	0xFDE
  7316                           postdec2	equ	0xFDD
  7317                           fsr2h	equ	0xFDA
  7318                           fsr2l	equ	0xFD9
  7319                           status	equ	0xFD8
  7320                           
  7321 ;; *************** function ___wmul *****************
  7322 ;; Defined at:
  7323 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7324 ;; Parameters:    Size  Location     Type
  7325 ;;  multiplier      2   34[COMRAM] unsigned int 
  7326 ;;  multiplicand    2   36[COMRAM] unsigned int 
  7327 ;; Auto vars:     Size  Location     Type
  7328 ;;  product         2   38[COMRAM] unsigned int 
  7329 ;; Return value:  Size  Location     Type
  7330 ;;                  2   34[COMRAM] unsigned int 
  7331 ;; Registers used:
  7332 ;;		wreg, status,2, status,0, prodl, prodh
  7333 ;; Tracked objects:
  7334 ;;		On entry : 0/0
  7335 ;;		On exit  : 0/0
  7336 ;;		Unchanged: 0/0
  7337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7338 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7339 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7341 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;Total ram usage:        6 bytes
  7343 ;; Hardware stack levels used:    1
  7344 ;; Hardware stack levels required when called:    1
  7345 ;; This function calls:
  7346 ;;		Nothing
  7347 ;; This function is called by:
  7348 ;;		_main
  7349 ;;		_read_adc_voltage
  7350 ;;		_fround
  7351 ;;		_scale
  7352 ;;		_sprintf
  7353 ;; This function uses a non-reentrant model
  7354 ;;
  7355                           
  7356                           	psect	text21
  7357  002C60                     __ptext21:
  7358                           	opt stack 0
  7359  002C60                     ___wmul:
  7360                           	opt stack 27
  7361                           
  7362                           ;incstack = 0
  7363  002C60  5023               	movf	___wmul@multiplier,w,c
  7364  002C62  0225               	mulwf	___wmul@multiplicand,c
  7365  002C64  CFF3 F027          	movff	prodl,___wmul@product
  7366  002C68  CFF4 F028          	movff	prodh,___wmul@product+1
  7367  002C6C  5023               	movf	___wmul@multiplier,w,c
  7368  002C6E  0226               	mulwf	___wmul@multiplicand+1,c
  7369  002C70  50F3               	movf	prodl,w,c
  7370  002C72  2628               	addwf	___wmul@product+1,f,c
  7371  002C74  5024               	movf	___wmul@multiplier+1,w,c
  7372  002C76  0225               	mulwf	___wmul@multiplicand,c
  7373  002C78  50F3               	movf	prodl,w,c
  7374  002C7A  2628               	addwf	___wmul@product+1,f,c
  7375  002C7C  C027  F023         	movff	___wmul@product,?___wmul
  7376  002C80  C028  F024         	movff	___wmul@product+1,?___wmul+1
  7377  002C84  0012               	return	
  7378  002C86                     __end_of___wmul:
  7379                           	opt stack 0
  7380                           tblptru	equ	0xFF8
  7381                           tblptrh	equ	0xFF7
  7382                           tblptrl	equ	0xFF6
  7383                           tablat	equ	0xFF5
  7384                           prodh	equ	0xFF4
  7385                           prodl	equ	0xFF3
  7386                           intcon	equ	0xFF2
  7387                           postinc0	equ	0xFEE
  7388                           wreg	equ	0xFE8
  7389                           indf1	equ	0xFE7
  7390                           postdec1	equ	0xFE5
  7391                           fsr1h	equ	0xFE2
  7392                           fsr1l	equ	0xFE1
  7393                           indf2	equ	0xFDF
  7394                           postinc2	equ	0xFDE
  7395                           postdec2	equ	0xFDD
  7396                           fsr2h	equ	0xFDA
  7397                           fsr2l	equ	0xFD9
  7398                           status	equ	0xFD8
  7399                           
  7400 ;; *************** function ___awmod *****************
  7401 ;; Defined at:
  7402 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;  dividend        2   20[COMRAM] int 
  7405 ;;  divisor         2   22[COMRAM] int 
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;  sign            1   25[COMRAM] unsigned char 
  7408 ;;  counter         1   24[COMRAM] unsigned char 
  7409 ;; Return value:  Size  Location     Type
  7410 ;;                  2   20[COMRAM] int 
  7411 ;; Registers used:
  7412 ;;		wreg, status,2, status,0
  7413 ;; Tracked objects:
  7414 ;;		On entry : 0/0
  7415 ;;		On exit  : 0/0
  7416 ;;		Unchanged: 0/0
  7417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7418 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7419 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7421 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7422 ;;Total ram usage:        6 bytes
  7423 ;; Hardware stack levels used:    1
  7424 ;; Hardware stack levels required when called:    1
  7425 ;; This function calls:
  7426 ;;		Nothing
  7427 ;; This function is called by:
  7428 ;;		_updateRTC
  7429 ;;		_fround
  7430 ;;		_scale
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           	psect	text22
  7435  00264E                     __ptext22:
  7436                           	opt stack 0
  7437  00264E                     ___awmod:
  7438                           	opt stack 28
  7439                           
  7440                           ;incstack = 0
  7441  00264E  0E00               	movlw	0
  7442  002650  6E1A               	movwf	___awmod@sign,c
  7443  002652  AE16               	btfss	___awmod@dividend+1,7,c
  7444  002654  D006               	goto	l795
  7445  002656  6C15               	negf	___awmod@dividend,c
  7446  002658  1E16               	comf	___awmod@dividend+1,f,c
  7447  00265A  B0D8               	btfsc	status,0,c
  7448  00265C  2A16               	incf	___awmod@dividend+1,f,c
  7449  00265E  0E01               	movlw	1
  7450  002660  6E1A               	movwf	___awmod@sign,c
  7451  002662                     l795:
  7452  002662  AE18               	btfss	___awmod@divisor+1,7,c
  7453  002664  D004               	goto	l796
  7454  002666  6C17               	negf	___awmod@divisor,c
  7455  002668  1E18               	comf	___awmod@divisor+1,f,c
  7456  00266A  B0D8               	btfsc	status,0,c
  7457  00266C  2A18               	incf	___awmod@divisor+1,f,c
  7458  00266E                     l796:
  7459  00266E  5017               	movf	___awmod@divisor,w,c
  7460  002670  1018               	iorwf	___awmod@divisor+1,w,c
  7461  002672  B4D8               	btfsc	status,2,c
  7462  002674  D018               	goto	l803
  7463  002676  0E01               	movlw	1
  7464  002678  6E19               	movwf	___awmod@counter,c
  7465  00267A  D004               	goto	l798
  7466  00267C  90D8               	bcf	status,0,c
  7467  00267E  3617               	rlcf	___awmod@divisor,f,c
  7468  002680  3618               	rlcf	___awmod@divisor+1,f,c
  7469  002682  2A19               	incf	___awmod@counter,f,c
  7470  002684                     l798:
  7471  002684  AE18               	btfss	___awmod@divisor+1,7,c
  7472  002686  D7FA               	goto	l799
  7473  002688                     u5370:
  7474  002688  5017               	movf	___awmod@divisor,w,c
  7475  00268A  5C15               	subwf	___awmod@dividend,w,c
  7476  00268C  5018               	movf	___awmod@divisor+1,w,c
  7477  00268E  5816               	subwfb	___awmod@dividend+1,w,c
  7478  002690  A0D8               	btfss	status,0,c
  7479  002692  D004               	goto	l802
  7480  002694  5017               	movf	___awmod@divisor,w,c
  7481  002696  5E15               	subwf	___awmod@dividend,f,c
  7482  002698  5018               	movf	___awmod@divisor+1,w,c
  7483  00269A  5A16               	subwfb	___awmod@dividend+1,f,c
  7484  00269C                     l802:
  7485  00269C  90D8               	bcf	status,0,c
  7486  00269E  3218               	rrcf	___awmod@divisor+1,f,c
  7487  0026A0  3217               	rrcf	___awmod@divisor,f,c
  7488  0026A2  2E19               	decfsz	___awmod@counter,f,c
  7489  0026A4  D7F1               	goto	u5370
  7490  0026A6                     l803:
  7491  0026A6  501A               	movf	___awmod@sign,w,c
  7492  0026A8  B4D8               	btfsc	status,2,c
  7493  0026AA  D004               	goto	l804
  7494  0026AC  6C15               	negf	___awmod@dividend,c
  7495  0026AE  1E16               	comf	___awmod@dividend+1,f,c
  7496  0026B0  B0D8               	btfsc	status,0,c
  7497  0026B2  2A16               	incf	___awmod@dividend+1,f,c
  7498  0026B4                     l804:
  7499  0026B4  C015  F015         	movff	___awmod@dividend,?___awmod
  7500  0026B8  C016  F016         	movff	___awmod@dividend+1,?___awmod+1
  7501  0026BC  0012               	return	
  7502  0026BE                     __end_of___awmod:
  7503                           	opt stack 0
  7504                           tblptru	equ	0xFF8
  7505                           tblptrh	equ	0xFF7
  7506                           tblptrl	equ	0xFF6
  7507                           tablat	equ	0xFF5
  7508                           prodh	equ	0xFF4
  7509                           prodl	equ	0xFF3
  7510                           intcon	equ	0xFF2
  7511                           postinc0	equ	0xFEE
  7512                           wreg	equ	0xFE8
  7513                           indf1	equ	0xFE7
  7514                           postdec1	equ	0xFE5
  7515                           fsr1h	equ	0xFE2
  7516                           fsr1l	equ	0xFE1
  7517                           indf2	equ	0xFDF
  7518                           postinc2	equ	0xFDE
  7519                           postdec2	equ	0xFDD
  7520                           fsr2h	equ	0xFDA
  7521                           fsr2l	equ	0xFD9
  7522                           status	equ	0xFD8
  7523                           
  7524 ;; *************** function ___awdiv *****************
  7525 ;; Defined at:
  7526 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  dividend        2   26[COMRAM] int 
  7529 ;;  divisor         2   28[COMRAM] int 
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;  quotient        2   32[COMRAM] int 
  7532 ;;  sign            1   31[COMRAM] unsigned char 
  7533 ;;  counter         1   30[COMRAM] unsigned char 
  7534 ;; Return value:  Size  Location     Type
  7535 ;;                  2   26[COMRAM] int 
  7536 ;; Registers used:
  7537 ;;		wreg, status,2, status,0
  7538 ;; Tracked objects:
  7539 ;;		On entry : 0/0
  7540 ;;		On exit  : 0/0
  7541 ;;		Unchanged: 0/0
  7542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7543 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;Total ram usage:        8 bytes
  7548 ;; Hardware stack levels used:    1
  7549 ;; Hardware stack levels required when called:    1
  7550 ;; This function calls:
  7551 ;;		Nothing
  7552 ;; This function is called by:
  7553 ;;		_updateRTC
  7554 ;;		_fround
  7555 ;;		_scale
  7556 ;;		_sprintf
  7557 ;; This function uses a non-reentrant model
  7558 ;;
  7559                           
  7560                           	psect	text23
  7561  002548                     __ptext23:
  7562                           	opt stack 0
  7563  002548                     ___awdiv:
  7564                           	opt stack 28
  7565                           
  7566                           ;incstack = 0
  7567  002548  0E00               	movlw	0
  7568  00254A  6E20               	movwf	___awdiv@sign,c
  7569  00254C  AE1E               	btfss	___awdiv@divisor+1,7,c
  7570  00254E  D006               	goto	l782
  7571  002550  6C1D               	negf	___awdiv@divisor,c
  7572  002552  1E1E               	comf	___awdiv@divisor+1,f,c
  7573  002554  B0D8               	btfsc	status,0,c
  7574  002556  2A1E               	incf	___awdiv@divisor+1,f,c
  7575  002558  0E01               	movlw	1
  7576  00255A  6E20               	movwf	___awdiv@sign,c
  7577  00255C                     l782:
  7578  00255C  AE1C               	btfss	___awdiv@dividend+1,7,c
  7579  00255E  D006               	goto	l783
  7580  002560  6C1B               	negf	___awdiv@dividend,c
  7581  002562  1E1C               	comf	___awdiv@dividend+1,f,c
  7582  002564  B0D8               	btfsc	status,0,c
  7583  002566  2A1C               	incf	___awdiv@dividend+1,f,c
  7584  002568  0E01               	movlw	1
  7585  00256A  1A20               	xorwf	___awdiv@sign,f,c
  7586  00256C                     l783:
  7587  00256C  0E00               	movlw	0
  7588  00256E  6E22               	movwf	___awdiv@quotient+1,c
  7589  002570  0E00               	movlw	0
  7590  002572  6E21               	movwf	___awdiv@quotient,c
  7591  002574  501D               	movf	___awdiv@divisor,w,c
  7592  002576  101E               	iorwf	___awdiv@divisor+1,w,c
  7593  002578  B4D8               	btfsc	status,2,c
  7594  00257A  D01C               	goto	l790
  7595  00257C  0E01               	movlw	1
  7596  00257E  6E1F               	movwf	___awdiv@counter,c
  7597  002580  D004               	goto	l785
  7598  002582  90D8               	bcf	status,0,c
  7599  002584  361D               	rlcf	___awdiv@divisor,f,c
  7600  002586  361E               	rlcf	___awdiv@divisor+1,f,c
  7601  002588  2A1F               	incf	___awdiv@counter,f,c
  7602  00258A                     l785:
  7603  00258A  AE1E               	btfss	___awdiv@divisor+1,7,c
  7604  00258C  D7FA               	goto	l786
  7605  00258E                     u5310:
  7606  00258E  90D8               	bcf	status,0,c
  7607  002590  3621               	rlcf	___awdiv@quotient,f,c
  7608  002592  3622               	rlcf	___awdiv@quotient+1,f,c
  7609  002594  501D               	movf	___awdiv@divisor,w,c
  7610  002596  5C1B               	subwf	___awdiv@dividend,w,c
  7611  002598  501E               	movf	___awdiv@divisor+1,w,c
  7612  00259A  581C               	subwfb	___awdiv@dividend+1,w,c
  7613  00259C  A0D8               	btfss	status,0,c
  7614  00259E  D005               	goto	l789
  7615  0025A0  501D               	movf	___awdiv@divisor,w,c
  7616  0025A2  5E1B               	subwf	___awdiv@dividend,f,c
  7617  0025A4  501E               	movf	___awdiv@divisor+1,w,c
  7618  0025A6  5A1C               	subwfb	___awdiv@dividend+1,f,c
  7619  0025A8  8021               	bsf	___awdiv@quotient,0,c
  7620  0025AA                     l789:
  7621  0025AA  90D8               	bcf	status,0,c
  7622  0025AC  321E               	rrcf	___awdiv@divisor+1,f,c
  7623  0025AE  321D               	rrcf	___awdiv@divisor,f,c
  7624  0025B0  2E1F               	decfsz	___awdiv@counter,f,c
  7625  0025B2  D7ED               	goto	u5310
  7626  0025B4                     l790:
  7627  0025B4  5020               	movf	___awdiv@sign,w,c
  7628  0025B6  B4D8               	btfsc	status,2,c
  7629  0025B8  D004               	goto	l791
  7630  0025BA  6C21               	negf	___awdiv@quotient,c
  7631  0025BC  1E22               	comf	___awdiv@quotient+1,f,c
  7632  0025BE  B0D8               	btfsc	status,0,c
  7633  0025C0  2A22               	incf	___awdiv@quotient+1,f,c
  7634  0025C2                     l791:
  7635  0025C2  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  7636  0025C6  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  7637  0025CA  0012               	return	
  7638  0025CC                     __end_of___awdiv:
  7639                           	opt stack 0
  7640                           tblptru	equ	0xFF8
  7641                           tblptrh	equ	0xFF7
  7642                           tblptrl	equ	0xFF6
  7643                           tablat	equ	0xFF5
  7644                           prodh	equ	0xFF4
  7645                           prodl	equ	0xFF3
  7646                           intcon	equ	0xFF2
  7647                           postinc0	equ	0xFEE
  7648                           wreg	equ	0xFE8
  7649                           indf1	equ	0xFE7
  7650                           postdec1	equ	0xFE5
  7651                           fsr1h	equ	0xFE2
  7652                           fsr1l	equ	0xFE1
  7653                           indf2	equ	0xFDF
  7654                           postinc2	equ	0xFDE
  7655                           postdec2	equ	0xFDD
  7656                           fsr2h	equ	0xFDA
  7657                           fsr2l	equ	0xFD9
  7658                           status	equ	0xFD8
  7659                           
  7660 ;; *************** function __tdiv_to_l_ *****************
  7661 ;; Defined at:
  7662 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;  f1              3   20[COMRAM] float 
  7665 ;;  f2              3   23[COMRAM] float 
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;  quot            4   29[COMRAM] unsigned long 
  7668 ;;  exp1            1   34[COMRAM] unsigned char 
  7669 ;;  cntr            1   33[COMRAM] unsigned char 
  7670 ;; Return value:  Size  Location     Type
  7671 ;;                  4   20[COMRAM] unsigned long 
  7672 ;; Registers used:
  7673 ;;		wreg, status,2, status,0
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7679 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7680 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7681 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7682 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;Total ram usage:       15 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    1
  7686 ;; This function calls:
  7687 ;;		Nothing
  7688 ;; This function is called by:
  7689 ;;		_sprintf
  7690 ;; This function uses a non-reentrant model
  7691 ;;
  7692                           
  7693                           	psect	text24
  7694  001BAA                     __ptext24:
  7695                           	opt stack 0
  7696  001BAA                     __tdiv_to_l_:
  7697                           	opt stack 28
  7698                           
  7699                           ;incstack = 0
  7700  001BAA  C017  F01B         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  7701  001BAE  6A1C               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7702  001BB0  6A1D               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7703  001BB2  3416               	rlcf	__tdiv_to_l_@f1+1,w,c
  7704  001BB4  361B               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7705  001BB6  E301               	bnc	u5581
  7706  001BB8  801C               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7707  001BBA                     u5581:
  7708  001BBA  501B               	movf	??__tdiv_to_l_,w,c
  7709  001BBC  6E23               	movwf	__tdiv_to_l_@exp1,c
  7710  001BBE  5023               	movf	__tdiv_to_l_@exp1,w,c
  7711  001BC0  A4D8               	btfss	status,2,c
  7712  001BC2  D009               	goto	l918
  7713  001BC4  0E00               	movlw	0
  7714  001BC6  6E15               	movwf	?__tdiv_to_l_,c
  7715  001BC8  0E00               	movlw	0
  7716  001BCA  6E16               	movwf	?__tdiv_to_l_+1,c
  7717  001BCC  0E00               	movlw	0
  7718  001BCE  6E17               	movwf	?__tdiv_to_l_+2,c
  7719  001BD0  0E00               	movlw	0
  7720  001BD2  6E18               	movwf	?__tdiv_to_l_+3,c
  7721  001BD4  0012               	return	
  7722  001BD6                     l918:
  7723  001BD6  C01A  F01B         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  7724  001BDA  6A1C               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  7725  001BDC  6A1D               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  7726  001BDE  3419               	rlcf	__tdiv_to_l_@f2+1,w,c
  7727  001BE0  361B               	rlcf	??__tdiv_to_l_& (0+255),f,c
  7728  001BE2  E301               	bnc	u5601
  7729  001BE4  801C               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  7730  001BE6                     u5601:
  7731  001BE6  501B               	movf	??__tdiv_to_l_,w,c
  7732  001BE8  6E22               	movwf	__tdiv_to_l_@cntr,c
  7733  001BEA  5022               	movf	__tdiv_to_l_@cntr,w,c
  7734  001BEC  A4D8               	btfss	status,2,c
  7735  001BEE  D009               	goto	l920
  7736  001BF0  0E00               	movlw	0
  7737  001BF2  6E15               	movwf	?__tdiv_to_l_,c
  7738  001BF4  0E00               	movlw	0
  7739  001BF6  6E16               	movwf	?__tdiv_to_l_+1,c
  7740  001BF8  0E00               	movlw	0
  7741  001BFA  6E17               	movwf	?__tdiv_to_l_+2,c
  7742  001BFC  0E00               	movlw	0
  7743  001BFE  6E18               	movwf	?__tdiv_to_l_+3,c
  7744  001C00  0012               	return	
  7745  001C02                     l920:
  7746  001C02  8E16               	bsf	__tdiv_to_l_@f1+1,7,c
  7747  001C04  0EFF               	movlw	255
  7748  001C06  1615               	andwf	__tdiv_to_l_@f1,f,c
  7749  001C08  0EFF               	movlw	255
  7750  001C0A  1616               	andwf	__tdiv_to_l_@f1+1,f,c
  7751  001C0C  0E00               	movlw	0
  7752  001C0E  1617               	andwf	__tdiv_to_l_@f1+2,f,c
  7753  001C10  8E19               	bsf	__tdiv_to_l_@f2+1,7,c
  7754  001C12  0EFF               	movlw	255
  7755  001C14  1618               	andwf	__tdiv_to_l_@f2,f,c
  7756  001C16  0EFF               	movlw	255
  7757  001C18  1619               	andwf	__tdiv_to_l_@f2+1,f,c
  7758  001C1A  0E00               	movlw	0
  7759  001C1C  161A               	andwf	__tdiv_to_l_@f2+2,f,c
  7760  001C1E  0E00               	movlw	0
  7761  001C20  6E1E               	movwf	__tdiv_to_l_@quot,c
  7762  001C22  0E00               	movlw	0
  7763  001C24  6E1F               	movwf	__tdiv_to_l_@quot+1,c
  7764  001C26  0E00               	movlw	0
  7765  001C28  6E20               	movwf	__tdiv_to_l_@quot+2,c
  7766  001C2A  0E00               	movlw	0
  7767  001C2C  6E21               	movwf	__tdiv_to_l_@quot+3,c
  7768  001C2E  0E7F               	movlw	127
  7769  001C30  5E23               	subwf	__tdiv_to_l_@exp1,f,c
  7770  001C32  5022               	movf	__tdiv_to_l_@cntr,w,c
  7771  001C34  0F98               	addlw	152
  7772  001C36  5E23               	subwf	__tdiv_to_l_@exp1,f,c
  7773  001C38  0E18               	movlw	24
  7774  001C3A  6E22               	movwf	__tdiv_to_l_@cntr,c
  7775  001C3C                     l921:
  7776  001C3C  90D8               	bcf	status,0,c
  7777  001C3E  361E               	rlcf	__tdiv_to_l_@quot,f,c
  7778  001C40  361F               	rlcf	__tdiv_to_l_@quot+1,f,c
  7779  001C42  3620               	rlcf	__tdiv_to_l_@quot+2,f,c
  7780  001C44  3621               	rlcf	__tdiv_to_l_@quot+3,f,c
  7781  001C46  5018               	movf	__tdiv_to_l_@f2,w,c
  7782  001C48  5C15               	subwf	__tdiv_to_l_@f1,w,c
  7783  001C4A  5019               	movf	__tdiv_to_l_@f2+1,w,c
  7784  001C4C  5816               	subwfb	__tdiv_to_l_@f1+1,w,c
  7785  001C4E  501A               	movf	__tdiv_to_l_@f2+2,w,c
  7786  001C50  5817               	subwfb	__tdiv_to_l_@f1+2,w,c
  7787  001C52  A0D8               	btfss	status,0,c
  7788  001C54  D007               	goto	l922
  7789  001C56  5018               	movf	__tdiv_to_l_@f2,w,c
  7790  001C58  5E15               	subwf	__tdiv_to_l_@f1,f,c
  7791  001C5A  5019               	movf	__tdiv_to_l_@f2+1,w,c
  7792  001C5C  5A16               	subwfb	__tdiv_to_l_@f1+1,f,c
  7793  001C5E  501A               	movf	__tdiv_to_l_@f2+2,w,c
  7794  001C60  5A17               	subwfb	__tdiv_to_l_@f1+2,f,c
  7795  001C62  801E               	bsf	__tdiv_to_l_@quot,0,c
  7796  001C64                     l922:
  7797  001C64  90D8               	bcf	status,0,c
  7798  001C66  3615               	rlcf	__tdiv_to_l_@f1,f,c
  7799  001C68  3616               	rlcf	__tdiv_to_l_@f1+1,f,c
  7800  001C6A  3617               	rlcf	__tdiv_to_l_@f1+2,f,c
  7801  001C6C  2E22               	decfsz	__tdiv_to_l_@cntr,f,c
  7802  001C6E  D7E6               	goto	l921
  7803  001C70  AE23               	btfss	__tdiv_to_l_@exp1,7,c
  7804  001C72  D016               	goto	l924
  7805  001C74  5023               	movf	__tdiv_to_l_@exp1,w,c
  7806  001C76  0A80               	xorlw	128
  7807  001C78  0F97               	addlw	151
  7808  001C7A  B0D8               	btfsc	status,0,c
  7809  001C7C  D009               	goto	l925
  7810  001C7E  0E00               	movlw	0
  7811  001C80  6E15               	movwf	?__tdiv_to_l_,c
  7812  001C82  0E00               	movlw	0
  7813  001C84  6E16               	movwf	?__tdiv_to_l_+1,c
  7814  001C86  0E00               	movlw	0
  7815  001C88  6E17               	movwf	?__tdiv_to_l_+2,c
  7816  001C8A  0E00               	movlw	0
  7817  001C8C  6E18               	movwf	?__tdiv_to_l_+3,c
  7818  001C8E  0012               	return	
  7819  001C90                     l925:
  7820  001C90  90D8               	bcf	status,0,c
  7821  001C92  3221               	rrcf	__tdiv_to_l_@quot+3,f,c
  7822  001C94  3220               	rrcf	__tdiv_to_l_@quot+2,f,c
  7823  001C96  321F               	rrcf	__tdiv_to_l_@quot+1,f,c
  7824  001C98  321E               	rrcf	__tdiv_to_l_@quot,f,c
  7825  001C9A  3E23               	incfsz	__tdiv_to_l_@exp1,f,c
  7826  001C9C  D7F9               	goto	l925
  7827  001C9E  D015               	goto	u5660
  7828  001CA0                     l924:
  7829  001CA0  0E17               	movlw	23
  7830  001CA2  6423               	cpfsgt	__tdiv_to_l_@exp1,c
  7831  001CA4  D00F               	goto	l930
  7832  001CA6  0E00               	movlw	0
  7833  001CA8  6E15               	movwf	?__tdiv_to_l_,c
  7834  001CAA  0E00               	movlw	0
  7835  001CAC  6E16               	movwf	?__tdiv_to_l_+1,c
  7836  001CAE  0E00               	movlw	0
  7837  001CB0  6E17               	movwf	?__tdiv_to_l_+2,c
  7838  001CB2  0E00               	movlw	0
  7839  001CB4  6E18               	movwf	?__tdiv_to_l_+3,c
  7840  001CB6  0012               	return	
  7841  001CB8  90D8               	bcf	status,0,c
  7842  001CBA  361E               	rlcf	__tdiv_to_l_@quot,f,c
  7843  001CBC  361F               	rlcf	__tdiv_to_l_@quot+1,f,c
  7844  001CBE  3620               	rlcf	__tdiv_to_l_@quot+2,f,c
  7845  001CC0  3621               	rlcf	__tdiv_to_l_@quot+3,f,c
  7846  001CC2  0623               	decf	__tdiv_to_l_@exp1,f,c
  7847  001CC4                     l930:
  7848  001CC4  5023               	movf	__tdiv_to_l_@exp1,w,c
  7849  001CC6  A4D8               	btfss	status,2,c
  7850  001CC8  D7F7               	goto	l931
  7851  001CCA                     u5660:
  7852  001CCA  C01E  F015         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  7853  001CCE  C01F  F016         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  7854  001CD2  C020  F017         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  7855  001CD6  C021  F018         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  7856  001CDA  0012               	return		;funcret
  7857  001CDC                     __end_of__tdiv_to_l_:
  7858                           	opt stack 0
  7859                           tblptru	equ	0xFF8
  7860                           tblptrh	equ	0xFF7
  7861                           tblptrl	equ	0xFF6
  7862                           tablat	equ	0xFF5
  7863                           prodh	equ	0xFF4
  7864                           prodl	equ	0xFF3
  7865                           intcon	equ	0xFF2
  7866                           postinc0	equ	0xFEE
  7867                           wreg	equ	0xFE8
  7868                           indf1	equ	0xFE7
  7869                           postdec1	equ	0xFE5
  7870                           fsr1h	equ	0xFE2
  7871                           fsr1l	equ	0xFE1
  7872                           indf2	equ	0xFDF
  7873                           postinc2	equ	0xFDE
  7874                           postdec2	equ	0xFDD
  7875                           fsr2h	equ	0xFDA
  7876                           fsr2l	equ	0xFD9
  7877                           status	equ	0xFD8
  7878                           
  7879 ;; *************** function __div_to_l_ *****************
  7880 ;; Defined at:
  7881 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  7882 ;; Parameters:    Size  Location     Type
  7883 ;;  f1              3   20[COMRAM] unsigned long 
  7884 ;;  f2              3   23[COMRAM] unsigned long 
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;  quot            4   26[COMRAM] unsigned long 
  7887 ;;  exp1            1   31[COMRAM] unsigned char 
  7888 ;;  cntr            1   30[COMRAM] unsigned char 
  7889 ;; Return value:  Size  Location     Type
  7890 ;;                  4   20[COMRAM] unsigned long 
  7891 ;; Registers used:
  7892 ;;		wreg, status,2, status,0
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7898 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7899 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7901 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7902 ;;Total ram usage:       12 bytes
  7903 ;; Hardware stack levels used:    1
  7904 ;; Hardware stack levels required when called:    1
  7905 ;; This function calls:
  7906 ;;		Nothing
  7907 ;; This function is called by:
  7908 ;;		_sprintf
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           	psect	text25
  7913  001CDC                     __ptext25:
  7914                           	opt stack 0
  7915  001CDC                     __div_to_l_:
  7916                           	opt stack 28
  7917                           
  7918                           ;incstack = 0
  7919  001CDC  3417               	rlcf	__div_to_l_@f1+2,w,c
  7920  001CDE  3418               	rlcf	__div_to_l_@f1+3,w,c
  7921  001CE0  6E20               	movwf	__div_to_l_@exp1,c
  7922  001CE2  5020               	movf	__div_to_l_@exp1,w,c
  7923  001CE4  A4D8               	btfss	status,2,c
  7924  001CE6  D009               	goto	l814
  7925  001CE8  0E00               	movlw	0
  7926  001CEA  6E15               	movwf	?__div_to_l_,c
  7927  001CEC  0E00               	movlw	0
  7928  001CEE  6E16               	movwf	?__div_to_l_+1,c
  7929  001CF0  0E00               	movlw	0
  7930  001CF2  6E17               	movwf	?__div_to_l_+2,c
  7931  001CF4  0E00               	movlw	0
  7932  001CF6  6E18               	movwf	?__div_to_l_+3,c
  7933  001CF8  0012               	return	
  7934  001CFA                     l814:
  7935  001CFA  341A               	rlcf	__div_to_l_@f2+2,w,c
  7936  001CFC  341B               	rlcf	__div_to_l_@f2+3,w,c
  7937  001CFE  6E1F               	movwf	__div_to_l_@cntr,c
  7938  001D00  501F               	movf	__div_to_l_@cntr,w,c
  7939  001D02  A4D8               	btfss	status,2,c
  7940  001D04  D009               	goto	l816
  7941  001D06  0E00               	movlw	0
  7942  001D08  6E15               	movwf	?__div_to_l_,c
  7943  001D0A  0E00               	movlw	0
  7944  001D0C  6E16               	movwf	?__div_to_l_+1,c
  7945  001D0E  0E00               	movlw	0
  7946  001D10  6E17               	movwf	?__div_to_l_+2,c
  7947  001D12  0E00               	movlw	0
  7948  001D14  6E18               	movwf	?__div_to_l_+3,c
  7949  001D16  0012               	return	
  7950  001D18                     l816:
  7951  001D18  8E17               	bsf	__div_to_l_@f1+2,7,c
  7952  001D1A  0EFF               	movlw	255
  7953  001D1C  1615               	andwf	__div_to_l_@f1,f,c
  7954  001D1E  0EFF               	movlw	255
  7955  001D20  1616               	andwf	__div_to_l_@f1+1,f,c
  7956  001D22  0EFF               	movlw	255
  7957  001D24  1617               	andwf	__div_to_l_@f1+2,f,c
  7958  001D26  0E00               	movlw	0
  7959  001D28  1618               	andwf	__div_to_l_@f1+3,f,c
  7960  001D2A  8E1A               	bsf	__div_to_l_@f2+2,7,c
  7961  001D2C  0EFF               	movlw	255
  7962  001D2E  1618               	andwf	__div_to_l_@f2,f,c
  7963  001D30  0EFF               	movlw	255
  7964  001D32  1619               	andwf	__div_to_l_@f2+1,f,c
  7965  001D34  0EFF               	movlw	255
  7966  001D36  161A               	andwf	__div_to_l_@f2+2,f,c
  7967  001D38  0E00               	movlw	0
  7968  001D3A  161B               	andwf	__div_to_l_@f2+3,f,c
  7969  001D3C  0E00               	movlw	0
  7970  001D3E  6E1B               	movwf	__div_to_l_@quot,c
  7971  001D40  0E00               	movlw	0
  7972  001D42  6E1C               	movwf	__div_to_l_@quot+1,c
  7973  001D44  0E00               	movlw	0
  7974  001D46  6E1D               	movwf	__div_to_l_@quot+2,c
  7975  001D48  0E00               	movlw	0
  7976  001D4A  6E1E               	movwf	__div_to_l_@quot+3,c
  7977  001D4C  0E7F               	movlw	127
  7978  001D4E  5E20               	subwf	__div_to_l_@exp1,f,c
  7979  001D50  501F               	movf	__div_to_l_@cntr,w,c
  7980  001D52  0FA0               	addlw	160
  7981  001D54  5E20               	subwf	__div_to_l_@exp1,f,c
  7982  001D56  0E20               	movlw	32
  7983  001D58  6E1F               	movwf	__div_to_l_@cntr,c
  7984  001D5A  90D8               	bcf	status,0,c
  7985  001D5C  361B               	rlcf	__div_to_l_@quot,f,c
  7986  001D5E  361C               	rlcf	__div_to_l_@quot+1,f,c
  7987  001D60  361D               	rlcf	__div_to_l_@quot+2,f,c
  7988  001D62  361E               	rlcf	__div_to_l_@quot+3,f,c
  7989  001D64  5018               	movf	__div_to_l_@f2,w,c
  7990  001D66  5C15               	subwf	__div_to_l_@f1,w,c
  7991  001D68  5019               	movf	__div_to_l_@f2+1,w,c
  7992  001D6A  5816               	subwfb	__div_to_l_@f1+1,w,c
  7993  001D6C  501A               	movf	__div_to_l_@f2+2,w,c
  7994  001D6E  5817               	subwfb	__div_to_l_@f1+2,w,c
  7995  001D70  501B               	movf	__div_to_l_@f2+3,w,c
  7996  001D72  5818               	subwfb	__div_to_l_@f1+3,w,c
  7997  001D74  A0D8               	btfss	status,0,c
  7998  001D76  D009               	goto	l818
  7999  001D78  5018               	movf	__div_to_l_@f2,w,c
  8000  001D7A  5E15               	subwf	__div_to_l_@f1,f,c
  8001  001D7C  5019               	movf	__div_to_l_@f2+1,w,c
  8002  001D7E  5A16               	subwfb	__div_to_l_@f1+1,f,c
  8003  001D80  501A               	movf	__div_to_l_@f2+2,w,c
  8004  001D82  5A17               	subwfb	__div_to_l_@f1+2,f,c
  8005  001D84  501B               	movf	__div_to_l_@f2+3,w,c
  8006  001D86  5A18               	subwfb	__div_to_l_@f1+3,f,c
  8007  001D88  801B               	bsf	__div_to_l_@quot,0,c
  8008  001D8A                     l818:
  8009  001D8A  90D8               	bcf	status,0,c
  8010  001D8C  3615               	rlcf	__div_to_l_@f1,f,c
  8011  001D8E  3616               	rlcf	__div_to_l_@f1+1,f,c
  8012  001D90  3617               	rlcf	__div_to_l_@f1+2,f,c
  8013  001D92  3618               	rlcf	__div_to_l_@f1+3,f,c
  8014  001D94  2E1F               	decfsz	__div_to_l_@cntr,f,c
  8015  001D96  D7E1               	goto	l817
  8016  001D98  AE20               	btfss	__div_to_l_@exp1,7,c
  8017  001D9A  D016               	goto	l820
  8018  001D9C  5020               	movf	__div_to_l_@exp1,w,c
  8019  001D9E  0A80               	xorlw	128
  8020  001DA0  0F9F               	addlw	159
  8021  001DA2  B0D8               	btfsc	status,0,c
  8022  001DA4  D009               	goto	l821
  8023  001DA6  0E00               	movlw	0
  8024  001DA8  6E15               	movwf	?__div_to_l_,c
  8025  001DAA  0E00               	movlw	0
  8026  001DAC  6E16               	movwf	?__div_to_l_+1,c
  8027  001DAE  0E00               	movlw	0
  8028  001DB0  6E17               	movwf	?__div_to_l_+2,c
  8029  001DB2  0E00               	movlw	0
  8030  001DB4  6E18               	movwf	?__div_to_l_+3,c
  8031  001DB6  0012               	return	
  8032  001DB8                     l821:
  8033  001DB8  90D8               	bcf	status,0,c
  8034  001DBA  321E               	rrcf	__div_to_l_@quot+3,f,c
  8035  001DBC  321D               	rrcf	__div_to_l_@quot+2,f,c
  8036  001DBE  321C               	rrcf	__div_to_l_@quot+1,f,c
  8037  001DC0  321B               	rrcf	__div_to_l_@quot,f,c
  8038  001DC2  3E20               	incfsz	__div_to_l_@exp1,f,c
  8039  001DC4  D7F9               	goto	l821
  8040  001DC6  D015               	goto	u5730
  8041  001DC8                     l820:
  8042  001DC8  0E1F               	movlw	31
  8043  001DCA  6420               	cpfsgt	__div_to_l_@exp1,c
  8044  001DCC  D00F               	goto	l826
  8045  001DCE  0E00               	movlw	0
  8046  001DD0  6E15               	movwf	?__div_to_l_,c
  8047  001DD2  0E00               	movlw	0
  8048  001DD4  6E16               	movwf	?__div_to_l_+1,c
  8049  001DD6  0E00               	movlw	0
  8050  001DD8  6E17               	movwf	?__div_to_l_+2,c
  8051  001DDA  0E00               	movlw	0
  8052  001DDC  6E18               	movwf	?__div_to_l_+3,c
  8053  001DDE  0012               	return	
  8054  001DE0  90D8               	bcf	status,0,c
  8055  001DE2  361B               	rlcf	__div_to_l_@quot,f,c
  8056  001DE4  361C               	rlcf	__div_to_l_@quot+1,f,c
  8057  001DE6  361D               	rlcf	__div_to_l_@quot+2,f,c
  8058  001DE8  361E               	rlcf	__div_to_l_@quot+3,f,c
  8059  001DEA  0620               	decf	__div_to_l_@exp1,f,c
  8060  001DEC                     l826:
  8061  001DEC  5020               	movf	__div_to_l_@exp1,w,c
  8062  001DEE  A4D8               	btfss	status,2,c
  8063  001DF0  D7F7               	goto	l827
  8064  001DF2                     u5730:
  8065  001DF2  C01B  F015         	movff	__div_to_l_@quot,?__div_to_l_
  8066  001DF6  C01C  F016         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8067  001DFA  C01D  F017         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8068  001DFE  C01E  F018         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8069  001E02  0012               	return		;funcret
  8070  001E04                     __end_of__div_to_l_:
  8071                           	opt stack 0
  8072                           tblptru	equ	0xFF8
  8073                           tblptrh	equ	0xFF7
  8074                           tblptrl	equ	0xFF6
  8075                           tablat	equ	0xFF5
  8076                           prodh	equ	0xFF4
  8077                           prodl	equ	0xFF3
  8078                           intcon	equ	0xFF2
  8079                           postinc0	equ	0xFEE
  8080                           wreg	equ	0xFE8
  8081                           indf1	equ	0xFE7
  8082                           postdec1	equ	0xFE5
  8083                           fsr1h	equ	0xFE2
  8084                           fsr1l	equ	0xFE1
  8085                           indf2	equ	0xFDF
  8086                           postinc2	equ	0xFDE
  8087                           postdec2	equ	0xFDD
  8088                           fsr2h	equ	0xFDA
  8089                           fsr2l	equ	0xFD9
  8090                           status	equ	0xFD8
  8091                           
  8092 ;; *************** function ___lltoft *****************
  8093 ;; Defined at:
  8094 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;  c               4   28[COMRAM] unsigned long 
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;  exp             1   36[COMRAM] unsigned char 
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  3   28[COMRAM] float 
  8101 ;; Registers used:
  8102 ;;		wreg, status,2, status,0, cstack
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8108 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8110 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8112 ;;Total ram usage:        9 bytes
  8113 ;; Hardware stack levels used:    1
  8114 ;; Hardware stack levels required when called:    2
  8115 ;; This function calls:
  8116 ;;		___ftpack
  8117 ;; This function is called by:
  8118 ;;		_sprintf
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           	psect	text26
  8123  0028C0                     __ptext26:
  8124                           	opt stack 0
  8125  0028C0                     ___lltoft:
  8126                           	opt stack 27
  8127                           
  8128                           ;incstack = 0
  8129  0028C0  0E8E               	movlw	142
  8130  0028C2  6E25               	movwf	___lltoft@exp,c
  8131  0028C4  D006               	goto	l1025
  8132  0028C6  90D8               	bcf	status,0,c
  8133  0028C8  3220               	rrcf	___lltoft@c+3,f,c
  8134  0028CA  321F               	rrcf	___lltoft@c+2,f,c
  8135  0028CC  321E               	rrcf	___lltoft@c+1,f,c
  8136  0028CE  321D               	rrcf	___lltoft@c,f,c
  8137  0028D0  2A25               	incf	___lltoft@exp,f,c
  8138  0028D2                     l1025:
  8139  0028D2  0E00               	movlw	0
  8140  0028D4  141D               	andwf	___lltoft@c,w,c
  8141  0028D6  6E21               	movwf	??___lltoft& (0+255),c
  8142  0028D8  0E00               	movlw	0
  8143  0028DA  141E               	andwf	___lltoft@c+1,w,c
  8144  0028DC  6E22               	movwf	(??___lltoft+1)& (0+255),c
  8145  0028DE  0E00               	movlw	0
  8146  0028E0  141F               	andwf	___lltoft@c+2,w,c
  8147  0028E2  6E23               	movwf	(??___lltoft+2)& (0+255),c
  8148  0028E4  0EFF               	movlw	255
  8149  0028E6  1420               	andwf	___lltoft@c+3,w,c
  8150  0028E8  6E24               	movwf	(??___lltoft+3)& (0+255),c
  8151  0028EA  5021               	movf	??___lltoft,w,c
  8152  0028EC  1022               	iorwf	??___lltoft+1,w,c
  8153  0028EE  1023               	iorwf	??___lltoft+2,w,c
  8154  0028F0  1024               	iorwf	??___lltoft+3,w,c
  8155  0028F2  A4D8               	btfss	status,2,c
  8156  0028F4  D7E8               	goto	l1026
  8157  0028F6  C01D  F015         	movff	___lltoft@c,___ftpack@arg
  8158  0028FA  C01E  F016         	movff	___lltoft@c+1,___ftpack@arg+1
  8159  0028FE  C01F  F017         	movff	___lltoft@c+2,___ftpack@arg+2
  8160  002902  C025  F018         	movff	___lltoft@exp,___ftpack@exp
  8161  002906  0E00               	movlw	0
  8162  002908  6E19               	movwf	___ftpack@sign,c
  8163  00290A  EC05  F012         	call	___ftpack	;wreg free
  8164  00290E  C015  F01D         	movff	?___ftpack,?___lltoft
  8165  002912  C016  F01E         	movff	?___ftpack+1,?___lltoft+1
  8166  002916  C017  F01F         	movff	?___ftpack+2,?___lltoft+2
  8167  00291A  0012               	return	
  8168  00291C                     __end_of___lltoft:
  8169                           	opt stack 0
  8170                           tblptru	equ	0xFF8
  8171                           tblptrh	equ	0xFF7
  8172                           tblptrl	equ	0xFF6
  8173                           tablat	equ	0xFF5
  8174                           prodh	equ	0xFF4
  8175                           prodl	equ	0xFF3
  8176                           intcon	equ	0xFF2
  8177                           postinc0	equ	0xFEE
  8178                           wreg	equ	0xFE8
  8179                           indf1	equ	0xFE7
  8180                           postdec1	equ	0xFE5
  8181                           fsr1h	equ	0xFE2
  8182                           fsr1l	equ	0xFE1
  8183                           indf2	equ	0xFDF
  8184                           postinc2	equ	0xFDE
  8185                           postdec2	equ	0xFDD
  8186                           fsr2h	equ	0xFDA
  8187                           fsr2l	equ	0xFD9
  8188                           status	equ	0xFD8
  8189                           
  8190 ;; *************** function ___llmod *****************
  8191 ;; Defined at:
  8192 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;  dividend        4   33[COMRAM] unsigned long 
  8195 ;;  divisor         4   37[COMRAM] unsigned long 
  8196 ;; Auto vars:     Size  Location     Type
  8197 ;;  counter         1   41[COMRAM] unsigned char 
  8198 ;; Return value:  Size  Location     Type
  8199 ;;                  4   33[COMRAM] unsigned long 
  8200 ;; Registers used:
  8201 ;;		wreg, status,2, status,0
  8202 ;; Tracked objects:
  8203 ;;		On entry : 0/0
  8204 ;;		On exit  : 0/0
  8205 ;;		Unchanged: 0/0
  8206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8207 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8211 ;;Total ram usage:        9 bytes
  8212 ;; Hardware stack levels used:    1
  8213 ;; Hardware stack levels required when called:    1
  8214 ;; This function calls:
  8215 ;;		Nothing
  8216 ;; This function is called by:
  8217 ;;		_sprintf
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text27
  8222  0027F8                     __ptext27:
  8223                           	opt stack 0
  8224  0027F8                     ___llmod:
  8225                           	opt stack 28
  8226                           
  8227                           ;incstack = 0
  8228  0027F8  5026               	movf	___llmod@divisor,w,c
  8229  0027FA  1027               	iorwf	___llmod@divisor+1,w,c
  8230  0027FC  1028               	iorwf	___llmod@divisor+2,w,c
  8231  0027FE  1029               	iorwf	___llmod@divisor+3,w,c
  8232  002800  B4D8               	btfsc	status,2,c
  8233  002802  D024               	goto	l1019
  8234  002804  0E01               	movlw	1
  8235  002806  6E2A               	movwf	___llmod@counter,c
  8236  002808  D006               	goto	l1014
  8237  00280A  90D8               	bcf	status,0,c
  8238  00280C  3626               	rlcf	___llmod@divisor,f,c
  8239  00280E  3627               	rlcf	___llmod@divisor+1,f,c
  8240  002810  3628               	rlcf	___llmod@divisor+2,f,c
  8241  002812  3629               	rlcf	___llmod@divisor+3,f,c
  8242  002814  2A2A               	incf	___llmod@counter,f,c
  8243  002816                     l1014:
  8244  002816  AE29               	btfss	___llmod@divisor+3,7,c
  8245  002818  D7F8               	goto	l1015
  8246  00281A                     u5970:
  8247  00281A  5026               	movf	___llmod@divisor,w,c
  8248  00281C  5C22               	subwf	___llmod@dividend,w,c
  8249  00281E  5027               	movf	___llmod@divisor+1,w,c
  8250  002820  5823               	subwfb	___llmod@dividend+1,w,c
  8251  002822  5028               	movf	___llmod@divisor+2,w,c
  8252  002824  5824               	subwfb	___llmod@dividend+2,w,c
  8253  002826  5029               	movf	___llmod@divisor+3,w,c
  8254  002828  5825               	subwfb	___llmod@dividend+3,w,c
  8255  00282A  A0D8               	btfss	status,0,c
  8256  00282C  D008               	goto	l1018
  8257  00282E  5026               	movf	___llmod@divisor,w,c
  8258  002830  5E22               	subwf	___llmod@dividend,f,c
  8259  002832  5027               	movf	___llmod@divisor+1,w,c
  8260  002834  5A23               	subwfb	___llmod@dividend+1,f,c
  8261  002836  5028               	movf	___llmod@divisor+2,w,c
  8262  002838  5A24               	subwfb	___llmod@dividend+2,f,c
  8263  00283A  5029               	movf	___llmod@divisor+3,w,c
  8264  00283C  5A25               	subwfb	___llmod@dividend+3,f,c
  8265  00283E                     l1018:
  8266  00283E  90D8               	bcf	status,0,c
  8267  002840  3229               	rrcf	___llmod@divisor+3,f,c
  8268  002842  3228               	rrcf	___llmod@divisor+2,f,c
  8269  002844  3227               	rrcf	___llmod@divisor+1,f,c
  8270  002846  3226               	rrcf	___llmod@divisor,f,c
  8271  002848  2E2A               	decfsz	___llmod@counter,f,c
  8272  00284A  D7E7               	goto	u5970
  8273  00284C                     l1019:
  8274  00284C  C022  F022         	movff	___llmod@dividend,?___llmod
  8275  002850  C023  F023         	movff	___llmod@dividend+1,?___llmod+1
  8276  002854  C024  F024         	movff	___llmod@dividend+2,?___llmod+2
  8277  002858  C025  F025         	movff	___llmod@dividend+3,?___llmod+3
  8278  00285C  0012               	return		;funcret
  8279  00285E                     __end_of___llmod:
  8280                           	opt stack 0
  8281                           tblptru	equ	0xFF8
  8282                           tblptrh	equ	0xFF7
  8283                           tblptrl	equ	0xFF6
  8284                           tablat	equ	0xFF5
  8285                           prodh	equ	0xFF4
  8286                           prodl	equ	0xFF3
  8287                           intcon	equ	0xFF2
  8288                           postinc0	equ	0xFEE
  8289                           wreg	equ	0xFE8
  8290                           indf1	equ	0xFE7
  8291                           postdec1	equ	0xFE5
  8292                           fsr1h	equ	0xFE2
  8293                           fsr1l	equ	0xFE1
  8294                           indf2	equ	0xFDF
  8295                           postinc2	equ	0xFDE
  8296                           postdec2	equ	0xFDD
  8297                           fsr2h	equ	0xFDA
  8298                           fsr2l	equ	0xFD9
  8299                           status	equ	0xFD8
  8300                           
  8301 ;; *************** function ___lldiv *****************
  8302 ;; Defined at:
  8303 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;  dividend        4   20[COMRAM] unsigned long 
  8306 ;;  divisor         4   24[COMRAM] unsigned long 
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  quotient        4   28[COMRAM] unsigned long 
  8309 ;;  counter         1   32[COMRAM] unsigned char 
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  4   20[COMRAM] unsigned long 
  8312 ;; Registers used:
  8313 ;;		wreg, status,2, status,0
  8314 ;; Tracked objects:
  8315 ;;		On entry : 0/0
  8316 ;;		On exit  : 0/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8319 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8320 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;Total ram usage:       13 bytes
  8324 ;; Hardware stack levels used:    1
  8325 ;; Hardware stack levels required when called:    1
  8326 ;; This function calls:
  8327 ;;		Nothing
  8328 ;; This function is called by:
  8329 ;;		_sprintf
  8330 ;; This function uses a non-reentrant model
  8331 ;;
  8332                           
  8333                           	psect	text28
  8334  0025CC                     __ptext28:
  8335                           	opt stack 0
  8336  0025CC                     ___lldiv:
  8337                           	opt stack 28
  8338                           
  8339                           ;incstack = 0
  8340  0025CC  0E00               	movlw	0
  8341  0025CE  6E1D               	movwf	___lldiv@quotient,c
  8342  0025D0  0E00               	movlw	0
  8343  0025D2  6E1E               	movwf	___lldiv@quotient+1,c
  8344  0025D4  0E00               	movlw	0
  8345  0025D6  6E1F               	movwf	___lldiv@quotient+2,c
  8346  0025D8  0E00               	movlw	0
  8347  0025DA  6E20               	movwf	___lldiv@quotient+3,c
  8348  0025DC  5019               	movf	___lldiv@divisor,w,c
  8349  0025DE  101A               	iorwf	___lldiv@divisor+1,w,c
  8350  0025E0  101B               	iorwf	___lldiv@divisor+2,w,c
  8351  0025E2  101C               	iorwf	___lldiv@divisor+3,w,c
  8352  0025E4  B4D8               	btfsc	status,2,c
  8353  0025E6  D02A               	goto	l1009
  8354  0025E8  0E01               	movlw	1
  8355  0025EA  6E21               	movwf	___lldiv@counter,c
  8356  0025EC  D006               	goto	l1004
  8357  0025EE  90D8               	bcf	status,0,c
  8358  0025F0  3619               	rlcf	___lldiv@divisor,f,c
  8359  0025F2  361A               	rlcf	___lldiv@divisor+1,f,c
  8360  0025F4  361B               	rlcf	___lldiv@divisor+2,f,c
  8361  0025F6  361C               	rlcf	___lldiv@divisor+3,f,c
  8362  0025F8  2A21               	incf	___lldiv@counter,f,c
  8363  0025FA                     l1004:
  8364  0025FA  AE1C               	btfss	___lldiv@divisor+3,7,c
  8365  0025FC  D7F8               	goto	l1005
  8366  0025FE                     u5940:
  8367  0025FE  90D8               	bcf	status,0,c
  8368  002600  361D               	rlcf	___lldiv@quotient,f,c
  8369  002602  361E               	rlcf	___lldiv@quotient+1,f,c
  8370  002604  361F               	rlcf	___lldiv@quotient+2,f,c
  8371  002606  3620               	rlcf	___lldiv@quotient+3,f,c
  8372  002608  5019               	movf	___lldiv@divisor,w,c
  8373  00260A  5C15               	subwf	___lldiv@dividend,w,c
  8374  00260C  501A               	movf	___lldiv@divisor+1,w,c
  8375  00260E  5816               	subwfb	___lldiv@dividend+1,w,c
  8376  002610  501B               	movf	___lldiv@divisor+2,w,c
  8377  002612  5817               	subwfb	___lldiv@dividend+2,w,c
  8378  002614  501C               	movf	___lldiv@divisor+3,w,c
  8379  002616  5818               	subwfb	___lldiv@dividend+3,w,c
  8380  002618  A0D8               	btfss	status,0,c
  8381  00261A  D009               	goto	l1008
  8382  00261C  5019               	movf	___lldiv@divisor,w,c
  8383  00261E  5E15               	subwf	___lldiv@dividend,f,c
  8384  002620  501A               	movf	___lldiv@divisor+1,w,c
  8385  002622  5A16               	subwfb	___lldiv@dividend+1,f,c
  8386  002624  501B               	movf	___lldiv@divisor+2,w,c
  8387  002626  5A17               	subwfb	___lldiv@dividend+2,f,c
  8388  002628  501C               	movf	___lldiv@divisor+3,w,c
  8389  00262A  5A18               	subwfb	___lldiv@dividend+3,f,c
  8390  00262C  801D               	bsf	___lldiv@quotient,0,c
  8391  00262E                     l1008:
  8392  00262E  90D8               	bcf	status,0,c
  8393  002630  321C               	rrcf	___lldiv@divisor+3,f,c
  8394  002632  321B               	rrcf	___lldiv@divisor+2,f,c
  8395  002634  321A               	rrcf	___lldiv@divisor+1,f,c
  8396  002636  3219               	rrcf	___lldiv@divisor,f,c
  8397  002638  2E21               	decfsz	___lldiv@counter,f,c
  8398  00263A  D7E1               	goto	u5940
  8399  00263C                     l1009:
  8400  00263C  C01D  F015         	movff	___lldiv@quotient,?___lldiv
  8401  002640  C01E  F016         	movff	___lldiv@quotient+1,?___lldiv+1
  8402  002644  C01F  F017         	movff	___lldiv@quotient+2,?___lldiv+2
  8403  002648  C020  F018         	movff	___lldiv@quotient+3,?___lldiv+3
  8404  00264C  0012               	return		;funcret
  8405  00264E                     __end_of___lldiv:
  8406                           	opt stack 0
  8407                           tblptru	equ	0xFF8
  8408                           tblptrh	equ	0xFF7
  8409                           tblptrl	equ	0xFF6
  8410                           tablat	equ	0xFF5
  8411                           prodh	equ	0xFF4
  8412                           prodl	equ	0xFF3
  8413                           intcon	equ	0xFF2
  8414                           postinc0	equ	0xFEE
  8415                           wreg	equ	0xFE8
  8416                           indf1	equ	0xFE7
  8417                           postdec1	equ	0xFE5
  8418                           fsr1h	equ	0xFE2
  8419                           fsr1l	equ	0xFE1
  8420                           indf2	equ	0xFDF
  8421                           postinc2	equ	0xFDE
  8422                           postdec2	equ	0xFDD
  8423                           fsr2h	equ	0xFDA
  8424                           fsr2l	equ	0xFD9
  8425                           status	equ	0xFD8
  8426                           
  8427 ;; *************** function ___ftsub *****************
  8428 ;; Defined at:
  8429 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  8430 ;; Parameters:    Size  Location     Type
  8431 ;;  f1              3   77[COMRAM] float 
  8432 ;;  f2              3   80[COMRAM] float 
  8433 ;; Auto vars:     Size  Location     Type
  8434 ;;		None
  8435 ;; Return value:  Size  Location     Type
  8436 ;;                  3   77[COMRAM] float 
  8437 ;; Registers used:
  8438 ;;		wreg, status,2, status,0, cstack
  8439 ;; Tracked objects:
  8440 ;;		On entry : 0/0
  8441 ;;		On exit  : 0/0
  8442 ;;		Unchanged: 0/0
  8443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8444 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8447 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8448 ;;Total ram usage:        6 bytes
  8449 ;; Hardware stack levels used:    1
  8450 ;; Hardware stack levels required when called:    3
  8451 ;; This function calls:
  8452 ;;		___ftadd
  8453 ;; This function is called by:
  8454 ;;		_sprintf
  8455 ;; This function uses a non-reentrant model
  8456 ;;
  8457                           
  8458                           	psect	text29
  8459  002AA8                     __ptext29:
  8460                           	opt stack 0
  8461  002AA8                     ___ftsub:
  8462                           	opt stack 26
  8463                           
  8464                           ;incstack = 0
  8465  002AA8  5051               	movf	___ftsub@f2,w,c
  8466  002AAA  1052               	iorwf	___ftsub@f2+1,w,c
  8467  002AAC  1053               	iorwf	___ftsub@f2+2,w,c
  8468  002AAE  B4D8               	btfsc	status,2,c
  8469  002AB0  D006               	goto	l959
  8470  002AB2  0E00               	movlw	0
  8471  002AB4  1A51               	xorwf	___ftsub@f2,f,c
  8472  002AB6  0E00               	movlw	0
  8473  002AB8  1A52               	xorwf	___ftsub@f2+1,f,c
  8474  002ABA  0E80               	movlw	128
  8475  002ABC  1A53               	xorwf	___ftsub@f2+2,f,c
  8476  002ABE                     l959:
  8477  002ABE  C04E  F042         	movff	___ftsub@f1,___ftadd@f1
  8478  002AC2  C04F  F043         	movff	___ftsub@f1+1,___ftadd@f1+1
  8479  002AC6  C050  F044         	movff	___ftsub@f1+2,___ftadd@f1+2
  8480  002ACA  C051  F045         	movff	___ftsub@f2,___ftadd@f2
  8481  002ACE  C052  F046         	movff	___ftsub@f2+1,___ftadd@f2+1
  8482  002AD2  C053  F047         	movff	___ftsub@f2+2,___ftadd@f2+2
  8483  002AD6  EC4F  F00C         	call	___ftadd	;wreg free
  8484  002ADA  C042  F04E         	movff	?___ftadd,?___ftsub
  8485  002ADE  C043  F04F         	movff	?___ftadd+1,?___ftsub+1
  8486  002AE2  C044  F050         	movff	?___ftadd+2,?___ftsub+2
  8487  002AE6  0012               	return	
  8488  002AE8                     __end_of___ftsub:
  8489                           	opt stack 0
  8490                           tblptru	equ	0xFF8
  8491                           tblptrh	equ	0xFF7
  8492                           tblptrl	equ	0xFF6
  8493                           tablat	equ	0xFF5
  8494                           prodh	equ	0xFF4
  8495                           prodl	equ	0xFF3
  8496                           intcon	equ	0xFF2
  8497                           postinc0	equ	0xFEE
  8498                           wreg	equ	0xFE8
  8499                           indf1	equ	0xFE7
  8500                           postdec1	equ	0xFE5
  8501                           fsr1h	equ	0xFE2
  8502                           fsr1l	equ	0xFE1
  8503                           indf2	equ	0xFDF
  8504                           postinc2	equ	0xFDE
  8505                           postdec2	equ	0xFDD
  8506                           fsr2h	equ	0xFDA
  8507                           fsr2l	equ	0xFD9
  8508                           status	equ	0xFD8
  8509                           
  8510 ;; *************** function ___ftneg *****************
  8511 ;; Defined at:
  8512 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  8513 ;; Parameters:    Size  Location     Type
  8514 ;;  f1              3   20[COMRAM] float 
  8515 ;; Auto vars:     Size  Location     Type
  8516 ;;		None
  8517 ;; Return value:  Size  Location     Type
  8518 ;;                  3   20[COMRAM] float 
  8519 ;; Registers used:
  8520 ;;		wreg, status,2, status,0
  8521 ;; Tracked objects:
  8522 ;;		On entry : 0/0
  8523 ;;		On exit  : 0/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8526 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8529 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8530 ;;Total ram usage:        3 bytes
  8531 ;; Hardware stack levels used:    1
  8532 ;; Hardware stack levels required when called:    1
  8533 ;; This function calls:
  8534 ;;		Nothing
  8535 ;; This function is called by:
  8536 ;;		_sprintf
  8537 ;;		_set_pwm1_general
  8538 ;; This function uses a non-reentrant model
  8539 ;;
  8540                           
  8541                           	psect	text30
  8542  002CD0                     __ptext30:
  8543                           	opt stack 0
  8544  002CD0                     ___ftneg:
  8545                           	opt stack 28
  8546                           
  8547                           ;incstack = 0
  8548  002CD0  5015               	movf	___ftneg@f1,w,c
  8549  002CD2  1016               	iorwf	___ftneg@f1+1,w,c
  8550  002CD4  1017               	iorwf	___ftneg@f1+2,w,c
  8551  002CD6  B4D8               	btfsc	status,2,c
  8552  002CD8  D006               	goto	l953
  8553  002CDA  0E00               	movlw	0
  8554  002CDC  1A15               	xorwf	___ftneg@f1,f,c
  8555  002CDE  0E00               	movlw	0
  8556  002CE0  1A16               	xorwf	___ftneg@f1+1,f,c
  8557  002CE2  0E80               	movlw	128
  8558  002CE4  1A17               	xorwf	___ftneg@f1+2,f,c
  8559  002CE6                     l953:
  8560  002CE6  C015  F015         	movff	___ftneg@f1,?___ftneg
  8561  002CEA  C016  F016         	movff	___ftneg@f1+1,?___ftneg+1
  8562  002CEE  C017  F017         	movff	___ftneg@f1+2,?___ftneg+2
  8563  002CF2  0012               	return		;funcret
  8564  002CF4                     __end_of___ftneg:
  8565                           	opt stack 0
  8566                           tblptru	equ	0xFF8
  8567                           tblptrh	equ	0xFF7
  8568                           tblptrl	equ	0xFF6
  8569                           tablat	equ	0xFF5
  8570                           prodh	equ	0xFF4
  8571                           prodl	equ	0xFF3
  8572                           intcon	equ	0xFF2
  8573                           postinc0	equ	0xFEE
  8574                           wreg	equ	0xFE8
  8575                           indf1	equ	0xFE7
  8576                           postdec1	equ	0xFE5
  8577                           fsr1h	equ	0xFE2
  8578                           fsr1l	equ	0xFE1
  8579                           indf2	equ	0xFDF
  8580                           postinc2	equ	0xFDE
  8581                           postdec2	equ	0xFDD
  8582                           fsr2h	equ	0xFDA
  8583                           fsr2l	equ	0xFD9
  8584                           status	equ	0xFD8
  8585                           
  8586 ;; *************** function ___ftge *****************
  8587 ;; Defined at:
  8588 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  8589 ;; Parameters:    Size  Location     Type
  8590 ;;  ff1             3   20[COMRAM] float 
  8591 ;;  ff2             3   23[COMRAM] float 
  8592 ;; Auto vars:     Size  Location     Type
  8593 ;;		None
  8594 ;; Return value:  Size  Location     Type
  8595 ;;		None               void
  8596 ;; Registers used:
  8597 ;;		wreg, status,2, status,0
  8598 ;; Tracked objects:
  8599 ;;		On entry : 0/0
  8600 ;;		On exit  : 0/0
  8601 ;;		Unchanged: 0/0
  8602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8603 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8605 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8606 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8607 ;;Total ram usage:        9 bytes
  8608 ;; Hardware stack levels used:    1
  8609 ;; Hardware stack levels required when called:    1
  8610 ;; This function calls:
  8611 ;;		Nothing
  8612 ;; This function is called by:
  8613 ;;		_sprintf
  8614 ;; This function uses a non-reentrant model
  8615 ;;
  8616                           
  8617                           	psect	text31
  8618  0024B8                     __ptext31:
  8619                           	opt stack 0
  8620  0024B8                     ___ftge:
  8621                           	opt stack 28
  8622                           
  8623                           ;incstack = 0
  8624  0024B8  AE17               	btfss	___ftge@ff1+2,7,c
  8625  0024BA  D016               	goto	l935
  8626  0024BC  C015  F01B         	movff	___ftge@ff1,??___ftge
  8627  0024C0  C016  F01C         	movff	___ftge@ff1+1,??___ftge+1
  8628  0024C4  C017  F01D         	movff	___ftge@ff1+2,??___ftge+2
  8629  0024C8  1E1B               	comf	??___ftge,f,c
  8630  0024CA  1E1C               	comf	??___ftge+1,f,c
  8631  0024CC  1E1D               	comf	??___ftge+2,f,c
  8632  0024CE  2A1B               	incf	??___ftge,f,c
  8633  0024D0  0E00               	movlw	0
  8634  0024D2  221C               	addwfc	??___ftge+1,f,c
  8635  0024D4  221D               	addwfc	??___ftge+2,f,c
  8636  0024D6  0E00               	movlw	0
  8637  0024D8  241B               	addwf	??___ftge,w,c
  8638  0024DA  6E15               	movwf	___ftge@ff1,c
  8639  0024DC  0E00               	movlw	0
  8640  0024DE  201C               	addwfc	??___ftge+1,w,c
  8641  0024E0  6E16               	movwf	___ftge@ff1+1,c
  8642  0024E2  0E80               	movlw	128
  8643  0024E4  201D               	addwfc	??___ftge+2,w,c
  8644  0024E6  6E17               	movwf	___ftge@ff1+2,c
  8645  0024E8                     l935:
  8646  0024E8  AE1A               	btfss	___ftge@ff2+2,7,c
  8647  0024EA  D016               	goto	l936
  8648  0024EC  C018  F01B         	movff	___ftge@ff2,??___ftge
  8649  0024F0  C019  F01C         	movff	___ftge@ff2+1,??___ftge+1
  8650  0024F4  C01A  F01D         	movff	___ftge@ff2+2,??___ftge+2
  8651  0024F8  1E1B               	comf	??___ftge,f,c
  8652  0024FA  1E1C               	comf	??___ftge+1,f,c
  8653  0024FC  1E1D               	comf	??___ftge+2,f,c
  8654  0024FE  2A1B               	incf	??___ftge,f,c
  8655  002500  0E00               	movlw	0
  8656  002502  221C               	addwfc	??___ftge+1,f,c
  8657  002504  221D               	addwfc	??___ftge+2,f,c
  8658  002506  0E00               	movlw	0
  8659  002508  241B               	addwf	??___ftge,w,c
  8660  00250A  6E18               	movwf	___ftge@ff2,c
  8661  00250C  0E00               	movlw	0
  8662  00250E  201C               	addwfc	??___ftge+1,w,c
  8663  002510  6E19               	movwf	___ftge@ff2+1,c
  8664  002512  0E80               	movlw	128
  8665  002514  201D               	addwfc	??___ftge+2,w,c
  8666  002516  6E1A               	movwf	___ftge@ff2+2,c
  8667  002518                     l936:
  8668  002518  0E00               	movlw	0
  8669  00251A  1A15               	xorwf	___ftge@ff1,f,c
  8670  00251C  0E00               	movlw	0
  8671  00251E  1A16               	xorwf	___ftge@ff1+1,f,c
  8672  002520  0E80               	movlw	128
  8673  002522  1A17               	xorwf	___ftge@ff1+2,f,c
  8674  002524  0E00               	movlw	0
  8675  002526  1A18               	xorwf	___ftge@ff2,f,c
  8676  002528  0E00               	movlw	0
  8677  00252A  1A19               	xorwf	___ftge@ff2+1,f,c
  8678  00252C  0E80               	movlw	128
  8679  00252E  1A1A               	xorwf	___ftge@ff2+2,f,c
  8680  002530  5018               	movf	___ftge@ff2,w,c
  8681  002532  5C15               	subwf	___ftge@ff1,w,c
  8682  002534  5019               	movf	___ftge@ff2+1,w,c
  8683  002536  5816               	subwfb	___ftge@ff1+1,w,c
  8684  002538  501A               	movf	___ftge@ff2+2,w,c
  8685  00253A  5817               	subwfb	___ftge@ff1+2,w,c
  8686  00253C  B0D8               	btfsc	status,0,c
  8687  00253E  D002               	goto	l4797
  8688  002540  90D8               	bcf	status,0,c
  8689  002542  0012               	return	
  8690  002544                     l4797:
  8691  002544  80D8               	bsf	status,0,c
  8692  002546  0012               	return	
  8693  002548                     __end_of___ftge:
  8694                           	opt stack 0
  8695                           tblptru	equ	0xFF8
  8696                           tblptrh	equ	0xFF7
  8697                           tblptrl	equ	0xFF6
  8698                           tablat	equ	0xFF5
  8699                           prodh	equ	0xFF4
  8700                           prodl	equ	0xFF3
  8701                           intcon	equ	0xFF2
  8702                           postinc0	equ	0xFEE
  8703                           wreg	equ	0xFE8
  8704                           indf1	equ	0xFE7
  8705                           postdec1	equ	0xFE5
  8706                           fsr1h	equ	0xFE2
  8707                           fsr1l	equ	0xFE1
  8708                           indf2	equ	0xFDF
  8709                           postinc2	equ	0xFDE
  8710                           postdec2	equ	0xFDD
  8711                           fsr2h	equ	0xFDA
  8712                           fsr2l	equ	0xFD9
  8713                           status	equ	0xFD8
  8714                           
  8715 ;; *************** function _lcd_putc *****************
  8716 ;; Defined at:
  8717 ;;		line 99 in file "lcd_x8.c"
  8718 ;; Parameters:    Size  Location     Type
  8719 ;;  c               1    wreg     unsigned char 
  8720 ;; Auto vars:     Size  Location     Type
  8721 ;;  c               1   33[COMRAM] unsigned char 
  8722 ;; Return value:  Size  Location     Type
  8723 ;;                  1    wreg      void 
  8724 ;; Registers used:
  8725 ;;		wreg, status,2, status,0, cstack
  8726 ;; Tracked objects:
  8727 ;;		On entry : 0/0
  8728 ;;		On exit  : 0/0
  8729 ;;		Unchanged: 0/0
  8730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8732 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8734 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;Total ram usage:        1 bytes
  8736 ;; Hardware stack levels used:    1
  8737 ;; Hardware stack levels required when called:    5
  8738 ;; This function calls:
  8739 ;;		_delay_ms
  8740 ;;		_lcd_gotoxy
  8741 ;;		_lcd_send_byte
  8742 ;; This function is called by:
  8743 ;;		_lcdPrint
  8744 ;;		_executeWriteCommand
  8745 ;;		_main
  8746 ;;		_lcd_puts
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           	psect	text32
  8751  002972                     __ptext32:
  8752                           	opt stack 0
  8753  002972                     _lcd_putc:
  8754                           	opt stack 25
  8755                           
  8756                           ;incstack = 0
  8757                           ;lcd_putc@c stored from wreg
  8758  002972  6E22               	movwf	lcd_putc@c,c
  8759                           
  8760                           ;lcd_x8.c: 100: switch (c) {
  8761  002974  D01E               	goto	l367
  8762  002976  0E01               	movlw	1
  8763  002978  6E1D               	movwf	lcd_send_byte@n,c
  8764  00297A  0E00               	movlw	0
  8765  00297C  EC0F  F015         	call	_lcd_send_byte
  8766                           
  8767                           ;lcd_x8.c: 102: delay_ms(2);
  8768  002980  0E00               	movlw	0
  8769  002982  6E16               	movwf	delay_ms@n+1,c
  8770  002984  0E02               	movlw	2
  8771  002986  6E15               	movwf	delay_ms@n,c
  8772  002988  EC43  F016         	call	_delay_ms	;wreg free
  8773                           
  8774                           ;lcd_x8.c: 103: break;
  8775  00298C  0012               	return	
  8776  00298E  0E02               	movlw	2
  8777  002990  6E1F               	movwf	lcd_gotoxy@y,c
  8778  002992  0E01               	movlw	1
  8779  002994  EC33  F015         	call	_lcd_gotoxy
  8780                           
  8781                           ;lcd_x8.c: 105: break;
  8782  002998  0012               	return	
  8783  00299A  0E10               	movlw	16
  8784  00299C  6E1D               	movwf	lcd_send_byte@n,c
  8785  00299E  0E00               	movlw	0
  8786  0029A0  EC0F  F015         	call	_lcd_send_byte
  8787                           
  8788                           ;lcd_x8.c: 107: break;
  8789  0029A4  0012               	return	
  8790  0029A6  C022  F01D         	movff	lcd_putc@c,lcd_send_byte@n
  8791  0029AA  0E01               	movlw	1
  8792  0029AC  EC0F  F015         	call	_lcd_send_byte
  8793                           
  8794                           ;lcd_x8.c: 110: }
  8795                           
  8796                           ;lcd_x8.c: 109: break;
  8797  0029B0  0012               	return	
  8798  0029B2                     l367:
  8799  0029B2  5022               	movf	lcd_putc@c,w,c
  8800                           
  8801                           ; Switch size 1, requested type "space"
  8802                           ; Number of cases is 3, Range of values is 8 to 12
  8803                           ; switch strategies available:
  8804                           ; Name         Instructions Cycles
  8805                           ; simple_byte           10     6 (average)
  8806                           ;	Chosen strategy is simple_byte
  8807  0029B4  0A08               	xorlw	8	; case 8
  8808  0029B6  B4D8               	btfsc	status,2,c
  8809  0029B8  D7F0               	goto	l371
  8810  0029BA  0A02               	xorlw	2	; case 10
  8811  0029BC  B4D8               	btfsc	status,2,c
  8812  0029BE  D7E7               	goto	l370
  8813  0029C0  0A06               	xorlw	6	; case 12
  8814  0029C2  B4D8               	btfsc	status,2,c
  8815  0029C4  D7D8               	goto	l368
  8816  0029C6  D7EF               	goto	l372
  8817  0029C8                     __end_of_lcd_putc:
  8818                           	opt stack 0
  8819                           tblptru	equ	0xFF8
  8820                           tblptrh	equ	0xFF7
  8821                           tblptrl	equ	0xFF6
  8822                           tablat	equ	0xFF5
  8823                           prodh	equ	0xFF4
  8824                           prodl	equ	0xFF3
  8825                           intcon	equ	0xFF2
  8826                           postinc0	equ	0xFEE
  8827                           wreg	equ	0xFE8
  8828                           indf1	equ	0xFE7
  8829                           postdec1	equ	0xFE5
  8830                           fsr1h	equ	0xFE2
  8831                           fsr1l	equ	0xFE1
  8832                           indf2	equ	0xFDF
  8833                           postinc2	equ	0xFDE
  8834                           postdec2	equ	0xFDD
  8835                           fsr2h	equ	0xFDA
  8836                           fsr2l	equ	0xFD9
  8837                           status	equ	0xFD8
  8838                           
  8839 ;; *************** function _lcd_gotoxy *****************
  8840 ;; Defined at:
  8841 ;;		line 82 in file "lcd_x8.c"
  8842 ;; Parameters:    Size  Location     Type
  8843 ;;  x               1    wreg     unsigned char 
  8844 ;;  y               1   30[COMRAM] unsigned char 
  8845 ;; Auto vars:     Size  Location     Type
  8846 ;;  x               1   31[COMRAM] unsigned char 
  8847 ;;  address         1   32[COMRAM] unsigned char 
  8848 ;; Return value:  Size  Location     Type
  8849 ;;                  1    wreg      void 
  8850 ;; Registers used:
  8851 ;;		wreg, status,2, status,0, cstack
  8852 ;; Tracked objects:
  8853 ;;		On entry : 0/0
  8854 ;;		On exit  : 0/0
  8855 ;;		Unchanged: 0/0
  8856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8857 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8858 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8860 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8861 ;;Total ram usage:        3 bytes
  8862 ;; Hardware stack levels used:    1
  8863 ;; Hardware stack levels required when called:    4
  8864 ;; This function calls:
  8865 ;;		_lcd_send_byte
  8866 ;; This function is called by:
  8867 ;;		_lcdPrint
  8868 ;;		_lcd_putc
  8869 ;; This function uses a non-reentrant model
  8870 ;;
  8871                           
  8872                           	psect	text33
  8873  002A66                     __ptext33:
  8874                           	opt stack 0
  8875  002A66                     _lcd_gotoxy:
  8876                           	opt stack 25
  8877                           
  8878                           ;incstack = 0
  8879                           ;lcd_gotoxy@x stored from wreg
  8880  002A66  6E20               	movwf	lcd_gotoxy@x,c
  8881                           
  8882                           ;lcd_x8.c: 83: unsigned char address;
  8883                           ;lcd_x8.c: 85: switch (y) {
  8884  002A68  D009               	goto	l358
  8885  002A6A  0E80               	movlw	128
  8886  002A6C  D005               	goto	L5
  8887  002A6E  0EC0               	movlw	192
  8888  002A70  D003               	goto	L5
  8889  002A72  0E90               	movlw	144
  8890  002A74  D001               	goto	L5
  8891  002A76  0ED0               	movlw	208
  8892  002A78                     L5:
  8893  002A78  6E21               	movwf	lcd_gotoxy@address,c
  8894                           
  8895                           ;lcd_x8.c: 94: }
  8896                           
  8897                           ;lcd_x8.c: 93: break;
  8898  002A7A  D00D               	goto	l360
  8899  002A7C                     l358:
  8900  002A7C  501F               	movf	lcd_gotoxy@y,w,c
  8901                           
  8902                           ; Switch size 1, requested type "space"
  8903                           ; Number of cases is 4, Range of values is 1 to 4
  8904                           ; switch strategies available:
  8905                           ; Name         Instructions Cycles
  8906                           ; simple_byte           13     7 (average)
  8907                           ;	Chosen strategy is simple_byte
  8908  002A7E  0A01               	xorlw	1	; case 1
  8909  002A80  B4D8               	btfsc	status,2,c
  8910  002A82  D7F3               	goto	l359
  8911  002A84  0A03               	xorlw	3	; case 2
  8912  002A86  B4D8               	btfsc	status,2,c
  8913  002A88  D7F2               	goto	l361
  8914  002A8A  0A01               	xorlw	1	; case 3
  8915  002A8C  B4D8               	btfsc	status,2,c
  8916  002A8E  D7F1               	goto	l362
  8917  002A90  0A07               	xorlw	7	; case 4
  8918  002A92  B4D8               	btfsc	status,2,c
  8919  002A94  D7F0               	goto	l363
  8920  002A96                     l360:
  8921                           
  8922                           ;lcd_x8.c: 95: address += x - 1;
  8923  002A96  0420               	decf	lcd_gotoxy@x,w,c
  8924  002A98  2621               	addwf	lcd_gotoxy@address,f,c
  8925                           
  8926                           ;lcd_x8.c: 96: lcd_send_byte(0, (unsigned char) (0x80 | address));
  8927  002A9A  5021               	movf	lcd_gotoxy@address,w,c
  8928  002A9C  0980               	iorlw	128
  8929  002A9E  6E1D               	movwf	lcd_send_byte@n,c
  8930  002AA0  0E00               	movlw	0
  8931  002AA2  EC0F  F015         	call	_lcd_send_byte
  8932  002AA6  0012               	return		;funcret
  8933  002AA8                     __end_of_lcd_gotoxy:
  8934                           	opt stack 0
  8935                           tblptru	equ	0xFF8
  8936                           tblptrh	equ	0xFF7
  8937                           tblptrl	equ	0xFF6
  8938                           tablat	equ	0xFF5
  8939                           prodh	equ	0xFF4
  8940                           prodl	equ	0xFF3
  8941                           intcon	equ	0xFF2
  8942                           postinc0	equ	0xFEE
  8943                           wreg	equ	0xFE8
  8944                           indf1	equ	0xFE7
  8945                           postdec1	equ	0xFE5
  8946                           fsr1h	equ	0xFE2
  8947                           fsr1l	equ	0xFE1
  8948                           indf2	equ	0xFDF
  8949                           postinc2	equ	0xFDE
  8950                           postdec2	equ	0xFDD
  8951                           fsr2h	equ	0xFDA
  8952                           fsr2l	equ	0xFD9
  8953                           status	equ	0xFD8
  8954                           
  8955 ;; *************** function _executePWMCommand *****************
  8956 ;; Defined at:
  8957 ;;		line 271 in file "project.c"
  8958 ;; Parameters:    Size  Location     Type
  8959 ;;  percentage      2   86[COMRAM] unsigned int 
  8960 ;; Auto vars:     Size  Location     Type
  8961 ;;  tmp             3    6[BANK0 ] float 
  8962 ;; Return value:  Size  Location     Type
  8963 ;;                  1    wreg      void 
  8964 ;; Registers used:
  8965 ;;		wreg, status,2, status,0, cstack
  8966 ;; Tracked objects:
  8967 ;;		On entry : 0/0
  8968 ;;		On exit  : 0/0
  8969 ;;		Unchanged: 0/0
  8970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8971 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8972 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8974 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8975 ;;Total ram usage:        5 bytes
  8976 ;; Hardware stack levels used:    1
  8977 ;; Hardware stack levels required when called:    3
  8978 ;; This function calls:
  8979 ;;		___ftadd
  8980 ;;		___ftdiv
  8981 ;;		___ftmul
  8982 ;;		___fttol
  8983 ;;		___lwtoft
  8984 ;;		_set_pwm1_raw
  8985 ;; This function is called by:
  8986 ;;		_main
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           	psect	text34
  8991  00235A                     __ptext34:
  8992                           	opt stack 0
  8993  00235A                     _executePWMCommand:
  8994                           	opt stack 27
  8995                           
  8996                           ;project.c: 273: if (percentage <= 99) {
  8997                           
  8998                           ;incstack = 0
  8999  00235A  5058               	movf	executePWMCommand@percentage+1,w,c
  9000  00235C  E155               	bnz	l173
  9001  00235E  0E64               	movlw	100
  9002  002360  5C57               	subwf	executePWMCommand@percentage,w,c
  9003  002362  B0D8               	btfsc	status,0,c
  9004  002364  0012               	return	
  9005                           
  9006                           ;project.c: 274: float tmp = percentage*1023.0/100.0;
  9007  002366  0EC0               	movlw	192
  9008  002368  6E2C               	movwf	___ftmul@f2,c
  9009  00236A  0E7F               	movlw	127
  9010  00236C  6E2D               	movwf	___ftmul@f2+1,c
  9011  00236E  0E44               	movlw	68
  9012  002370  6E2E               	movwf	___ftmul@f2+2,c
  9013  002372  C057  F01D         	movff	executePWMCommand@percentage,___lwtoft@c
  9014  002376  C058  F01E         	movff	executePWMCommand@percentage+1,___lwtoft@c+1
  9015  00237A  EC7A  F016         	call	___lwtoft	;wreg free
  9016  00237E  C01D  F029         	movff	?___lwtoft,___ftmul@f1
  9017  002382  C01E  F02A         	movff	?___lwtoft+1,___ftmul@f1+1
  9018  002386  C01F  F02B         	movff	?___lwtoft+2,___ftmul@f1+2
  9019  00238A  ECFF  F00F         	call	___ftmul	;wreg free
  9020  00238E  C029  F038         	movff	?___ftmul,___ftdiv@f1
  9021  002392  C02A  F039         	movff	?___ftmul+1,___ftdiv@f1+1
  9022  002396  C02B  F03A         	movff	?___ftmul+2,___ftdiv@f1+2
  9023  00239A  0E00               	movlw	0
  9024  00239C  6E3B               	movwf	___ftdiv@f2,c
  9025  00239E  0EC8               	movlw	200
  9026  0023A0  6E3C               	movwf	___ftdiv@f2+1,c
  9027  0023A2  0E42               	movlw	66
  9028  0023A4  6E3D               	movwf	___ftdiv@f2+2,c
  9029  0023A6  EC79  F010         	call	___ftdiv	;wreg free
  9030  0023AA  C038  F086         	movff	?___ftdiv,executePWMCommand@tmp
  9031  0023AE  C039  F087         	movff	?___ftdiv+1,executePWMCommand@tmp+1
  9032  0023B2  C03A  F088         	movff	?___ftdiv+2,executePWMCommand@tmp+2
  9033                           
  9034                           ;project.c: 275: raw_val1 = (int)(tmp +0.5);
  9035  0023B6  0E00               	movlw	0
  9036  0023B8  6E45               	movwf	___ftadd@f2,c
  9037  0023BA  0E00               	movlw	0
  9038  0023BC  6E46               	movwf	___ftadd@f2+1,c
  9039  0023BE  0E3F               	movlw	63
  9040  0023C0  6E47               	movwf	___ftadd@f2+2,c
  9041  0023C2  C086  F042         	movff	executePWMCommand@tmp,___ftadd@f1
  9042  0023C6  C087  F043         	movff	executePWMCommand@tmp+1,___ftadd@f1+1
  9043  0023CA  C088  F044         	movff	executePWMCommand@tmp+2,___ftadd@f1+2
  9044  0023CE  EC4F  F00C         	call	___ftadd	;wreg free
  9045  0023D2  C042  F04E         	movff	?___ftadd,___fttol@f1
  9046  0023D6  C043  F04F         	movff	?___ftadd+1,___fttol@f1+1
  9047  0023DA  C044  F050         	movff	?___ftadd+2,___fttol@f1+2
  9048  0023DE  EC83  F00F         	call	___fttol	;wreg free
  9049  0023E2  C04E  F0D7         	movff	?___fttol,_raw_val1
  9050  0023E6  C04F  F0D8         	movff	?___fttol+1,_raw_val1+1
  9051                           
  9052                           ;project.c: 276: if ( raw_val1> 1023) raw_val1 = 1023;
  9053  0023EA  0E04               	movlw	4
  9054  0023EC  0100               	movlb	0	; () banked
  9055  0023EE  5DD8               	subwf	(_raw_val1+1)& (0+255),w,b
  9056  0023F0  A0D8               	btfss	status,0,c
  9057  0023F2  D003               	goto	l172
  9058                           
  9059                           ; BSR set to: 0
  9060  0023F4  0E03               	movlw	3
  9061  0023F6  6FD8               	movwf	(_raw_val1+1)& (0+255),b
  9062  0023F8  69D7               	setf	_raw_val1& (0+255),b
  9063  0023FA                     l172:
  9064                           
  9065                           ; BSR set to: 0
  9066                           ;project.c: 277: set_pwm1_raw(raw_val1);
  9067                           
  9068                           ; BSR set to: 0
  9069  0023FA  C0D7  F015         	movff	_raw_val1,set_pwm1_raw@raw_value
  9070  0023FE  C0D8  F016         	movff	_raw_val1+1,set_pwm1_raw@raw_value+1
  9071  002402  ECEC  F015         	call	_set_pwm1_raw	;wreg free
  9072  002406  0012               	return	
  9073  002408                     l173:
  9074  002408  0012               	return		;funcret
  9075  00240A                     __end_of_executePWMCommand:
  9076                           	opt stack 0
  9077                           tblptru	equ	0xFF8
  9078                           tblptrh	equ	0xFF7
  9079                           tblptrl	equ	0xFF6
  9080                           tablat	equ	0xFF5
  9081                           prodh	equ	0xFF4
  9082                           prodl	equ	0xFF3
  9083                           intcon	equ	0xFF2
  9084                           postinc0	equ	0xFEE
  9085                           wreg	equ	0xFE8
  9086                           indf1	equ	0xFE7
  9087                           postdec1	equ	0xFE5
  9088                           fsr1h	equ	0xFE2
  9089                           fsr1l	equ	0xFE1
  9090                           indf2	equ	0xFDF
  9091                           postinc2	equ	0xFDE
  9092                           postdec2	equ	0xFDD
  9093                           fsr2h	equ	0xFDA
  9094                           fsr2l	equ	0xFD9
  9095                           status	equ	0xFD8
  9096                           
  9097 ;; *************** function _set_pwm1_raw *****************
  9098 ;; Defined at:
  9099 ;;		line 14 in file "my_pwm.c"
  9100 ;; Parameters:    Size  Location     Type
  9101 ;;  raw_value       2   20[COMRAM] unsigned int 
  9102 ;; Auto vars:     Size  Location     Type
  9103 ;;		None
  9104 ;; Return value:  Size  Location     Type
  9105 ;;                  1    wreg      void 
  9106 ;; Registers used:
  9107 ;;		wreg, status,2, status,0
  9108 ;; Tracked objects:
  9109 ;;		On entry : 0/0
  9110 ;;		On exit  : 0/0
  9111 ;;		Unchanged: 0/0
  9112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9113 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9115 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9116 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9117 ;;Total ram usage:        4 bytes
  9118 ;; Hardware stack levels used:    1
  9119 ;; Hardware stack levels required when called:    1
  9120 ;; This function calls:
  9121 ;;		Nothing
  9122 ;; This function is called by:
  9123 ;;		_executePWMCommand
  9124 ;;		_main
  9125 ;;		_set_pwm1_percent
  9126 ;;		_set_pwm1_voltage
  9127 ;;		_set_pwm1_general
  9128 ;; This function uses a non-reentrant model
  9129 ;;
  9130                           
  9131                           	psect	text35
  9132  002BD8                     __ptext35:
  9133                           	opt stack 0
  9134  002BD8                     _set_pwm1_raw:
  9135                           	opt stack 29
  9136                           
  9137                           ;my_pwm.c: 16: CCPR1L = (raw_value >> 2) & 0x00FF;
  9138                           
  9139                           ;incstack = 0
  9140  002BD8  C015  F017         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  9141  002BDC  C016  F018         	movff	set_pwm1_raw@raw_value+1,??_set_pwm1_raw+1
  9142  002BE0  90D8               	bcf	status,0,c
  9143  002BE2  3218               	rrcf	??_set_pwm1_raw+1,f,c
  9144  002BE4  3217               	rrcf	??_set_pwm1_raw,f,c
  9145  002BE6  90D8               	bcf	status,0,c
  9146  002BE8  3218               	rrcf	??_set_pwm1_raw+1,f,c
  9147  002BEA  3217               	rrcf	??_set_pwm1_raw,f,c
  9148  002BEC  5017               	movf	??_set_pwm1_raw,w,c
  9149  002BEE  6EBE               	movwf	4030,c	;volatile
  9150                           
  9151                           ;my_pwm.c: 17: CCP1CONbits.DC1B = raw_value & 0x0003;
  9152  002BF0  C015  F017         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  9153  002BF4  0E03               	movlw	3
  9154  002BF6  1617               	andwf	??_set_pwm1_raw,f,c
  9155  002BF8  3A17               	swapf	??_set_pwm1_raw,f,c
  9156  002BFA  50BD               	movf	4029,w,c	;volatile
  9157  002BFC  1817               	xorwf	??_set_pwm1_raw,w,c
  9158  002BFE  0BCF               	andlw	-49
  9159  002C00  1817               	xorwf	??_set_pwm1_raw,w,c
  9160  002C02  6EBD               	movwf	4029,c	;volatile
  9161  002C04  0012               	return		;funcret
  9162  002C06                     __end_of_set_pwm1_raw:
  9163                           	opt stack 0
  9164                           tblptru	equ	0xFF8
  9165                           tblptrh	equ	0xFF7
  9166                           tblptrl	equ	0xFF6
  9167                           tablat	equ	0xFF5
  9168                           prodh	equ	0xFF4
  9169                           prodl	equ	0xFF3
  9170                           intcon	equ	0xFF2
  9171                           postinc0	equ	0xFEE
  9172                           wreg	equ	0xFE8
  9173                           indf1	equ	0xFE7
  9174                           postdec1	equ	0xFE5
  9175                           fsr1h	equ	0xFE2
  9176                           fsr1l	equ	0xFE1
  9177                           indf2	equ	0xFDF
  9178                           postinc2	equ	0xFDE
  9179                           postdec2	equ	0xFDD
  9180                           fsr2h	equ	0xFDA
  9181                           fsr2l	equ	0xFD9
  9182                           status	equ	0xFD8
  9183                           
  9184 ;; *************** function ___lwtoft *****************
  9185 ;; Defined at:
  9186 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  9187 ;; Parameters:    Size  Location     Type
  9188 ;;  c               2   28[COMRAM] unsigned int 
  9189 ;; Auto vars:     Size  Location     Type
  9190 ;;		None
  9191 ;; Return value:  Size  Location     Type
  9192 ;;                  3   28[COMRAM] float 
  9193 ;; Registers used:
  9194 ;;		wreg, status,2, status,0, cstack
  9195 ;; Tracked objects:
  9196 ;;		On entry : 0/0
  9197 ;;		On exit  : 0/0
  9198 ;;		Unchanged: 0/0
  9199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9200 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9203 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9204 ;;Total ram usage:        3 bytes
  9205 ;; Hardware stack levels used:    1
  9206 ;; Hardware stack levels required when called:    2
  9207 ;; This function calls:
  9208 ;;		___ftpack
  9209 ;; This function is called by:
  9210 ;;		_lcdPrint
  9211 ;;		_executePWMCommand
  9212 ;;		_main
  9213 ;; This function uses a non-reentrant model
  9214 ;;
  9215                           
  9216                           	psect	text36
  9217  002CF4                     __ptext36:
  9218                           	opt stack 0
  9219  002CF4                     ___lwtoft:
  9220                           	opt stack 27
  9221                           
  9222                           ;incstack = 0
  9223  002CF4  C01D  F015         	movff	___lwtoft@c,___ftpack@arg
  9224  002CF8  C01E  F016         	movff	___lwtoft@c+1,___ftpack@arg+1
  9225  002CFC  6A17               	clrf	___ftpack@arg+2,c
  9226  002CFE  0E8E               	movlw	142
  9227  002D00  6E18               	movwf	___ftpack@exp,c
  9228  002D02  0E00               	movlw	0
  9229  002D04  6E19               	movwf	___ftpack@sign,c
  9230  002D06  EC05  F012         	call	___ftpack	;wreg free
  9231  002D0A  C015  F01D         	movff	?___ftpack,?___lwtoft
  9232  002D0E  C016  F01E         	movff	?___ftpack+1,?___lwtoft+1
  9233  002D12  C017  F01F         	movff	?___ftpack+2,?___lwtoft+2
  9234  002D16  0012               	return	
  9235  002D18                     __end_of___lwtoft:
  9236                           	opt stack 0
  9237                           tblptru	equ	0xFF8
  9238                           tblptrh	equ	0xFF7
  9239                           tblptrl	equ	0xFF6
  9240                           tablat	equ	0xFF5
  9241                           prodh	equ	0xFF4
  9242                           prodl	equ	0xFF3
  9243                           intcon	equ	0xFF2
  9244                           postinc0	equ	0xFEE
  9245                           wreg	equ	0xFE8
  9246                           indf1	equ	0xFE7
  9247                           postdec1	equ	0xFE5
  9248                           fsr1h	equ	0xFE2
  9249                           fsr1l	equ	0xFE1
  9250                           indf2	equ	0xFDF
  9251                           postinc2	equ	0xFDE
  9252                           postdec2	equ	0xFDD
  9253                           fsr2h	equ	0xFDA
  9254                           fsr2l	equ	0xFD9
  9255                           status	equ	0xFD8
  9256                           
  9257 ;; *************** function ___fttol *****************
  9258 ;; Defined at:
  9259 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  9260 ;; Parameters:    Size  Location     Type
  9261 ;;  f1              3   77[COMRAM] float 
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;  lval            4    1[BANK0 ] unsigned long 
  9264 ;;  exp1            1    5[BANK0 ] unsigned char 
  9265 ;;  sign1           1    0[BANK0 ] unsigned char 
  9266 ;; Return value:  Size  Location     Type
  9267 ;;                  4   77[COMRAM] long 
  9268 ;; Registers used:
  9269 ;;		wreg, status,2, status,0
  9270 ;; Tracked objects:
  9271 ;;		On entry : 0/0
  9272 ;;		On exit  : 0/0
  9273 ;;		Unchanged: 0/0
  9274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9275 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9276 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9278 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9279 ;;Total ram usage:       15 bytes
  9280 ;; Hardware stack levels used:    1
  9281 ;; Hardware stack levels required when called:    1
  9282 ;; This function calls:
  9283 ;;		Nothing
  9284 ;; This function is called by:
  9285 ;;		_executePWMCommand
  9286 ;;		_sprintf
  9287 ;;		_set_pwm1_percent
  9288 ;;		_set_pwm1_voltage
  9289 ;;		_set_pwm1_general
  9290 ;; This function uses a non-reentrant model
  9291 ;;
  9292                           
  9293                           	psect	text37
  9294  001F06                     __ptext37:
  9295                           	opt stack 0
  9296  001F06                     ___fttol:
  9297                           	opt stack 28
  9298                           
  9299                           ;incstack = 0
  9300  001F06  C050  F052         	movff	___fttol@f1+2,??___fttol
  9301  001F0A  6A53               	clrf	(??___fttol+1)& (0+255),c
  9302  001F0C  6A54               	clrf	(??___fttol+2)& (0+255),c
  9303  001F0E  344F               	rlcf	___fttol@f1+1,w,c
  9304  001F10  3652               	rlcf	??___fttol& (0+255),f,c
  9305  001F12  E301               	bnc	u5851
  9306  001F14  8053               	bsf	(??___fttol+1)& (0+255),0,c
  9307  001F16                     u5851:
  9308  001F16  5052               	movf	??___fttol,w,c
  9309  001F18  0100               	movlb	0	; () banked
  9310  001F1A  6F85               	movwf	___fttol@exp1& (0+255),b
  9311  001F1C  5185               	movf	___fttol@exp1& (0+255),w,b
  9312  001F1E  A4D8               	btfss	status,2,c
  9313  001F20  D009               	goto	l963
  9314                           
  9315                           ; BSR set to: 0
  9316  001F22  0E00               	movlw	0
  9317  001F24  6E4E               	movwf	?___fttol,c
  9318  001F26  0E00               	movlw	0
  9319  001F28  6E4F               	movwf	?___fttol+1,c
  9320  001F2A  0E00               	movlw	0
  9321  001F2C  6E50               	movwf	?___fttol+2,c
  9322  001F2E  0E00               	movlw	0
  9323  001F30  6E51               	movwf	?___fttol+3,c
  9324                           
  9325                           ; BSR set to: 0
  9326  001F32  0012               	return	
  9327  001F34                     l963:
  9328                           
  9329                           ; BSR set to: 0
  9330                           
  9331                           ; BSR set to: 0
  9332  001F34  0E17               	movlw	23
  9333  001F36  6E52               	movwf	??___fttol& (0+255),c
  9334  001F38  C04E  F053         	movff	___fttol@f1,??___fttol+1
  9335  001F3C  C04F  F054         	movff	___fttol@f1+1,??___fttol+2
  9336  001F40  C050  F055         	movff	___fttol@f1+2,??___fttol+3
  9337  001F44  2852               	incf	??___fttol,w,c
  9338  001F46  6E56               	movwf	(??___fttol+4)& (0+255),c
  9339  001F48  D004               	goto	u5870
  9340  001F4A                     u5875:
  9341  001F4A  90D8               	bcf	status,0,c
  9342  001F4C  3255               	rrcf	??___fttol+3,f,c
  9343  001F4E  3254               	rrcf	??___fttol+2,f,c
  9344  001F50  3253               	rrcf	??___fttol+1,f,c
  9345  001F52                     u5870:
  9346  001F52  2E56               	decfsz	(??___fttol+4)& (0+255),f,c
  9347  001F54  D7FA               	goto	u5875
  9348  001F56  5053               	movf	??___fttol+1,w,c
  9349  001F58  0100               	movlb	0	; () banked
  9350  001F5A  6F80               	movwf	___fttol@sign1& (0+255),b
  9351                           
  9352                           ; BSR set to: 0
  9353  001F5C  8E4F               	bsf	___fttol@f1+1,7,c
  9354                           
  9355                           ; BSR set to: 0
  9356  001F5E  0EFF               	movlw	255
  9357  001F60  164E               	andwf	___fttol@f1,f,c
  9358  001F62  0EFF               	movlw	255
  9359  001F64  164F               	andwf	___fttol@f1+1,f,c
  9360  001F66  0E00               	movlw	0
  9361  001F68  1650               	andwf	___fttol@f1+2,f,c
  9362                           
  9363                           ; BSR set to: 0
  9364  001F6A  504E               	movf	___fttol@f1,w,c
  9365  001F6C  6F81               	movwf	___fttol@lval& (0+255),b
  9366  001F6E  504F               	movf	___fttol@f1+1,w,c
  9367  001F70  6F82               	movwf	(___fttol@lval+1)& (0+255),b
  9368  001F72  5050               	movf	___fttol@f1+2,w,c
  9369  001F74  6F83               	movwf	(___fttol@lval+2)& (0+255),b
  9370  001F76  6B84               	clrf	(___fttol@lval+3)& (0+255),b
  9371                           
  9372                           ; BSR set to: 0
  9373  001F78  0E8E               	movlw	142
  9374  001F7A  5F85               	subwf	___fttol@exp1& (0+255),f,b
  9375                           
  9376                           ; BSR set to: 0
  9377  001F7C  AF85               	btfss	___fttol@exp1& (0+255),7,b
  9378  001F7E  D016               	goto	l965
  9379                           
  9380                           ; BSR set to: 0
  9381  001F80  5185               	movf	___fttol@exp1& (0+255),w,b
  9382  001F82  0A80               	xorlw	128
  9383  001F84  0F8F               	addlw	143
  9384  001F86  B0D8               	btfsc	status,0,c
  9385  001F88  D009               	goto	l966
  9386                           
  9387                           ; BSR set to: 0
  9388  001F8A  0E00               	movlw	0
  9389  001F8C  6E4E               	movwf	?___fttol,c
  9390  001F8E  0E00               	movlw	0
  9391  001F90  6E4F               	movwf	?___fttol+1,c
  9392  001F92  0E00               	movlw	0
  9393  001F94  6E50               	movwf	?___fttol+2,c
  9394  001F96  0E00               	movlw	0
  9395  001F98  6E51               	movwf	?___fttol+3,c
  9396                           
  9397                           ; BSR set to: 0
  9398  001F9A  0012               	return	
  9399  001F9C                     l966:
  9400                           
  9401                           ; BSR set to: 0
  9402                           
  9403                           ; BSR set to: 0
  9404                           
  9405                           ; BSR set to: 0
  9406  001F9C  90D8               	bcf	status,0,c
  9407  001F9E  3384               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9408  001FA0  3383               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9409  001FA2  3382               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9410  001FA4  3381               	rrcf	___fttol@lval& (0+255),f,b
  9411                           
  9412                           ; BSR set to: 0
  9413  001FA6  3F85               	incfsz	___fttol@exp1& (0+255),f,b
  9414  001FA8  D7F9               	goto	l966
  9415                           
  9416                           ; BSR set to: 0
  9417  001FAA  D015               	goto	u5910
  9418  001FAC                     l965:
  9419                           
  9420                           ; BSR set to: 0
  9421                           
  9422                           ; BSR set to: 0
  9423  001FAC  0E17               	movlw	23
  9424  001FAE  6585               	cpfsgt	___fttol@exp1& (0+255),b
  9425  001FB0  D00F               	goto	l971
  9426                           
  9427                           ; BSR set to: 0
  9428  001FB2  0E00               	movlw	0
  9429  001FB4  6E4E               	movwf	?___fttol,c
  9430  001FB6  0E00               	movlw	0
  9431  001FB8  6E4F               	movwf	?___fttol+1,c
  9432  001FBA  0E00               	movlw	0
  9433  001FBC  6E50               	movwf	?___fttol+2,c
  9434  001FBE  0E00               	movlw	0
  9435  001FC0  6E51               	movwf	?___fttol+3,c
  9436                           
  9437                           ; BSR set to: 0
  9438  001FC2  0012               	return	
  9439  001FC4                     
  9440                           ; BSR set to: 0
  9441                           
  9442                           ; BSR set to: 0
  9443  001FC4  90D8               	bcf	status,0,c
  9444  001FC6  3781               	rlcf	___fttol@lval& (0+255),f,b
  9445  001FC8  3782               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9446  001FCA  3783               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9447  001FCC  3784               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9448  001FCE  0785               	decf	___fttol@exp1& (0+255),f,b
  9449  001FD0                     l971:
  9450                           
  9451                           ; BSR set to: 0
  9452                           
  9453                           ; BSR set to: 0
  9454  001FD0  5185               	movf	___fttol@exp1& (0+255),w,b
  9455  001FD2  A4D8               	btfss	status,2,c
  9456  001FD4  D7F7               	goto	l972
  9457  001FD6                     u5910:
  9458                           
  9459                           ; BSR set to: 0
  9460                           
  9461                           ; BSR set to: 0
  9462                           
  9463                           ; BSR set to: 0
  9464  001FD6  5180               	movf	___fttol@sign1& (0+255),w,b
  9465  001FD8  B4D8               	btfsc	status,2,c
  9466  001FDA  D008               	goto	l974
  9467                           
  9468                           ; BSR set to: 0
  9469  001FDC  1F84               	comf	(___fttol@lval+3)& (0+255),f,b
  9470  001FDE  1F83               	comf	(___fttol@lval+2)& (0+255),f,b
  9471  001FE0  1F82               	comf	(___fttol@lval+1)& (0+255),f,b
  9472  001FE2  6D81               	negf	___fttol@lval& (0+255),b
  9473  001FE4  0E00               	movlw	0
  9474  001FE6  2382               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9475  001FE8  2383               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9476  001FEA  2384               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9477  001FEC                     l974:
  9478                           
  9479                           ; BSR set to: 0
  9480                           
  9481                           ; BSR set to: 0
  9482  001FEC  C081  F04E         	movff	___fttol@lval,?___fttol
  9483  001FF0  C082  F04F         	movff	___fttol@lval+1,?___fttol+1
  9484  001FF4  C083  F050         	movff	___fttol@lval+2,?___fttol+2
  9485  001FF8  C084  F051         	movff	___fttol@lval+3,?___fttol+3
  9486  001FFC  0012               	return	
  9487  001FFE                     __end_of___fttol:
  9488                           	opt stack 0
  9489                           tblptru	equ	0xFF8
  9490                           tblptrh	equ	0xFF7
  9491                           tblptrl	equ	0xFF6
  9492                           tablat	equ	0xFF5
  9493                           prodh	equ	0xFF4
  9494                           prodl	equ	0xFF3
  9495                           intcon	equ	0xFF2
  9496                           postinc0	equ	0xFEE
  9497                           wreg	equ	0xFE8
  9498                           indf1	equ	0xFE7
  9499                           postdec1	equ	0xFE5
  9500                           fsr1h	equ	0xFE2
  9501                           fsr1l	equ	0xFE1
  9502                           indf2	equ	0xFDF
  9503                           postinc2	equ	0xFDE
  9504                           postdec2	equ	0xFDD
  9505                           fsr2h	equ	0xFDA
  9506                           fsr2l	equ	0xFD9
  9507                           status	equ	0xFD8
  9508                           
  9509 ;; *************** function ___ftmul *****************
  9510 ;; Defined at:
  9511 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  9512 ;; Parameters:    Size  Location     Type
  9513 ;;  f1              3   40[COMRAM] float 
  9514 ;;  f2              3   43[COMRAM] float 
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;  f3_as_produc    3   50[COMRAM] unsigned um
  9517 ;;  sign            1   54[COMRAM] unsigned char 
  9518 ;;  cntr            1   53[COMRAM] unsigned char 
  9519 ;;  exp             1   49[COMRAM] unsigned char 
  9520 ;; Return value:  Size  Location     Type
  9521 ;;                  3   40[COMRAM] float 
  9522 ;; Registers used:
  9523 ;;		wreg, status,2, status,0, cstack
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9529 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9530 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9531 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9532 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9533 ;;Total ram usage:       15 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:    2
  9536 ;; This function calls:
  9537 ;;		___ftpack
  9538 ;; This function is called by:
  9539 ;;		_lcdPrint
  9540 ;;		_executePWMCommand
  9541 ;;		_main
  9542 ;;		_fround
  9543 ;;		_scale
  9544 ;;		_sprintf
  9545 ;;		_set_pwm1_percent
  9546 ;;		_set_pwm1_voltage
  9547 ;;		_set_pwm1_general
  9548 ;; This function uses a non-reentrant model
  9549 ;;
  9550                           
  9551                           	psect	text38
  9552  001FFE                     __ptext38:
  9553                           	opt stack 0
  9554  001FFE                     ___ftmul:
  9555                           	opt stack 26
  9556                           
  9557                           ; BSR set to: 0
  9558                           ;incstack = 0
  9559  001FFE  C02B  F02F         	movff	___ftmul@f1+2,??___ftmul
  9560  002002  6A30               	clrf	(??___ftmul+1)& (0+255),c
  9561  002004  6A31               	clrf	(??___ftmul+2)& (0+255),c
  9562  002006  342A               	rlcf	___ftmul@f1+1,w,c
  9563  002008  362F               	rlcf	??___ftmul& (0+255),f,c
  9564  00200A  E301               	bnc	u5221
  9565  00200C  8030               	bsf	(??___ftmul+1)& (0+255),0,c
  9566  00200E                     u5221:
  9567  00200E  502F               	movf	??___ftmul,w,c
  9568  002010  6E32               	movwf	___ftmul@exp,c
  9569  002012  5032               	movf	___ftmul@exp,w,c
  9570  002014  A4D8               	btfss	status,2,c
  9571  002016  D007               	goto	l942
  9572  002018  0E00               	movlw	0
  9573  00201A  6E29               	movwf	?___ftmul,c
  9574  00201C  0E00               	movlw	0
  9575  00201E  6E2A               	movwf	?___ftmul+1,c
  9576  002020  0E00               	movlw	0
  9577  002022  6E2B               	movwf	?___ftmul+2,c
  9578  002024  0012               	return	
  9579  002026                     l942:
  9580  002026  C02E  F02F         	movff	___ftmul@f2+2,??___ftmul
  9581  00202A  6A30               	clrf	(??___ftmul+1)& (0+255),c
  9582  00202C  6A31               	clrf	(??___ftmul+2)& (0+255),c
  9583  00202E  342D               	rlcf	___ftmul@f2+1,w,c
  9584  002030  362F               	rlcf	??___ftmul& (0+255),f,c
  9585  002032  E301               	bnc	u5241
  9586  002034  8030               	bsf	(??___ftmul+1)& (0+255),0,c
  9587  002036                     u5241:
  9588  002036  502F               	movf	??___ftmul,w,c
  9589  002038  6E37               	movwf	___ftmul@sign,c
  9590  00203A  5037               	movf	___ftmul@sign,w,c
  9591  00203C  A4D8               	btfss	status,2,c
  9592  00203E  D007               	goto	l944
  9593  002040  0E00               	movlw	0
  9594  002042  6E29               	movwf	?___ftmul,c
  9595  002044  0E00               	movlw	0
  9596  002046  6E2A               	movwf	?___ftmul+1,c
  9597  002048  0E00               	movlw	0
  9598  00204A  6E2B               	movwf	?___ftmul+2,c
  9599  00204C  0012               	return	
  9600  00204E                     l944:
  9601  00204E  5037               	movf	___ftmul@sign,w,c
  9602  002050  0F7B               	addlw	123
  9603  002052  2632               	addwf	___ftmul@exp,f,c
  9604  002054  C02B  F037         	movff	___ftmul@f1+2,___ftmul@sign
  9605  002058  502E               	movf	___ftmul@f2+2,w,c
  9606  00205A  1A37               	xorwf	___ftmul@sign,f,c
  9607  00205C  0E80               	movlw	128
  9608  00205E  1637               	andwf	___ftmul@sign,f,c
  9609  002060  8E2A               	bsf	___ftmul@f1+1,7,c
  9610  002062  8E2D               	bsf	___ftmul@f2+1,7,c
  9611  002064  0EFF               	movlw	255
  9612  002066  162C               	andwf	___ftmul@f2,f,c
  9613  002068  0EFF               	movlw	255
  9614  00206A  162D               	andwf	___ftmul@f2+1,f,c
  9615  00206C  0E00               	movlw	0
  9616  00206E  162E               	andwf	___ftmul@f2+2,f,c
  9617  002070  0E00               	movlw	0
  9618  002072  6E33               	movwf	___ftmul@f3_as_product,c
  9619  002074  0E00               	movlw	0
  9620  002076  6E34               	movwf	___ftmul@f3_as_product+1,c
  9621  002078  0E00               	movlw	0
  9622  00207A  6E35               	movwf	___ftmul@f3_as_product+2,c
  9623  00207C  0E07               	movlw	7
  9624  00207E  6E36               	movwf	___ftmul@cntr,c
  9625  002080  A029               	btfss	___ftmul@f1,0,c
  9626  002082  D006               	goto	l946
  9627  002084  502C               	movf	___ftmul@f2,w,c
  9628  002086  2633               	addwf	___ftmul@f3_as_product,f,c
  9629  002088  502D               	movf	___ftmul@f2+1,w,c
  9630  00208A  2234               	addwfc	___ftmul@f3_as_product+1,f,c
  9631  00208C  502E               	movf	___ftmul@f2+2,w,c
  9632  00208E  2235               	addwfc	___ftmul@f3_as_product+2,f,c
  9633  002090                     l946:
  9634  002090  90D8               	bcf	status,0,c
  9635  002092  322B               	rrcf	___ftmul@f1+2,f,c
  9636  002094  322A               	rrcf	___ftmul@f1+1,f,c
  9637  002096  3229               	rrcf	___ftmul@f1,f,c
  9638  002098  90D8               	bcf	status,0,c
  9639  00209A  362C               	rlcf	___ftmul@f2,f,c
  9640  00209C  362D               	rlcf	___ftmul@f2+1,f,c
  9641  00209E  362E               	rlcf	___ftmul@f2+2,f,c
  9642  0020A0  2E36               	decfsz	___ftmul@cntr,f,c
  9643  0020A2  D7EE               	goto	l945
  9644  0020A4  0E09               	movlw	9
  9645  0020A6  6E36               	movwf	___ftmul@cntr,c
  9646  0020A8  A029               	btfss	___ftmul@f1,0,c
  9647  0020AA  D006               	goto	l949
  9648  0020AC  502C               	movf	___ftmul@f2,w,c
  9649  0020AE  2633               	addwf	___ftmul@f3_as_product,f,c
  9650  0020B0  502D               	movf	___ftmul@f2+1,w,c
  9651  0020B2  2234               	addwfc	___ftmul@f3_as_product+1,f,c
  9652  0020B4  502E               	movf	___ftmul@f2+2,w,c
  9653  0020B6  2235               	addwfc	___ftmul@f3_as_product+2,f,c
  9654  0020B8                     l949:
  9655  0020B8  90D8               	bcf	status,0,c
  9656  0020BA  322B               	rrcf	___ftmul@f1+2,f,c
  9657  0020BC  322A               	rrcf	___ftmul@f1+1,f,c
  9658  0020BE  3229               	rrcf	___ftmul@f1,f,c
  9659  0020C0  90D8               	bcf	status,0,c
  9660  0020C2  3235               	rrcf	___ftmul@f3_as_product+2,f,c
  9661  0020C4  3234               	rrcf	___ftmul@f3_as_product+1,f,c
  9662  0020C6  3233               	rrcf	___ftmul@f3_as_product,f,c
  9663  0020C8  2E36               	decfsz	___ftmul@cntr,f,c
  9664  0020CA  D7EE               	goto	l948
  9665  0020CC  C033  F015         	movff	___ftmul@f3_as_product,___ftpack@arg
  9666  0020D0  C034  F016         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9667  0020D4  C035  F017         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9668  0020D8  C032  F018         	movff	___ftmul@exp,___ftpack@exp
  9669  0020DC  C037  F019         	movff	___ftmul@sign,___ftpack@sign
  9670  0020E0  EC05  F012         	call	___ftpack	;wreg free
  9671  0020E4  C015  F029         	movff	?___ftpack,?___ftmul
  9672  0020E8  C016  F02A         	movff	?___ftpack+1,?___ftmul+1
  9673  0020EC  C017  F02B         	movff	?___ftpack+2,?___ftmul+2
  9674  0020F0  0012               	return	
  9675  0020F2                     __end_of___ftmul:
  9676                           	opt stack 0
  9677                           tblptru	equ	0xFF8
  9678                           tblptrh	equ	0xFF7
  9679                           tblptrl	equ	0xFF6
  9680                           tablat	equ	0xFF5
  9681                           prodh	equ	0xFF4
  9682                           prodl	equ	0xFF3
  9683                           intcon	equ	0xFF2
  9684                           postinc0	equ	0xFEE
  9685                           wreg	equ	0xFE8
  9686                           indf1	equ	0xFE7
  9687                           postdec1	equ	0xFE5
  9688                           fsr1h	equ	0xFE2
  9689                           fsr1l	equ	0xFE1
  9690                           indf2	equ	0xFDF
  9691                           postinc2	equ	0xFDE
  9692                           postdec2	equ	0xFDD
  9693                           fsr2h	equ	0xFDA
  9694                           fsr2l	equ	0xFD9
  9695                           status	equ	0xFD8
  9696                           
  9697 ;; *************** function ___ftdiv *****************
  9698 ;; Defined at:
  9699 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  9700 ;; Parameters:    Size  Location     Type
  9701 ;;  f1              3   55[COMRAM] float 
  9702 ;;  f2              3   58[COMRAM] float 
  9703 ;; Auto vars:     Size  Location     Type
  9704 ;;  f3              3   65[COMRAM] float 
  9705 ;;  sign            1   69[COMRAM] unsigned char 
  9706 ;;  exp             1   68[COMRAM] unsigned char 
  9707 ;;  cntr            1   64[COMRAM] unsigned char 
  9708 ;; Return value:  Size  Location     Type
  9709 ;;                  3   55[COMRAM] float 
  9710 ;; Registers used:
  9711 ;;		wreg, status,2, status,0, cstack
  9712 ;; Tracked objects:
  9713 ;;		On entry : 0/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9717 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9718 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9719 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9720 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9721 ;;Total ram usage:       15 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; Hardware stack levels required when called:    2
  9724 ;; This function calls:
  9725 ;;		___ftpack
  9726 ;; This function is called by:
  9727 ;;		_lcdPrint
  9728 ;;		_executePWMCommand
  9729 ;;		_main
  9730 ;;		_read_adc_voltage
  9731 ;;		_set_pwm1_percent
  9732 ;;		_set_pwm1_voltage
  9733 ;;		_set_pwm1_general
  9734 ;; This function uses a non-reentrant model
  9735 ;;
  9736                           
  9737                           	psect	text39
  9738  0020F2                     __ptext39:
  9739                           	opt stack 0
  9740  0020F2                     ___ftdiv:
  9741                           	opt stack 27
  9742                           
  9743                           ;incstack = 0
  9744  0020F2  C03A  F03E         	movff	___ftdiv@f1+2,??___ftdiv
  9745  0020F6  6A3F               	clrf	(??___ftdiv+1)& (0+255),c
  9746  0020F8  6A40               	clrf	(??___ftdiv+2)& (0+255),c
  9747  0020FA  3439               	rlcf	___ftdiv@f1+1,w,c
  9748  0020FC  363E               	rlcf	??___ftdiv& (0+255),f,c
  9749  0020FE  E301               	bnc	u5741
  9750  002100  803F               	bsf	(??___ftdiv+1)& (0+255),0,c
  9751  002102                     u5741:
  9752  002102  503E               	movf	??___ftdiv,w,c
  9753  002104  6E45               	movwf	___ftdiv@exp,c
  9754  002106  5045               	movf	___ftdiv@exp,w,c
  9755  002108  A4D8               	btfss	status,2,c
  9756  00210A  D007               	goto	l910
  9757  00210C  0E00               	movlw	0
  9758  00210E  6E38               	movwf	?___ftdiv,c
  9759  002110  0E00               	movlw	0
  9760  002112  6E39               	movwf	?___ftdiv+1,c
  9761  002114  0E00               	movlw	0
  9762  002116  6E3A               	movwf	?___ftdiv+2,c
  9763  002118  0012               	return	
  9764  00211A                     l910:
  9765  00211A  C03D  F03E         	movff	___ftdiv@f2+2,??___ftdiv
  9766  00211E  6A3F               	clrf	(??___ftdiv+1)& (0+255),c
  9767  002120  6A40               	clrf	(??___ftdiv+2)& (0+255),c
  9768  002122  343C               	rlcf	___ftdiv@f2+1,w,c
  9769  002124  363E               	rlcf	??___ftdiv& (0+255),f,c
  9770  002126  E301               	bnc	u5761
  9771  002128  803F               	bsf	(??___ftdiv+1)& (0+255),0,c
  9772  00212A                     u5761:
  9773  00212A  503E               	movf	??___ftdiv,w,c
  9774  00212C  6E46               	movwf	___ftdiv@sign,c
  9775  00212E  5046               	movf	___ftdiv@sign,w,c
  9776  002130  A4D8               	btfss	status,2,c
  9777  002132  D007               	goto	l912
  9778  002134  0E00               	movlw	0
  9779  002136  6E38               	movwf	?___ftdiv,c
  9780  002138  0E00               	movlw	0
  9781  00213A  6E39               	movwf	?___ftdiv+1,c
  9782  00213C  0E00               	movlw	0
  9783  00213E  6E3A               	movwf	?___ftdiv+2,c
  9784  002140  0012               	return	
  9785  002142                     l912:
  9786  002142  0E00               	movlw	0
  9787  002144  6E42               	movwf	___ftdiv@f3,c
  9788  002146  0E00               	movlw	0
  9789  002148  6E43               	movwf	___ftdiv@f3+1,c
  9790  00214A  0E00               	movlw	0
  9791  00214C  6E44               	movwf	___ftdiv@f3+2,c
  9792  00214E  5046               	movf	___ftdiv@sign,w,c
  9793  002150  0F89               	addlw	137
  9794  002152  5E45               	subwf	___ftdiv@exp,f,c
  9795  002154  C03A  F046         	movff	___ftdiv@f1+2,___ftdiv@sign
  9796  002158  503D               	movf	___ftdiv@f2+2,w,c
  9797  00215A  1A46               	xorwf	___ftdiv@sign,f,c
  9798  00215C  0E80               	movlw	128
  9799  00215E  1646               	andwf	___ftdiv@sign,f,c
  9800  002160  8E39               	bsf	___ftdiv@f1+1,7,c
  9801  002162  0EFF               	movlw	255
  9802  002164  1638               	andwf	___ftdiv@f1,f,c
  9803  002166  0EFF               	movlw	255
  9804  002168  1639               	andwf	___ftdiv@f1+1,f,c
  9805  00216A  0E00               	movlw	0
  9806  00216C  163A               	andwf	___ftdiv@f1+2,f,c
  9807  00216E  8E3C               	bsf	___ftdiv@f2+1,7,c
  9808  002170  0EFF               	movlw	255
  9809  002172  163B               	andwf	___ftdiv@f2,f,c
  9810  002174  0EFF               	movlw	255
  9811  002176  163C               	andwf	___ftdiv@f2+1,f,c
  9812  002178  0E00               	movlw	0
  9813  00217A  163D               	andwf	___ftdiv@f2+2,f,c
  9814  00217C  0E18               	movlw	24
  9815  00217E  6E41               	movwf	___ftdiv@cntr,c
  9816  002180  90D8               	bcf	status,0,c
  9817  002182  3642               	rlcf	___ftdiv@f3,f,c
  9818  002184  3643               	rlcf	___ftdiv@f3+1,f,c
  9819  002186  3644               	rlcf	___ftdiv@f3+2,f,c
  9820  002188  503B               	movf	___ftdiv@f2,w,c
  9821  00218A  5C38               	subwf	___ftdiv@f1,w,c
  9822  00218C  503C               	movf	___ftdiv@f2+1,w,c
  9823  00218E  5839               	subwfb	___ftdiv@f1+1,w,c
  9824  002190  503D               	movf	___ftdiv@f2+2,w,c
  9825  002192  583A               	subwfb	___ftdiv@f1+2,w,c
  9826  002194  A0D8               	btfss	status,0,c
  9827  002196  D007               	goto	l914
  9828  002198  503B               	movf	___ftdiv@f2,w,c
  9829  00219A  5E38               	subwf	___ftdiv@f1,f,c
  9830  00219C  503C               	movf	___ftdiv@f2+1,w,c
  9831  00219E  5A39               	subwfb	___ftdiv@f1+1,f,c
  9832  0021A0  503D               	movf	___ftdiv@f2+2,w,c
  9833  0021A2  5A3A               	subwfb	___ftdiv@f1+2,f,c
  9834  0021A4  8042               	bsf	___ftdiv@f3,0,c
  9835  0021A6                     l914:
  9836  0021A6  90D8               	bcf	status,0,c
  9837  0021A8  3638               	rlcf	___ftdiv@f1,f,c
  9838  0021AA  3639               	rlcf	___ftdiv@f1+1,f,c
  9839  0021AC  363A               	rlcf	___ftdiv@f1+2,f,c
  9840  0021AE  2E41               	decfsz	___ftdiv@cntr,f,c
  9841  0021B0  D7E7               	goto	l913
  9842  0021B2  C042  F015         	movff	___ftdiv@f3,___ftpack@arg
  9843  0021B6  C043  F016         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9844  0021BA  C044  F017         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9845  0021BE  C045  F018         	movff	___ftdiv@exp,___ftpack@exp
  9846  0021C2  C046  F019         	movff	___ftdiv@sign,___ftpack@sign
  9847  0021C6  EC05  F012         	call	___ftpack	;wreg free
  9848  0021CA  C015  F038         	movff	?___ftpack,?___ftdiv
  9849  0021CE  C016  F039         	movff	?___ftpack+1,?___ftdiv+1
  9850  0021D2  C017  F03A         	movff	?___ftpack+2,?___ftdiv+2
  9851  0021D6  0012               	return	
  9852  0021D8                     __end_of___ftdiv:
  9853                           	opt stack 0
  9854                           tblptru	equ	0xFF8
  9855                           tblptrh	equ	0xFF7
  9856                           tblptrl	equ	0xFF6
  9857                           tablat	equ	0xFF5
  9858                           prodh	equ	0xFF4
  9859                           prodl	equ	0xFF3
  9860                           intcon	equ	0xFF2
  9861                           postinc0	equ	0xFEE
  9862                           wreg	equ	0xFE8
  9863                           indf1	equ	0xFE7
  9864                           postdec1	equ	0xFE5
  9865                           fsr1h	equ	0xFE2
  9866                           fsr1l	equ	0xFE1
  9867                           indf2	equ	0xFDF
  9868                           postinc2	equ	0xFDE
  9869                           postdec2	equ	0xFDD
  9870                           fsr2h	equ	0xFDA
  9871                           fsr2l	equ	0xFD9
  9872                           status	equ	0xFD8
  9873                           
  9874 ;; *************** function ___ftadd *****************
  9875 ;; Defined at:
  9876 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9877 ;; Parameters:    Size  Location     Type
  9878 ;;  f1              3   65[COMRAM] float 
  9879 ;;  f2              3   68[COMRAM] float 
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;  exp1            1   76[COMRAM] unsigned char 
  9882 ;;  exp2            1   75[COMRAM] unsigned char 
  9883 ;;  sign            1   74[COMRAM] unsigned char 
  9884 ;; Return value:  Size  Location     Type
  9885 ;;                  3   65[COMRAM] float 
  9886 ;; Registers used:
  9887 ;;		wreg, status,2, status,0, cstack
  9888 ;; Tracked objects:
  9889 ;;		On entry : 0/0
  9890 ;;		On exit  : 0/0
  9891 ;;		Unchanged: 0/0
  9892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9893 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9894 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9897 ;;Total ram usage:       12 bytes
  9898 ;; Hardware stack levels used:    1
  9899 ;; Hardware stack levels required when called:    2
  9900 ;; This function calls:
  9901 ;;		___ftpack
  9902 ;; This function is called by:
  9903 ;;		_executePWMCommand
  9904 ;;		_sprintf
  9905 ;;		___ftsub
  9906 ;;		_set_pwm1_percent
  9907 ;;		_set_pwm1_voltage
  9908 ;;		_set_pwm1_general
  9909 ;; This function uses a non-reentrant model
  9910 ;;
  9911                           
  9912                           	psect	text40
  9913  00189E                     __ptext40:
  9914                           	opt stack 0
  9915  00189E                     ___ftadd:
  9916                           	opt stack 26
  9917                           
  9918                           ;incstack = 0
  9919  00189E  C044  F048         	movff	___ftadd@f1+2,??___ftadd
  9920  0018A2  6A49               	clrf	(??___ftadd+1)& (0+255),c
  9921  0018A4  6A4A               	clrf	(??___ftadd+2)& (0+255),c
  9922  0018A6  3443               	rlcf	___ftadd@f1+1,w,c
  9923  0018A8  3648               	rlcf	??___ftadd& (0+255),f,c
  9924  0018AA  E301               	bnc	u5011
  9925  0018AC  8049               	bsf	(??___ftadd+1)& (0+255),0,c
  9926  0018AE                     u5011:
  9927  0018AE  5048               	movf	??___ftadd,w,c
  9928  0018B0  6E4D               	movwf	___ftadd@exp1,c
  9929  0018B2  C047  F048         	movff	___ftadd@f2+2,??___ftadd
  9930  0018B6  6A49               	clrf	(??___ftadd+1)& (0+255),c
  9931  0018B8  6A4A               	clrf	(??___ftadd+2)& (0+255),c
  9932  0018BA  3446               	rlcf	___ftadd@f2+1,w,c
  9933  0018BC  3648               	rlcf	??___ftadd& (0+255),f,c
  9934  0018BE  E301               	bnc	u5021
  9935  0018C0  8049               	bsf	(??___ftadd+1)& (0+255),0,c
  9936  0018C2                     u5021:
  9937  0018C2  5048               	movf	??___ftadd,w,c
  9938  0018C4  6E4C               	movwf	___ftadd@exp2,c
  9939  0018C6  504D               	movf	___ftadd@exp1,w,c
  9940  0018C8  B4D8               	btfsc	status,2,c
  9941  0018CA  D00B               	goto	u5050
  9942  0018CC  504C               	movf	___ftadd@exp2,w,c
  9943  0018CE  5C4D               	subwf	___ftadd@exp1,w,c
  9944  0018D0  B0D8               	btfsc	status,0,c
  9945  0018D2  D00E               	goto	l877
  9946  0018D4  504D               	movf	___ftadd@exp1,w,c
  9947  0018D6  0800               	sublw	0
  9948  0018D8  244C               	addwf	___ftadd@exp2,w,c
  9949  0018DA  6E48               	movwf	??___ftadd& (0+255),c
  9950  0018DC  0E18               	movlw	24
  9951  0018DE  6448               	cpfsgt	??___ftadd,c
  9952  0018E0  D007               	goto	l877
  9953  0018E2                     u5050:
  9954  0018E2  C045  F042         	movff	___ftadd@f2,?___ftadd
  9955  0018E6  C046  F043         	movff	___ftadd@f2+1,?___ftadd+1
  9956  0018EA  C047  F044         	movff	___ftadd@f2+2,?___ftadd+2
  9957  0018EE  0012               	return	
  9958  0018F0                     l877:
  9959  0018F0  504C               	movf	___ftadd@exp2,w,c
  9960  0018F2  B4D8               	btfsc	status,2,c
  9961  0018F4  D00B               	goto	u5080
  9962  0018F6  504D               	movf	___ftadd@exp1,w,c
  9963  0018F8  5C4C               	subwf	___ftadd@exp2,w,c
  9964  0018FA  B0D8               	btfsc	status,0,c
  9965  0018FC  D00E               	goto	l881
  9966  0018FE  504C               	movf	___ftadd@exp2,w,c
  9967  001900  0800               	sublw	0
  9968  001902  244D               	addwf	___ftadd@exp1,w,c
  9969  001904  6E48               	movwf	??___ftadd& (0+255),c
  9970  001906  0E18               	movlw	24
  9971  001908  6448               	cpfsgt	??___ftadd,c
  9972  00190A  D007               	goto	l881
  9973  00190C                     u5080:
  9974  00190C  C042  F042         	movff	___ftadd@f1,?___ftadd
  9975  001910  C043  F043         	movff	___ftadd@f1+1,?___ftadd+1
  9976  001914  C044  F044         	movff	___ftadd@f1+2,?___ftadd+2
  9977  001918  0012               	return	
  9978  00191A                     l881:
  9979  00191A  0E06               	movlw	6
  9980  00191C  6E4B               	movwf	___ftadd@sign,c
  9981  00191E  BE44               	btfsc	___ftadd@f1+2,7,c
  9982  001920  8E4B               	bsf	___ftadd@sign,7,c
  9983  001922  BE47               	btfsc	___ftadd@f2+2,7,c
  9984  001924  8C4B               	bsf	___ftadd@sign,6,c
  9985  001926  8E43               	bsf	___ftadd@f1+1,7,c
  9986  001928  0EFF               	movlw	255
  9987  00192A  1642               	andwf	___ftadd@f1,f,c
  9988  00192C  0EFF               	movlw	255
  9989  00192E  1643               	andwf	___ftadd@f1+1,f,c
  9990  001930  0E00               	movlw	0
  9991  001932  1644               	andwf	___ftadd@f1+2,f,c
  9992  001934  8E46               	bsf	___ftadd@f2+1,7,c
  9993  001936  0EFF               	movlw	255
  9994  001938  1645               	andwf	___ftadd@f2,f,c
  9995  00193A  0EFF               	movlw	255
  9996  00193C  1646               	andwf	___ftadd@f2+1,f,c
  9997  00193E  0E00               	movlw	0
  9998  001940  1647               	andwf	___ftadd@f2+2,f,c
  9999  001942  504C               	movf	___ftadd@exp2,w,c
 10000  001944  5C4D               	subwf	___ftadd@exp1,w,c
 10001  001946  B0D8               	btfsc	status,0,c
 10002  001948  D01B               	goto	l886
 10003  00194A                     u5110:
 10004  00194A  90D8               	bcf	status,0,c
 10005  00194C  3645               	rlcf	___ftadd@f2,f,c
 10006  00194E  3646               	rlcf	___ftadd@f2+1,f,c
 10007  001950  3647               	rlcf	___ftadd@f2+2,f,c
 10008  001952  064C               	decf	___ftadd@exp2,f,c
 10009  001954  504D               	movf	___ftadd@exp1,w,c
 10010  001956  184C               	xorwf	___ftadd@exp2,w,c
 10011  001958  B4D8               	btfsc	status,2,c
 10012  00195A  D00D               	goto	l891
 10013  00195C  064B               	decf	___ftadd@sign,f,c
 10014  00195E  C04B  F048         	movff	___ftadd@sign,??___ftadd
 10015  001962  0E07               	movlw	7
 10016  001964  1648               	andwf	??___ftadd,f,c
 10017  001966  B4D8               	btfsc	status,2,c
 10018  001968  D006               	goto	l891
 10019  00196A  D7EF               	goto	u5110
 10020  00196C  90D8               	bcf	status,0,c
 10021  00196E  3244               	rrcf	___ftadd@f1+2,f,c
 10022  001970  3243               	rrcf	___ftadd@f1+1,f,c
 10023  001972  3242               	rrcf	___ftadd@f1,f,c
 10024  001974  2A4D               	incf	___ftadd@exp1,f,c
 10025  001976                     l891:
 10026  001976  504C               	movf	___ftadd@exp2,w,c
 10027  001978  184D               	xorwf	___ftadd@exp1,w,c
 10028  00197A  B4D8               	btfsc	status,2,c
 10029  00197C  D01F               	goto	u5180
 10030  00197E  D7F6               	goto	l892
 10031  001980                     l886:
 10032  001980  504D               	movf	___ftadd@exp1,w,c
 10033  001982  5C4C               	subwf	___ftadd@exp2,w,c
 10034  001984  B0D8               	btfsc	status,0,c
 10035  001986  D01A               	goto	u5180
 10036  001988                     u5150:
 10037  001988  90D8               	bcf	status,0,c
 10038  00198A  3642               	rlcf	___ftadd@f1,f,c
 10039  00198C  3643               	rlcf	___ftadd@f1+1,f,c
 10040  00198E  3644               	rlcf	___ftadd@f1+2,f,c
 10041  001990  064D               	decf	___ftadd@exp1,f,c
 10042  001992  504D               	movf	___ftadd@exp1,w,c
 10043  001994  184C               	xorwf	___ftadd@exp2,w,c
 10044  001996  B4D8               	btfsc	status,2,c
 10045  001998  D00D               	goto	l900
 10046  00199A  064B               	decf	___ftadd@sign,f,c
 10047  00199C  C04B  F048         	movff	___ftadd@sign,??___ftadd
 10048  0019A0  0E07               	movlw	7
 10049  0019A2  1648               	andwf	??___ftadd,f,c
 10050  0019A4  B4D8               	btfsc	status,2,c
 10051  0019A6  D006               	goto	l900
 10052  0019A8  D7EF               	goto	u5150
 10053  0019AA  90D8               	bcf	status,0,c
 10054  0019AC  3247               	rrcf	___ftadd@f2+2,f,c
 10055  0019AE  3246               	rrcf	___ftadd@f2+1,f,c
 10056  0019B0  3245               	rrcf	___ftadd@f2,f,c
 10057  0019B2  2A4C               	incf	___ftadd@exp2,f,c
 10058  0019B4                     l900:
 10059  0019B4  504C               	movf	___ftadd@exp2,w,c
 10060  0019B6  184D               	xorwf	___ftadd@exp1,w,c
 10061  0019B8  A4D8               	btfss	status,2,c
 10062  0019BA  D7F7               	goto	l901
 10063  0019BC                     u5180:
 10064  0019BC  AE4B               	btfss	___ftadd@sign,7,c
 10065  0019BE  D00C               	goto	l903
 10066  0019C0  0EFF               	movlw	255
 10067  0019C2  1A42               	xorwf	___ftadd@f1,f,c
 10068  0019C4  0EFF               	movlw	255
 10069  0019C6  1A43               	xorwf	___ftadd@f1+1,f,c
 10070  0019C8  0EFF               	movlw	255
 10071  0019CA  1A44               	xorwf	___ftadd@f1+2,f,c
 10072  0019CC  0E01               	movlw	1
 10073  0019CE  2642               	addwf	___ftadd@f1,f,c
 10074  0019D0  0E00               	movlw	0
 10075  0019D2  2243               	addwfc	___ftadd@f1+1,f,c
 10076  0019D4  0E00               	movlw	0
 10077  0019D6  2244               	addwfc	___ftadd@f1+2,f,c
 10078  0019D8                     l903:
 10079  0019D8  AC4B               	btfss	___ftadd@sign,6,c
 10080  0019DA  D00C               	goto	l904
 10081  0019DC  0EFF               	movlw	255
 10082  0019DE  1A45               	xorwf	___ftadd@f2,f,c
 10083  0019E0  0EFF               	movlw	255
 10084  0019E2  1A46               	xorwf	___ftadd@f2+1,f,c
 10085  0019E4  0EFF               	movlw	255
 10086  0019E6  1A47               	xorwf	___ftadd@f2+2,f,c
 10087  0019E8  0E01               	movlw	1
 10088  0019EA  2645               	addwf	___ftadd@f2,f,c
 10089  0019EC  0E00               	movlw	0
 10090  0019EE  2246               	addwfc	___ftadd@f2+1,f,c
 10091  0019F0  0E00               	movlw	0
 10092  0019F2  2247               	addwfc	___ftadd@f2+2,f,c
 10093  0019F4                     l904:
 10094  0019F4  0E00               	movlw	0
 10095  0019F6  6E4B               	movwf	___ftadd@sign,c
 10096  0019F8  5042               	movf	___ftadd@f1,w,c
 10097  0019FA  2645               	addwf	___ftadd@f2,f,c
 10098  0019FC  5043               	movf	___ftadd@f1+1,w,c
 10099  0019FE  2246               	addwfc	___ftadd@f2+1,f,c
 10100  001A00  5044               	movf	___ftadd@f1+2,w,c
 10101  001A02  2247               	addwfc	___ftadd@f2+2,f,c
 10102  001A04  AE47               	btfss	___ftadd@f2+2,7,c
 10103  001A06  D00E               	goto	l905
 10104  001A08  0EFF               	movlw	255
 10105  001A0A  1A45               	xorwf	___ftadd@f2,f,c
 10106  001A0C  0EFF               	movlw	255
 10107  001A0E  1A46               	xorwf	___ftadd@f2+1,f,c
 10108  001A10  0EFF               	movlw	255
 10109  001A12  1A47               	xorwf	___ftadd@f2+2,f,c
 10110  001A14  0E01               	movlw	1
 10111  001A16  2645               	addwf	___ftadd@f2,f,c
 10112  001A18  0E00               	movlw	0
 10113  001A1A  2246               	addwfc	___ftadd@f2+1,f,c
 10114  001A1C  0E00               	movlw	0
 10115  001A1E  2247               	addwfc	___ftadd@f2+2,f,c
 10116  001A20  0E01               	movlw	1
 10117  001A22  6E4B               	movwf	___ftadd@sign,c
 10118  001A24                     l905:
 10119  001A24  C045  F015         	movff	___ftadd@f2,___ftpack@arg
 10120  001A28  C046  F016         	movff	___ftadd@f2+1,___ftpack@arg+1
 10121  001A2C  C047  F017         	movff	___ftadd@f2+2,___ftpack@arg+2
 10122  001A30  C04D  F018         	movff	___ftadd@exp1,___ftpack@exp
 10123  001A34  C04B  F019         	movff	___ftadd@sign,___ftpack@sign
 10124  001A38  EC05  F012         	call	___ftpack	;wreg free
 10125  001A3C  C015  F042         	movff	?___ftpack,?___ftadd
 10126  001A40  C016  F043         	movff	?___ftpack+1,?___ftadd+1
 10127  001A44  C017  F044         	movff	?___ftpack+2,?___ftadd+2
 10128  001A48  0012               	return	
 10129  001A4A                     __end_of___ftadd:
 10130                           	opt stack 0
 10131                           tblptru	equ	0xFF8
 10132                           tblptrh	equ	0xFF7
 10133                           tblptrl	equ	0xFF6
 10134                           tablat	equ	0xFF5
 10135                           prodh	equ	0xFF4
 10136                           prodl	equ	0xFF3
 10137                           intcon	equ	0xFF2
 10138                           postinc0	equ	0xFEE
 10139                           wreg	equ	0xFE8
 10140                           indf1	equ	0xFE7
 10141                           postdec1	equ	0xFE5
 10142                           fsr1h	equ	0xFE2
 10143                           fsr1l	equ	0xFE1
 10144                           indf2	equ	0xFDF
 10145                           postinc2	equ	0xFDE
 10146                           postdec2	equ	0xFDD
 10147                           fsr2h	equ	0xFDA
 10148                           fsr2l	equ	0xFD9
 10149                           status	equ	0xFD8
 10150                           
 10151 ;; *************** function ___ftpack *****************
 10152 ;; Defined at:
 10153 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 10154 ;; Parameters:    Size  Location     Type
 10155 ;;  arg             3   20[COMRAM] unsigned um
 10156 ;;  exp             1   23[COMRAM] unsigned char 
 10157 ;;  sign            1   24[COMRAM] unsigned char 
 10158 ;; Auto vars:     Size  Location     Type
 10159 ;;		None
 10160 ;; Return value:  Size  Location     Type
 10161 ;;                  3   20[COMRAM] float 
 10162 ;; Registers used:
 10163 ;;		wreg, status,2, status,0
 10164 ;; Tracked objects:
 10165 ;;		On entry : 0/0
 10166 ;;		On exit  : 0/0
 10167 ;;		Unchanged: 0/0
 10168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10169 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10171 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10172 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10173 ;;Total ram usage:        8 bytes
 10174 ;; Hardware stack levels used:    1
 10175 ;; Hardware stack levels required when called:    1
 10176 ;; This function calls:
 10177 ;;		Nothing
 10178 ;; This function is called by:
 10179 ;;		___awtoft
 10180 ;;		___ftadd
 10181 ;;		___ftdiv
 10182 ;;		___ftmul
 10183 ;;		___lltoft
 10184 ;;		___lwtoft
 10185 ;; This function uses a non-reentrant model
 10186 ;;
 10187                           
 10188                           	psect	text41
 10189  00240A                     __ptext41:
 10190                           	opt stack 0
 10191  00240A                     ___ftpack:
 10192                           	opt stack 26
 10193                           
 10194                           ;incstack = 0
 10195  00240A  5018               	movf	___ftpack@exp,w,c
 10196  00240C  B4D8               	btfsc	status,2,c
 10197  00240E  D005               	goto	u4940
 10198  002410  5015               	movf	___ftpack@arg,w,c
 10199  002412  1016               	iorwf	___ftpack@arg+1,w,c
 10200  002414  1017               	iorwf	___ftpack@arg+2,w,c
 10201  002416  A4D8               	btfss	status,2,c
 10202  002418  D00C               	goto	l846
 10203  00241A                     u4940:
 10204  00241A  0E00               	movlw	0
 10205  00241C  6E15               	movwf	?___ftpack,c
 10206  00241E  0E00               	movlw	0
 10207  002420  6E16               	movwf	?___ftpack+1,c
 10208  002422  0E00               	movlw	0
 10209  002424  6E17               	movwf	?___ftpack+2,c
 10210  002426  0012               	return	
 10211  002428  2A18               	incf	___ftpack@exp,f,c
 10212  00242A  90D8               	bcf	status,0,c
 10213  00242C  3217               	rrcf	___ftpack@arg+2,f,c
 10214  00242E  3216               	rrcf	___ftpack@arg+1,f,c
 10215  002430  3215               	rrcf	___ftpack@arg,f,c
 10216  002432                     l846:
 10217  002432  0E00               	movlw	0
 10218  002434  1415               	andwf	___ftpack@arg,w,c
 10219  002436  6E1A               	movwf	??___ftpack& (0+255),c
 10220  002438  0E00               	movlw	0
 10221  00243A  1416               	andwf	___ftpack@arg+1,w,c
 10222  00243C  6E1B               	movwf	(??___ftpack+1)& (0+255),c
 10223  00243E  0EFE               	movlw	254
 10224  002440  1417               	andwf	___ftpack@arg+2,w,c
 10225  002442  6E1C               	movwf	(??___ftpack+2)& (0+255),c
 10226  002444  501A               	movf	??___ftpack,w,c
 10227  002446  101B               	iorwf	??___ftpack+1,w,c
 10228  002448  101C               	iorwf	??___ftpack+2,w,c
 10229  00244A  B4D8               	btfsc	status,2,c
 10230  00244C  D00C               	goto	l849
 10231  00244E  D7EC               	goto	l847
 10232  002450  2A18               	incf	___ftpack@exp,f,c
 10233  002452  0E01               	movlw	1
 10234  002454  2615               	addwf	___ftpack@arg,f,c
 10235  002456  0E00               	movlw	0
 10236  002458  2216               	addwfc	___ftpack@arg+1,f,c
 10237  00245A  0E00               	movlw	0
 10238  00245C  2217               	addwfc	___ftpack@arg+2,f,c
 10239  00245E  90D8               	bcf	status,0,c
 10240  002460  3217               	rrcf	___ftpack@arg+2,f,c
 10241  002462  3216               	rrcf	___ftpack@arg+1,f,c
 10242  002464  3215               	rrcf	___ftpack@arg,f,c
 10243  002466                     l849:
 10244  002466  0E00               	movlw	0
 10245  002468  1415               	andwf	___ftpack@arg,w,c
 10246  00246A  6E1A               	movwf	??___ftpack& (0+255),c
 10247  00246C  0E00               	movlw	0
 10248  00246E  1416               	andwf	___ftpack@arg+1,w,c
 10249  002470  6E1B               	movwf	(??___ftpack+1)& (0+255),c
 10250  002472  0EFF               	movlw	255
 10251  002474  1417               	andwf	___ftpack@arg+2,w,c
 10252  002476  6E1C               	movwf	(??___ftpack+2)& (0+255),c
 10253  002478  501A               	movf	??___ftpack,w,c
 10254  00247A  101B               	iorwf	??___ftpack+1,w,c
 10255  00247C  101C               	iorwf	??___ftpack+2,w,c
 10256  00247E  B4D8               	btfsc	status,2,c
 10257  002480  D006               	goto	l852
 10258  002482  D7E6               	goto	l850
 10259  002484  0618               	decf	___ftpack@exp,f,c
 10260  002486  90D8               	bcf	status,0,c
 10261  002488  3615               	rlcf	___ftpack@arg,f,c
 10262  00248A  3616               	rlcf	___ftpack@arg+1,f,c
 10263  00248C  3617               	rlcf	___ftpack@arg+2,f,c
 10264  00248E                     l852:
 10265  00248E  BE16               	btfsc	___ftpack@arg+1,7,c
 10266  002490  D003               	goto	u4980
 10267  002492  0E02               	movlw	2
 10268  002494  6018               	cpfslt	___ftpack@exp,c
 10269  002496  D7F6               	goto	l853
 10270  002498                     u4980:
 10271  002498  A018               	btfss	___ftpack@exp,0,c
 10272  00249A  9E16               	bcf	___ftpack@arg+1,7,c
 10273  00249C  90D8               	bcf	status,0,c
 10274  00249E  3218               	rrcf	___ftpack@exp,f,c
 10275  0024A0  5018               	movf	___ftpack@exp,w,c
 10276  0024A2  1217               	iorwf	___ftpack@arg+2,f,c
 10277  0024A4  5019               	movf	___ftpack@sign,w,c
 10278  0024A6  A4D8               	btfss	status,2,c
 10279  0024A8  8E17               	bsf	___ftpack@arg+2,7,c
 10280  0024AA  C015  F015         	movff	___ftpack@arg,?___ftpack
 10281  0024AE  C016  F016         	movff	___ftpack@arg+1,?___ftpack+1
 10282  0024B2  C017  F017         	movff	___ftpack@arg+2,?___ftpack+2
 10283  0024B6  0012               	return	
 10284  0024B8                     __end_of___ftpack:
 10285                           	opt stack 0
 10286                           tblptru	equ	0xFF8
 10287                           tblptrh	equ	0xFF7
 10288                           tblptrl	equ	0xFF6
 10289                           tablat	equ	0xFF5
 10290                           prodh	equ	0xFF4
 10291                           prodl	equ	0xFF3
 10292                           intcon	equ	0xFF2
 10293                           postinc0	equ	0xFEE
 10294                           wreg	equ	0xFE8
 10295                           indf1	equ	0xFE7
 10296                           postdec1	equ	0xFE5
 10297                           fsr1h	equ	0xFE2
 10298                           fsr1l	equ	0xFE1
 10299                           indf2	equ	0xFDF
 10300                           postinc2	equ	0xFDE
 10301                           postdec2	equ	0xFDD
 10302                           fsr2h	equ	0xFDA
 10303                           fsr2l	equ	0xFD9
 10304                           status	equ	0xFD8
 10305                           
 10306 ;; *************** function _configure *****************
 10307 ;; Defined at:
 10308 ;;		line 175 in file "project.c"
 10309 ;; Parameters:    Size  Location     Type
 10310 ;;		None
 10311 ;; Auto vars:     Size  Location     Type
 10312 ;;		None
 10313 ;; Return value:  Size  Location     Type
 10314 ;;                  1    wreg      void 
 10315 ;; Registers used:
 10316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10317 ;; Tracked objects:
 10318 ;;		On entry : 0/0
 10319 ;;		On exit  : 0/0
 10320 ;;		Unchanged: 0/0
 10321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10326 ;;Total ram usage:        0 bytes
 10327 ;; Hardware stack levels used:    1
 10328 ;; Hardware stack levels required when called:    5
 10329 ;; This function calls:
 10330 ;;		_delay_ms
 10331 ;;		_i2c_init
 10332 ;;		_init_adc_no_lib
 10333 ;;		_init_pwm1
 10334 ;;		_lcd_init
 10335 ;;		_rtc_w
 10336 ;;		_setupPorts
 10337 ;;		_setupSerial
 10338 ;; This function is called by:
 10339 ;;		_main
 10340 ;; This function uses a non-reentrant model
 10341 ;;
 10342                           
 10343                           	psect	text42
 10344  002B28                     __ptext42:
 10345                           	opt stack 0
 10346  002B28                     _configure:
 10347                           	opt stack 25
 10348                           
 10349                           ;project.c: 176: ADCON1 = 0x0F;
 10350                           
 10351                           ;incstack = 0
 10352  002B28  0E0F               	movlw	15
 10353  002B2A  6EC1               	movwf	4033,c	;volatile
 10354                           
 10355                           ;project.c: 177: TRISC = 0x80;
 10356  002B2C  0E80               	movlw	128
 10357  002B2E  6E94               	movwf	3988,c	;volatile
 10358                           
 10359                           ;project.c: 178: TRISD = 0;
 10360  002B30  0E00               	movlw	0
 10361  002B32  6E95               	movwf	3989,c	;volatile
 10362                           
 10363                           ;project.c: 179: TRISE = 0;
 10364  002B34  0E00               	movlw	0
 10365  002B36  6E96               	movwf	3990,c	;volatile
 10366                           
 10367                           ;project.c: 180: delay_ms(100);
 10368  002B38  0E00               	movlw	0
 10369  002B3A  6E16               	movwf	delay_ms@n+1,c
 10370  002B3C  0E64               	movlw	100
 10371  002B3E  6E15               	movwf	delay_ms@n,c
 10372  002B40  EC43  F016         	call	_delay_ms	;wreg free
 10373                           
 10374                           ;project.c: 181: PORTD = 0;
 10375  002B44  0E00               	movlw	0
 10376  002B46  6E83               	movwf	3971,c	;volatile
 10377                           
 10378                           ;project.c: 182: i2c_init();
 10379  002B48  EC19  F017         	call	_i2c_init	;wreg free
 10380                           
 10381                           ;project.c: 183: setupSerial();
 10382  002B4C  EC8C  F016         	call	_setupSerial	;wreg free
 10383                           
 10384                           ;project.c: 184: rtc_w();
 10385  002B50  EC74  F015         	call	_rtc_w	;wreg free
 10386                           
 10387                           ;project.c: 185: setupPorts();
 10388  002B54  ECBE  F016         	call	_setupPorts	;wreg free
 10389                           
 10390                           ;project.c: 186: lcd_init();
 10391  002B58  EC2F  F014         	call	_lcd_init	;wreg free
 10392                           
 10393                           ;project.c: 187: init_adc_no_lib();
 10394  002B5C  EC05  F017         	call	_init_adc_no_lib	;wreg free
 10395                           
 10396                           ;project.c: 188: init_pwm1();
 10397  002B60  ECF7  F016         	call	_init_pwm1	;wreg free
 10398  002B64  0012               	return		;funcret
 10399  002B66                     __end_of_configure:
 10400                           	opt stack 0
 10401                           tblptru	equ	0xFF8
 10402                           tblptrh	equ	0xFF7
 10403                           tblptrl	equ	0xFF6
 10404                           tablat	equ	0xFF5
 10405                           prodh	equ	0xFF4
 10406                           prodl	equ	0xFF3
 10407                           intcon	equ	0xFF2
 10408                           postinc0	equ	0xFEE
 10409                           wreg	equ	0xFE8
 10410                           indf1	equ	0xFE7
 10411                           postdec1	equ	0xFE5
 10412                           fsr1h	equ	0xFE2
 10413                           fsr1l	equ	0xFE1
 10414                           indf2	equ	0xFDF
 10415                           postinc2	equ	0xFDE
 10416                           postdec2	equ	0xFDD
 10417                           fsr2h	equ	0xFDA
 10418                           fsr2l	equ	0xFD9
 10419                           status	equ	0xFD8
 10420                           
 10421 ;; *************** function _setupSerial *****************
 10422 ;; Defined at:
 10423 ;;		line 3 in file "my_ser.c"
 10424 ;; Parameters:    Size  Location     Type
 10425 ;;		None
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;  dummy           1   20[COMRAM] unsigned char 
 10428 ;; Return value:  Size  Location     Type
 10429 ;;                  1    wreg      void 
 10430 ;; Registers used:
 10431 ;;		wreg, status,2
 10432 ;; Tracked objects:
 10433 ;;		On entry : 0/0
 10434 ;;		On exit  : 0/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10438 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10440 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10441 ;;Total ram usage:        1 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:    1
 10444 ;; This function calls:
 10445 ;;		Nothing
 10446 ;; This function is called by:
 10447 ;;		_configure
 10448 ;; This function uses a non-reentrant model
 10449 ;;
 10450                           
 10451                           	psect	text43
 10452  002D18                     __ptext43:
 10453                           	opt stack 0
 10454  002D18                     _setupSerial:
 10455                           	opt stack 28
 10456                           
 10457                           ;my_ser.c: 4: unsigned char dummy;
 10458                           ;my_ser.c: 5: BAUDCONbits.BRG16 = 0;
 10459                           
 10460                           ;incstack = 0
 10461  002D18  96B8               	bcf	4024,3,c	;volatile
 10462                           
 10463                           ;my_ser.c: 6: TXSTA = 0;
 10464  002D1A  0E00               	movlw	0
 10465  002D1C  6EAC               	movwf	4012,c	;volatile
 10466                           
 10467                           ;my_ser.c: 7: SPBRG = 25;
 10468  002D1E  0E19               	movlw	25
 10469  002D20  6EAF               	movwf	4015,c	;volatile
 10470                           
 10471                           ;my_ser.c: 8: SPBRGH = 0;
 10472  002D22  0E00               	movlw	0
 10473  002D24  6EB0               	movwf	4016,c	;volatile
 10474                           
 10475                           ;my_ser.c: 9: TXSTAbits.BRGH = 1;
 10476  002D26  84AC               	bsf	4012,2,c	;volatile
 10477                           
 10478                           ;my_ser.c: 10: TXSTAbits.TXEN = 1;
 10479  002D28  8AAC               	bsf	4012,5,c	;volatile
 10480                           
 10481                           ;my_ser.c: 12: RCSTA = 0;
 10482  002D2A  0E00               	movlw	0
 10483  002D2C  6EAB               	movwf	4011,c	;volatile
 10484                           
 10485                           ;my_ser.c: 13: RCSTAbits.CREN = 1;
 10486  002D2E  88AB               	bsf	4011,4,c	;volatile
 10487                           
 10488                           ;my_ser.c: 14: RCSTAbits.SPEN = 1;
 10489  002D30  8EAB               	bsf	4011,7,c	;volatile
 10490                           
 10491                           ;my_ser.c: 15: ;
 10492                           ;my_ser.c: 16: dummy = RCREG;
 10493  002D32  CFAE F015          	movff	4014,setupSerial@dummy	;volatile
 10494                           
 10495                           ;my_ser.c: 17: dummy = RCREG;
 10496  002D36  CFAE F015          	movff	4014,setupSerial@dummy	;volatile
 10497  002D3A  0012               	return	
 10498  002D3C                     __end_of_setupSerial:
 10499                           	opt stack 0
 10500                           tblptru	equ	0xFF8
 10501                           tblptrh	equ	0xFF7
 10502                           tblptrl	equ	0xFF6
 10503                           tablat	equ	0xFF5
 10504                           prodh	equ	0xFF4
 10505                           prodl	equ	0xFF3
 10506                           intcon	equ	0xFF2
 10507                           postinc0	equ	0xFEE
 10508                           wreg	equ	0xFE8
 10509                           indf1	equ	0xFE7
 10510                           postdec1	equ	0xFE5
 10511                           fsr1h	equ	0xFE2
 10512                           fsr1l	equ	0xFE1
 10513                           indf2	equ	0xFDF
 10514                           postinc2	equ	0xFDE
 10515                           postdec2	equ	0xFDD
 10516                           fsr2h	equ	0xFDA
 10517                           fsr2l	equ	0xFD9
 10518                           status	equ	0xFD8
 10519                           
 10520 ;; *************** function _setupPorts *****************
 10521 ;; Defined at:
 10522 ;;		line 475 in file "project.c"
 10523 ;; Parameters:    Size  Location     Type
 10524 ;;		None
 10525 ;; Auto vars:     Size  Location     Type
 10526 ;;		None
 10527 ;; Return value:  Size  Location     Type
 10528 ;;                  1    wreg      void 
 10529 ;; Registers used:
 10530 ;;		wreg, status,2
 10531 ;; Tracked objects:
 10532 ;;		On entry : 0/0
 10533 ;;		On exit  : 0/0
 10534 ;;		Unchanged: 0/0
 10535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10540 ;;Total ram usage:        0 bytes
 10541 ;; Hardware stack levels used:    1
 10542 ;; Hardware stack levels required when called:    1
 10543 ;; This function calls:
 10544 ;;		Nothing
 10545 ;; This function is called by:
 10546 ;;		_configure
 10547 ;; This function uses a non-reentrant model
 10548 ;;
 10549                           
 10550                           	psect	text44
 10551  002D7C                     __ptext44:
 10552                           	opt stack 0
 10553  002D7C                     _setupPorts:
 10554                           	opt stack 28
 10555                           
 10556                           ;project.c: 477: ADCON0 =0;
 10557                           
 10558                           ;incstack = 0
 10559  002D7C  0E00               	movlw	0
 10560  002D7E  6EC2               	movwf	4034,c	;volatile
 10561                           
 10562                           ;project.c: 478: ADCON1 = 0x0C;
 10563  002D80  0E0C               	movlw	12
 10564  002D82  6EC1               	movwf	4033,c	;volatile
 10565                           
 10566                           ;project.c: 479: TRISB = 0xFF;
 10567  002D84  6893               	setf	3987,c	;volatile
 10568                           
 10569                           ;project.c: 480: TRISC = 0x80;
 10570  002D86  0E80               	movlw	128
 10571  002D88  6E94               	movwf	3988,c	;volatile
 10572                           
 10573                           ;project.c: 481: TRISA = 0xFF;
 10574  002D8A  6892               	setf	3986,c	;volatile
 10575                           
 10576                           ;project.c: 482: TRISD = 0x00;
 10577  002D8C  0E00               	movlw	0
 10578  002D8E  6E95               	movwf	3989,c	;volatile
 10579                           
 10580                           ;project.c: 483: TRISE= 0x00;
 10581  002D90  0E00               	movlw	0
 10582  002D92  6E96               	movwf	3990,c	;volatile
 10583  002D94  0012               	return		;funcret
 10584  002D96                     __end_of_setupPorts:
 10585                           	opt stack 0
 10586                           tblptru	equ	0xFF8
 10587                           tblptrh	equ	0xFF7
 10588                           tblptrl	equ	0xFF6
 10589                           tablat	equ	0xFF5
 10590                           prodh	equ	0xFF4
 10591                           prodl	equ	0xFF3
 10592                           intcon	equ	0xFF2
 10593                           postinc0	equ	0xFEE
 10594                           wreg	equ	0xFE8
 10595                           indf1	equ	0xFE7
 10596                           postdec1	equ	0xFE5
 10597                           fsr1h	equ	0xFE2
 10598                           fsr1l	equ	0xFE1
 10599                           indf2	equ	0xFDF
 10600                           postinc2	equ	0xFDE
 10601                           postdec2	equ	0xFDD
 10602                           fsr2h	equ	0xFDA
 10603                           fsr2l	equ	0xFD9
 10604                           status	equ	0xFD8
 10605                           
 10606 ;; *************** function _rtc_w *****************
 10607 ;; Defined at:
 10608 ;;		line 68 in file "sw_rtc.c"
 10609 ;; Parameters:    Size  Location     Type
 10610 ;;		None
 10611 ;; Auto vars:     Size  Location     Type
 10612 ;;		None
 10613 ;; Return value:  Size  Location     Type
 10614 ;;                  1    wreg      void 
 10615 ;; Registers used:
 10616 ;;		wreg, status,2, status,0, cstack
 10617 ;; Tracked objects:
 10618 ;;		On entry : 0/0
 10619 ;;		On exit  : 0/0
 10620 ;;		Unchanged: 0/0
 10621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10626 ;;Total ram usage:        0 bytes
 10627 ;; Hardware stack levels used:    1
 10628 ;; Hardware stack levels required when called:    3
 10629 ;; This function calls:
 10630 ;;		_i2c_start
 10631 ;;		_i2c_stop
 10632 ;;		_i2c_wb
 10633 ;; This function is called by:
 10634 ;;		_configure
 10635 ;; This function uses a non-reentrant model
 10636 ;;
 10637                           
 10638                           	psect	text45
 10639  002AE8                     __ptext45:
 10640                           	opt stack 0
 10641  002AE8                     _rtc_w:
 10642                           	opt stack 26
 10643                           
 10644                           ;sw_rtc.c: 70: i2c_start();
 10645                           
 10646                           ;incstack = 0
 10647  002AE8  ECEF  F016         	call	_i2c_start	;wreg free
 10648                           
 10649                           ;sw_rtc.c: 71: i2c_wb(0xD0);
 10650  002AEC  0ED0               	movlw	208
 10651  002AEE  ECE4  F014         	call	_i2c_wb
 10652                           
 10653                           ;sw_rtc.c: 72: i2c_wb(0x30);
 10654  002AF2  0E30               	movlw	48
 10655  002AF4  ECE4  F014         	call	_i2c_wb
 10656                           
 10657                           ;sw_rtc.c: 73: i2c_wb(0x44);
 10658  002AF8  0E44               	movlw	68
 10659  002AFA  ECE4  F014         	call	_i2c_wb
 10660                           
 10661                           ;sw_rtc.c: 74: i2c_wb(0x44);
 10662  002AFE  0E44               	movlw	68
 10663  002B00  ECE4  F014         	call	_i2c_wb
 10664                           
 10665                           ;sw_rtc.c: 75: i2c_wb(0x12);
 10666  002B04  0E12               	movlw	18
 10667  002B06  ECE4  F014         	call	_i2c_wb
 10668                           
 10669                           ;sw_rtc.c: 76: i2c_wb(0x05);
 10670  002B0A  0E05               	movlw	5
 10671  002B0C  ECE4  F014         	call	_i2c_wb
 10672                           
 10673                           ;sw_rtc.c: 77: i2c_wb(0x13);
 10674  002B10  0E13               	movlw	19
 10675  002B12  ECE4  F014         	call	_i2c_wb
 10676                           
 10677                           ;sw_rtc.c: 78: i2c_wb(0x12);
 10678  002B16  0E12               	movlw	18
 10679  002B18  ECE4  F014         	call	_i2c_wb
 10680                           
 10681                           ;sw_rtc.c: 79: i2c_wb(0x23);
 10682  002B1C  0E23               	movlw	35
 10683  002B1E  ECE4  F014         	call	_i2c_wb
 10684                           
 10685                           ;sw_rtc.c: 80: i2c_stop();
 10686  002B22  ECE7  F016         	call	_i2c_stop	;wreg free
 10687  002B26  0012               	return		;funcret
 10688  002B28                     __end_of_rtc_w:
 10689                           	opt stack 0
 10690                           tblptru	equ	0xFF8
 10691                           tblptrh	equ	0xFF7
 10692                           tblptrl	equ	0xFF6
 10693                           tablat	equ	0xFF5
 10694                           prodh	equ	0xFF4
 10695                           prodl	equ	0xFF3
 10696                           intcon	equ	0xFF2
 10697                           postinc0	equ	0xFEE
 10698                           wreg	equ	0xFE8
 10699                           indf1	equ	0xFE7
 10700                           postdec1	equ	0xFE5
 10701                           fsr1h	equ	0xFE2
 10702                           fsr1l	equ	0xFE1
 10703                           indf2	equ	0xFDF
 10704                           postinc2	equ	0xFDE
 10705                           postdec2	equ	0xFDD
 10706                           fsr2h	equ	0xFDA
 10707                           fsr2l	equ	0xFD9
 10708                           status	equ	0xFD8
 10709                           
 10710 ;; *************** function _i2c_wb *****************
 10711 ;; Defined at:
 10712 ;;		line 50 in file "sw_i2c.c"
 10713 ;; Parameters:    Size  Location     Type
 10714 ;;  val             1    wreg     unsigned char 
 10715 ;; Auto vars:     Size  Location     Type
 10716 ;;  val             1   22[COMRAM] unsigned char 
 10717 ;;  i               1   23[COMRAM] unsigned char 
 10718 ;; Return value:  Size  Location     Type
 10719 ;;                  1    wreg      void 
 10720 ;; Registers used:
 10721 ;;		wreg, status,2, status,0, cstack
 10722 ;; Tracked objects:
 10723 ;;		On entry : 0/0
 10724 ;;		On exit  : 0/0
 10725 ;;		Unchanged: 0/0
 10726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10728 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10729 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10730 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10731 ;;Total ram usage:        4 bytes
 10732 ;; Hardware stack levels used:    1
 10733 ;; Hardware stack levels required when called:    2
 10734 ;; This function calls:
 10735 ;;		_delay
 10736 ;; This function is called by:
 10737 ;;		_updateRTC
 10738 ;;		_rtc_r
 10739 ;;		_rtc_w
 10740 ;; This function uses a non-reentrant model
 10741 ;;
 10742                           
 10743                           	psect	text46
 10744  0029C8                     __ptext46:
 10745                           	opt stack 0
 10746  0029C8                     _i2c_wb:
 10747                           	opt stack 27
 10748                           
 10749                           ;incstack = 0
 10750                           ;i2c_wb@val stored from wreg
 10751  0029C8  6E17               	movwf	i2c_wb@val,c
 10752                           
 10753                           ;sw_i2c.c: 52: unsigned char i;
 10754                           ;sw_i2c.c: 53: PORTCbits.RC3=0;
 10755  0029CA  9682               	bcf	3970,3,c	;volatile
 10756                           
 10757                           ;sw_i2c.c: 54: for(i=0;i<8;i++)
 10758  0029CC  0E00               	movlw	0
 10759  0029CE  6E18               	movwf	i2c_wb@i,c
 10760  0029D0                     l5125:
 10761  0029D0  0E07               	movlw	7
 10762  0029D2  6418               	cpfsgt	i2c_wb@i,c
 10763  0029D4  D001               	goto	l291
 10764  0029D6  D01B               	goto	u5420
 10765  0029D8                     l291:
 10766                           
 10767                           ;sw_i2c.c: 55: {
 10768                           ;sw_i2c.c: 56: PORTCbits.RC4=((val>>(7-i))& 0x01);
 10769  0029D8  5018               	movf	i2c_wb@i,w,c
 10770  0029DA  0800               	sublw	0
 10771  0029DC  6E15               	movwf	??_i2c_wb& (0+255),c
 10772  0029DE  0E07               	movlw	7
 10773  0029E0  2615               	addwf	??_i2c_wb,f,c
 10774  0029E2  C017  F016         	movff	i2c_wb@val,??_i2c_wb+1
 10775  0029E6  2A15               	incf	??_i2c_wb,f,c
 10776  0029E8  D002               	goto	u5414
 10777  0029EA                     u5415:
 10778  0029EA  90D8               	bcf	status,0,c
 10779  0029EC  3216               	rrcf	??_i2c_wb+1,f,c
 10780  0029EE                     u5414:
 10781  0029EE  2E15               	decfsz	??_i2c_wb,f,c
 10782  0029F0  D7FC               	goto	u5415
 10783  0029F2  0E01               	movlw	1
 10784  0029F4  1616               	andwf	??_i2c_wb+1,f,c
 10785  0029F6  3A16               	swapf	??_i2c_wb+1,f,c
 10786  0029F8  5082               	movf	3970,w,c	;volatile
 10787  0029FA  1816               	xorwf	??_i2c_wb+1,w,c
 10788  0029FC  0BEF               	andlw	-17
 10789  0029FE  1816               	xorwf	??_i2c_wb+1,w,c
 10790  002A00  6E82               	movwf	3970,c	;volatile
 10791                           
 10792                           ;sw_i2c.c: 58: PORTCbits.RC3=1;
 10793  002A02  8682               	bsf	3970,3,c	;volatile
 10794                           
 10795                           ;sw_i2c.c: 59: delay();
 10796  002A04  EC10  F017         	call	_delay	;wreg free
 10797                           
 10798                           ;sw_i2c.c: 60: PORTCbits.RC3=0;
 10799  002A08  9682               	bcf	3970,3,c	;volatile
 10800  002A0A  2A18               	incf	i2c_wb@i,f,c
 10801  002A0C  D7E1               	goto	l5125
 10802  002A0E                     u5420:
 10803                           
 10804                           ;sw_i2c.c: 62: }
 10805                           ;sw_i2c.c: 63: PORTCbits.RC4=1;
 10806  002A0E  8882               	bsf	3970,4,c	;volatile
 10807                           
 10808                           ;sw_i2c.c: 64: delay();
 10809  002A10  EC10  F017         	call	_delay	;wreg free
 10810                           
 10811                           ;sw_i2c.c: 65: PORTCbits.RC3=1;
 10812  002A14  8682               	bsf	3970,3,c	;volatile
 10813                           
 10814                           ;sw_i2c.c: 66: delay();
 10815  002A16  EC10  F017         	call	_delay	;wreg free
 10816                           
 10817                           ;sw_i2c.c: 67: PORTCbits.RC3=0;
 10818  002A1A  9682               	bcf	3970,3,c	;volatile
 10819  002A1C  0012               	return		;funcret
 10820  002A1E                     __end_of_i2c_wb:
 10821                           	opt stack 0
 10822                           tblptru	equ	0xFF8
 10823                           tblptrh	equ	0xFF7
 10824                           tblptrl	equ	0xFF6
 10825                           tablat	equ	0xFF5
 10826                           prodh	equ	0xFF4
 10827                           prodl	equ	0xFF3
 10828                           intcon	equ	0xFF2
 10829                           postinc0	equ	0xFEE
 10830                           wreg	equ	0xFE8
 10831                           indf1	equ	0xFE7
 10832                           postdec1	equ	0xFE5
 10833                           fsr1h	equ	0xFE2
 10834                           fsr1l	equ	0xFE1
 10835                           indf2	equ	0xFDF
 10836                           postinc2	equ	0xFDE
 10837                           postdec2	equ	0xFDD
 10838                           fsr2h	equ	0xFDA
 10839                           fsr2l	equ	0xFD9
 10840                           status	equ	0xFD8
 10841                           
 10842 ;; *************** function _i2c_stop *****************
 10843 ;; Defined at:
 10844 ;;		line 41 in file "sw_i2c.c"
 10845 ;; Parameters:    Size  Location     Type
 10846 ;;		None
 10847 ;; Auto vars:     Size  Location     Type
 10848 ;;		None
 10849 ;; Return value:  Size  Location     Type
 10850 ;;                  1    wreg      void 
 10851 ;; Registers used:
 10852 ;;		wreg, cstack
 10853 ;; Tracked objects:
 10854 ;;		On entry : 0/0
 10855 ;;		On exit  : 0/0
 10856 ;;		Unchanged: 0/0
 10857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10862 ;;Total ram usage:        0 bytes
 10863 ;; Hardware stack levels used:    1
 10864 ;; Hardware stack levels required when called:    2
 10865 ;; This function calls:
 10866 ;;		_delay
 10867 ;; This function is called by:
 10868 ;;		_updateRTC
 10869 ;;		_rtc_r
 10870 ;;		_rtc_w
 10871 ;; This function uses a non-reentrant model
 10872 ;;
 10873                           
 10874                           	psect	text47
 10875  002DCE                     __ptext47:
 10876                           	opt stack 0
 10877  002DCE                     _i2c_stop:
 10878                           	opt stack 27
 10879                           
 10880                           ;sw_i2c.c: 43: PORTCbits.RC3=1;
 10881                           
 10882                           ;incstack = 0
 10883  002DCE  8682               	bsf	3970,3,c	;volatile
 10884                           
 10885                           ;sw_i2c.c: 44: PORTCbits.RC4=0;
 10886  002DD0  9882               	bcf	3970,4,c	;volatile
 10887                           
 10888                           ;sw_i2c.c: 45: delay();
 10889  002DD2  EC10  F017         	call	_delay	;wreg free
 10890                           
 10891                           ;sw_i2c.c: 46: PORTCbits.RC4=1;
 10892  002DD6  8882               	bsf	3970,4,c	;volatile
 10893                           
 10894                           ;sw_i2c.c: 47: delay();
 10895  002DD8  EC10  F017         	call	_delay	;wreg free
 10896  002DDC  0012               	return		;funcret
 10897  002DDE                     __end_of_i2c_stop:
 10898                           	opt stack 0
 10899                           tblptru	equ	0xFF8
 10900                           tblptrh	equ	0xFF7
 10901                           tblptrl	equ	0xFF6
 10902                           tablat	equ	0xFF5
 10903                           prodh	equ	0xFF4
 10904                           prodl	equ	0xFF3
 10905                           intcon	equ	0xFF2
 10906                           postinc0	equ	0xFEE
 10907                           wreg	equ	0xFE8
 10908                           indf1	equ	0xFE7
 10909                           postdec1	equ	0xFE5
 10910                           fsr1h	equ	0xFE2
 10911                           fsr1l	equ	0xFE1
 10912                           indf2	equ	0xFDF
 10913                           postinc2	equ	0xFDE
 10914                           postdec2	equ	0xFDD
 10915                           fsr2h	equ	0xFDA
 10916                           fsr2l	equ	0xFD9
 10917                           status	equ	0xFD8
 10918                           
 10919 ;; *************** function _i2c_start *****************
 10920 ;; Defined at:
 10921 ;;		line 32 in file "sw_i2c.c"
 10922 ;; Parameters:    Size  Location     Type
 10923 ;;		None
 10924 ;; Auto vars:     Size  Location     Type
 10925 ;;		None
 10926 ;; Return value:  Size  Location     Type
 10927 ;;                  1    wreg      void 
 10928 ;; Registers used:
 10929 ;;		wreg, cstack
 10930 ;; Tracked objects:
 10931 ;;		On entry : 0/0
 10932 ;;		On exit  : 0/0
 10933 ;;		Unchanged: 0/0
 10934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10939 ;;Total ram usage:        0 bytes
 10940 ;; Hardware stack levels used:    1
 10941 ;; Hardware stack levels required when called:    2
 10942 ;; This function calls:
 10943 ;;		_delay
 10944 ;; This function is called by:
 10945 ;;		_updateRTC
 10946 ;;		_rtc_r
 10947 ;;		_rtc_w
 10948 ;; This function uses a non-reentrant model
 10949 ;;
 10950                           
 10951                           	psect	text48
 10952  002DDE                     __ptext48:
 10953                           	opt stack 0
 10954  002DDE                     _i2c_start:
 10955                           	opt stack 27
 10956                           
 10957                           ;sw_i2c.c: 34: PORTCbits.RC3=1;
 10958                           
 10959                           ;incstack = 0
 10960  002DDE  8682               	bsf	3970,3,c	;volatile
 10961                           
 10962                           ;sw_i2c.c: 35: PORTCbits.RC4=1;
 10963  002DE0  8882               	bsf	3970,4,c	;volatile
 10964                           
 10965                           ;sw_i2c.c: 36: delay();
 10966  002DE2  EC10  F017         	call	_delay	;wreg free
 10967                           
 10968                           ;sw_i2c.c: 37: PORTCbits.RC4=0;
 10969  002DE6  9882               	bcf	3970,4,c	;volatile
 10970                           
 10971                           ;sw_i2c.c: 38: delay();
 10972  002DE8  EC10  F017         	call	_delay	;wreg free
 10973  002DEC  0012               	return		;funcret
 10974  002DEE                     __end_of_i2c_start:
 10975                           	opt stack 0
 10976                           tblptru	equ	0xFF8
 10977                           tblptrh	equ	0xFF7
 10978                           tblptrl	equ	0xFF6
 10979                           tablat	equ	0xFF5
 10980                           prodh	equ	0xFF4
 10981                           prodl	equ	0xFF3
 10982                           intcon	equ	0xFF2
 10983                           postinc0	equ	0xFEE
 10984                           wreg	equ	0xFE8
 10985                           indf1	equ	0xFE7
 10986                           postdec1	equ	0xFE5
 10987                           fsr1h	equ	0xFE2
 10988                           fsr1l	equ	0xFE1
 10989                           indf2	equ	0xFDF
 10990                           postinc2	equ	0xFDE
 10991                           postdec2	equ	0xFDD
 10992                           fsr2h	equ	0xFDA
 10993                           fsr2l	equ	0xFD9
 10994                           status	equ	0xFD8
 10995                           
 10996 ;; *************** function _delay *****************
 10997 ;; Defined at:
 10998 ;;		line 3 in file "sw_i2c.c"
 10999 ;; Parameters:    Size  Location     Type
 11000 ;;		None
 11001 ;; Auto vars:     Size  Location     Type
 11002 ;;		None
 11003 ;; Return value:  Size  Location     Type
 11004 ;;                  1    wreg      void 
 11005 ;; Registers used:
 11006 ;;		wreg
 11007 ;; Tracked objects:
 11008 ;;		On entry : 0/0
 11009 ;;		On exit  : 0/0
 11010 ;;		Unchanged: 0/0
 11011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11016 ;;Total ram usage:        0 bytes
 11017 ;; Hardware stack levels used:    1
 11018 ;; Hardware stack levels required when called:    1
 11019 ;; This function calls:
 11020 ;;		Nothing
 11021 ;; This function is called by:
 11022 ;;		_i2c_start
 11023 ;;		_i2c_stop
 11024 ;;		_i2c_wb
 11025 ;;		_i2c_rb
 11026 ;; This function uses a non-reentrant model
 11027 ;;
 11028                           
 11029                           	psect	text49
 11030  002E20                     __ptext49:
 11031                           	opt stack 0
 11032  002E20                     _delay:
 11033                           	opt stack 27
 11034                           
 11035                           ;sw_i2c.c: 5: _delaywdt((unsigned long)((20)*(4000000UL/4000000.0)));
 11036                           
 11037                           ;incstack = 0
 11038  002E20  0E05               	movlw	5
 11039  002E22                     u7267:
 11040  002E22  0004               	clrwdt	
 11041  002E24  2EE8               	decfsz	wreg,f,c
 11042  002E26  D7FD               	bra	u7267
 11043  002E28  0012               	return		;funcret
 11044  002E2A                     __end_of_delay:
 11045                           	opt stack 0
 11046                           tblptru	equ	0xFF8
 11047                           tblptrh	equ	0xFF7
 11048                           tblptrl	equ	0xFF6
 11049                           tablat	equ	0xFF5
 11050                           prodh	equ	0xFF4
 11051                           prodl	equ	0xFF3
 11052                           intcon	equ	0xFF2
 11053                           postinc0	equ	0xFEE
 11054                           wreg	equ	0xFE8
 11055                           indf1	equ	0xFE7
 11056                           postdec1	equ	0xFE5
 11057                           fsr1h	equ	0xFE2
 11058                           fsr1l	equ	0xFE1
 11059                           indf2	equ	0xFDF
 11060                           postinc2	equ	0xFDE
 11061                           postdec2	equ	0xFDD
 11062                           fsr2h	equ	0xFDA
 11063                           fsr2l	equ	0xFD9
 11064                           status	equ	0xFD8
 11065                           
 11066 ;; *************** function _lcd_init *****************
 11067 ;; Defined at:
 11068 ;;		line 49 in file "lcd_x8.c"
 11069 ;; Parameters:    Size  Location     Type
 11070 ;;		None
 11071 ;; Auto vars:     Size  Location     Type
 11072 ;;  i               1   30[COMRAM] unsigned char 
 11073 ;; Return value:  Size  Location     Type
 11074 ;;                  1    wreg      void 
 11075 ;; Registers used:
 11076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11077 ;; Tracked objects:
 11078 ;;		On entry : 0/0
 11079 ;;		On exit  : 0/0
 11080 ;;		Unchanged: 0/0
 11081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11083 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11085 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11086 ;;Total ram usage:        1 bytes
 11087 ;; Hardware stack levels used:    1
 11088 ;; Hardware stack levels required when called:    4
 11089 ;; This function calls:
 11090 ;;		_delay_ms
 11091 ;;		_lcd_send_byte
 11092 ;;		_lcd_send_nibble
 11093 ;; This function is called by:
 11094 ;;		_configure
 11095 ;; This function uses a non-reentrant model
 11096 ;;
 11097                           
 11098                           	psect	text50
 11099  00285E                     __ptext50:
 11100                           	opt stack 0
 11101  00285E                     _lcd_init:
 11102                           	opt stack 25
 11103                           
 11104                           ;lcd_x8.c: 51: unsigned char i;
 11105                           ;lcd_x8.c: 54: PORTEbits.RE2 = 0;
 11106                           
 11107                           ;incstack = 0
 11108  00285E  9484               	bcf	3972,2,c	;volatile
 11109                           
 11110                           ;lcd_x8.c: 56: PORTEbits.RE1 = 0;
 11111  002860  9284               	bcf	3972,1,c	;volatile
 11112                           
 11113                           ;lcd_x8.c: 58: delay_ms(25);
 11114  002862  0E00               	movlw	0
 11115  002864  6E16               	movwf	delay_ms@n+1,c
 11116  002866  0E19               	movlw	25
 11117  002868  6E15               	movwf	delay_ms@n,c
 11118  00286A  EC43  F016         	call	_delay_ms	;wreg free
 11119                           
 11120                           ;lcd_x8.c: 59: for (i = 1; i <= 3; ++i) {
 11121  00286E  0E01               	movlw	1
 11122  002870  6E1F               	movwf	lcd_init@i,c
 11123  002872                     l6007:
 11124  002872  0E03               	movlw	3
 11125  002874  641F               	cpfsgt	lcd_init@i,c
 11126  002876  D001               	goto	l351
 11127  002878  D00B               	goto	u6650
 11128  00287A                     l351:
 11129                           
 11130                           ;lcd_x8.c: 60: lcd_send_nibble(3);
 11131  00287A  0E03               	movlw	3
 11132  00287C  EC9E  F016         	call	_lcd_send_nibble
 11133                           
 11134                           ;lcd_x8.c: 62: delay_ms(6);
 11135  002880  0E00               	movlw	0
 11136  002882  6E16               	movwf	delay_ms@n+1,c
 11137  002884  0E06               	movlw	6
 11138  002886  6E15               	movwf	delay_ms@n,c
 11139  002888  EC43  F016         	call	_delay_ms	;wreg free
 11140  00288C  2A1F               	incf	lcd_init@i,f,c
 11141  00288E  D7F1               	goto	l6007
 11142  002890                     u6650:
 11143                           
 11144                           ;lcd_x8.c: 63: }
 11145                           ;lcd_x8.c: 65: lcd_send_nibble(2);
 11146  002890  0E02               	movlw	2
 11147  002892  EC9E  F016         	call	_lcd_send_nibble
 11148                           
 11149                           ;lcd_x8.c: 67: for (i = 0; i <= 3; ++i)
 11150  002896  0E00               	movlw	0
 11151  002898  6E1F               	movwf	lcd_init@i,c
 11152  00289A                     l6021:
 11153  00289A  0E03               	movlw	3
 11154  00289C  641F               	cpfsgt	lcd_init@i,c
 11155  00289E  D001               	goto	l353
 11156  0028A0  0012               	return	
 11157  0028A2                     l353:
 11158                           
 11159                           ;lcd_x8.c: 68: lcd_send_byte(0, LCD_INIT_STRING[i]);
 11160  0028A2  501F               	movf	lcd_init@i,w,c
 11161  0028A4  0D01               	mullw	1
 11162  0028A6  0E67               	movlw	low _LCD_INIT_STRING
 11163  0028A8  24F3               	addwf	prodl,w,c
 11164  0028AA  6ED9               	movwf	fsr2l,c
 11165  0028AC  0E00               	movlw	high _LCD_INIT_STRING
 11166  0028AE  20F4               	addwfc	prodh,w,c
 11167  0028B0  6EDA               	movwf	fsr2h,c
 11168  0028B2  50DF               	movf	indf2,w,c
 11169  0028B4  6E1D               	movwf	lcd_send_byte@n,c
 11170  0028B6  0E00               	movlw	0
 11171  0028B8  EC0F  F015         	call	_lcd_send_byte
 11172  0028BC  2A1F               	incf	lcd_init@i,f,c
 11173  0028BE  D7ED               	goto	l6021
 11174  0028C0                     __end_of_lcd_init:
 11175                           	opt stack 0
 11176                           tblptru	equ	0xFF8
 11177                           tblptrh	equ	0xFF7
 11178                           tblptrl	equ	0xFF6
 11179                           tablat	equ	0xFF5
 11180                           prodh	equ	0xFF4
 11181                           prodl	equ	0xFF3
 11182                           intcon	equ	0xFF2
 11183                           postinc0	equ	0xFEE
 11184                           wreg	equ	0xFE8
 11185                           indf1	equ	0xFE7
 11186                           postdec1	equ	0xFE5
 11187                           fsr1h	equ	0xFE2
 11188                           fsr1l	equ	0xFE1
 11189                           indf2	equ	0xFDF
 11190                           postinc2	equ	0xFDE
 11191                           postdec2	equ	0xFDD
 11192                           fsr2h	equ	0xFDA
 11193                           fsr2l	equ	0xFD9
 11194                           status	equ	0xFD8
 11195                           
 11196 ;; *************** function _lcd_send_byte *****************
 11197 ;; Defined at:
 11198 ;;		line 32 in file "lcd_x8.c"
 11199 ;; Parameters:    Size  Location     Type
 11200 ;;  cm_data         1    wreg     unsigned char 
 11201 ;;  n               1   28[COMRAM] unsigned char 
 11202 ;; Auto vars:     Size  Location     Type
 11203 ;;  cm_data         1   29[COMRAM] unsigned char 
 11204 ;; Return value:  Size  Location     Type
 11205 ;;                  1    wreg      void 
 11206 ;; Registers used:
 11207 ;;		wreg, status,2, status,0, cstack
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11213 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11214 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11216 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11217 ;;Total ram usage:        2 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; Hardware stack levels required when called:    3
 11220 ;; This function calls:
 11221 ;;		_delay_cycles
 11222 ;;		_delay_ms
 11223 ;;		_lcd_send_nibble
 11224 ;; This function is called by:
 11225 ;;		_lcd_init
 11226 ;;		_lcd_gotoxy
 11227 ;;		_lcd_putc
 11228 ;;		_Lcd_Shift_Right
 11229 ;;		_Lcd_Shift_Left
 11230 ;; This function uses a non-reentrant model
 11231 ;;
 11232                           
 11233                           	psect	text51
 11234  002A1E                     __ptext51:
 11235                           	opt stack 0
 11236  002A1E                     _lcd_send_byte:
 11237                           	opt stack 26
 11238                           
 11239                           ;incstack = 0
 11240                           ;lcd_send_byte@cm_data stored from wreg
 11241  002A1E  6E1E               	movwf	lcd_send_byte@cm_data,c
 11242                           
 11243                           ;lcd_x8.c: 36: PORTEbits.RE2 = cm_data;
 11244  002A20  B01E               	btfsc	lcd_send_byte@cm_data,0,c
 11245  002A22  D002               	bra	u4915
 11246  002A24  9484               	bcf	3972,2,c	;volatile
 11247  002A26  D001               	bra	u4916
 11248  002A28                     u4915:
 11249  002A28  8484               	bsf	3972,2,c	;volatile
 11250  002A2A                     u4916:
 11251                           
 11252                           ;lcd_x8.c: 37: delay_cycles(1);
 11253  002A2A  0E01               	movlw	1
 11254  002A2C  EC03  F016         	call	_delay_cycles
 11255                           
 11256                           ;lcd_x8.c: 39: delay_cycles(1);
 11257  002A30  0E01               	movlw	1
 11258  002A32  EC03  F016         	call	_delay_cycles
 11259                           
 11260                           ;lcd_x8.c: 40: PORTEbits.RE1 = 0;
 11261  002A36  9284               	bcf	3972,1,c	;volatile
 11262                           
 11263                           ;lcd_x8.c: 41: lcd_send_nibble(n >> 4);
 11264  002A38  381D               	swapf	lcd_send_byte@n,w,c
 11265  002A3A  0B0F               	andlw	15
 11266  002A3C  EC9E  F016         	call	_lcd_send_nibble
 11267                           
 11268                           ;lcd_x8.c: 42: lcd_send_nibble(n & 0x0f);
 11269  002A40  501D               	movf	lcd_send_byte@n,w,c
 11270  002A42  0B0F               	andlw	15
 11271  002A44  EC9E  F016         	call	_lcd_send_nibble
 11272                           
 11273                           ;lcd_x8.c: 43: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
 11274  002A48  501E               	movf	lcd_send_byte@cm_data,w,c
 11275  002A4A  B4D8               	btfsc	status,2,c
 11276  002A4C  D005               	goto	l346
 11277  002A4E  0E32               	movlw	50
 11278  002A50                     u7277:
 11279  002A50  0004               	clrwdt	
 11280  002A52  2EE8               	decfsz	wreg,f,c
 11281  002A54  D7FD               	bra	u7277
 11282  002A56  0012               	return	
 11283  002A58                     l346:
 11284                           
 11285                           ;lcd_x8.c: 44: else
 11286                           ;lcd_x8.c: 45: delay_ms(2);
 11287  002A58  0E00               	movlw	0
 11288  002A5A  6E16               	movwf	delay_ms@n+1,c
 11289  002A5C  0E02               	movlw	2
 11290  002A5E  6E15               	movwf	delay_ms@n,c
 11291  002A60  EC43  F016         	call	_delay_ms	;wreg free
 11292  002A64  0012               	return	
 11293  002A66                     __end_of_lcd_send_byte:
 11294                           	opt stack 0
 11295                           tblptru	equ	0xFF8
 11296                           tblptrh	equ	0xFF7
 11297                           tblptrl	equ	0xFF6
 11298                           tablat	equ	0xFF5
 11299                           prodh	equ	0xFF4
 11300                           prodl	equ	0xFF3
 11301                           intcon	equ	0xFF2
 11302                           postinc0	equ	0xFEE
 11303                           wreg	equ	0xFE8
 11304                           indf1	equ	0xFE7
 11305                           postdec1	equ	0xFE5
 11306                           fsr1h	equ	0xFE2
 11307                           fsr1l	equ	0xFE1
 11308                           indf2	equ	0xFDF
 11309                           postinc2	equ	0xFDE
 11310                           postdec2	equ	0xFDD
 11311                           fsr2h	equ	0xFDA
 11312                           fsr2l	equ	0xFD9
 11313                           status	equ	0xFD8
 11314                           
 11315 ;; *************** function _lcd_send_nibble *****************
 11316 ;; Defined at:
 11317 ;;		line 22 in file "lcd_x8.c"
 11318 ;; Parameters:    Size  Location     Type
 11319 ;;  n               1    wreg     unsigned char 
 11320 ;; Auto vars:     Size  Location     Type
 11321 ;;  n               1   27[COMRAM] unsigned char 
 11322 ;; Return value:  Size  Location     Type
 11323 ;;                  1    wreg      void 
 11324 ;; Registers used:
 11325 ;;		wreg, status,2, status,0, cstack
 11326 ;; Tracked objects:
 11327 ;;		On entry : 0/0
 11328 ;;		On exit  : 0/0
 11329 ;;		Unchanged: 0/0
 11330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11332 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11333 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11334 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11335 ;;Total ram usage:        2 bytes
 11336 ;; Hardware stack levels used:    1
 11337 ;; Hardware stack levels required when called:    2
 11338 ;; This function calls:
 11339 ;;		_delay_cycles
 11340 ;; This function is called by:
 11341 ;;		_lcd_send_byte
 11342 ;;		_lcd_init
 11343 ;; This function uses a non-reentrant model
 11344 ;;
 11345                           
 11346                           	psect	text52
 11347  002D3C                     __ptext52:
 11348                           	opt stack 0
 11349  002D3C                     _lcd_send_nibble:
 11350                           	opt stack 26
 11351                           
 11352                           ;incstack = 0
 11353                           ;lcd_send_nibble@n stored from wreg
 11354  002D3C  6E1C               	movwf	lcd_send_nibble@n,c
 11355                           
 11356                           ;lcd_x8.c: 24: lcd.data = n;
 11357  002D3E  C01C  F01B         	movff	lcd_send_nibble@n,??_lcd_send_nibble
 11358  002D42  3A1B               	swapf	??_lcd_send_nibble,f,c
 11359  002D44  5083               	movf	3971,w,c
 11360  002D46  181B               	xorwf	??_lcd_send_nibble,w,c
 11361  002D48  0B0F               	andlw	-241
 11362  002D4A  181B               	xorwf	??_lcd_send_nibble,w,c
 11363  002D4C  6E83               	movwf	3971,c
 11364                           
 11365                           ;lcd_x8.c: 26: delay_cycles(1);
 11366  002D4E  0E01               	movlw	1
 11367  002D50  EC03  F016         	call	_delay_cycles
 11368                           
 11369                           ;lcd_x8.c: 27: PORTEbits.RE1 = 1;
 11370  002D54  8284               	bsf	3972,1,c	;volatile
 11371                           
 11372                           ;lcd_x8.c: 28: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
 11373  002D56  0004               	clrwdt	
 11374  002D58  F000               	nop		;2 cycle nop
 11375                           
 11376                           ;lcd_x8.c: 29: PORTEbits.RE1 = 0;
 11377  002D5A  9284               	bcf	3972,1,c	;volatile
 11378  002D5C  0012               	return		;funcret
 11379  002D5E                     __end_of_lcd_send_nibble:
 11380                           	opt stack 0
 11381                           tblptru	equ	0xFF8
 11382                           tblptrh	equ	0xFF7
 11383                           tblptrl	equ	0xFF6
 11384                           tablat	equ	0xFF5
 11385                           prodh	equ	0xFF4
 11386                           prodl	equ	0xFF3
 11387                           intcon	equ	0xFF2
 11388                           postinc0	equ	0xFEE
 11389                           wreg	equ	0xFE8
 11390                           indf1	equ	0xFE7
 11391                           postdec1	equ	0xFE5
 11392                           fsr1h	equ	0xFE2
 11393                           fsr1l	equ	0xFE1
 11394                           indf2	equ	0xFDF
 11395                           postinc2	equ	0xFDE
 11396                           postdec2	equ	0xFDD
 11397                           fsr2h	equ	0xFDA
 11398                           fsr2l	equ	0xFD9
 11399                           status	equ	0xFD8
 11400                           
 11401 ;; *************** function _delay_cycles *****************
 11402 ;; Defined at:
 11403 ;;		line 13 in file "lcd_x8.c"
 11404 ;; Parameters:    Size  Location     Type
 11405 ;;  n               1    wreg     unsigned char 
 11406 ;; Auto vars:     Size  Location     Type
 11407 ;;  n               1   23[COMRAM] unsigned char 
 11408 ;;  x               2   24[COMRAM] int 
 11409 ;; Return value:  Size  Location     Type
 11410 ;;                  1    wreg      void 
 11411 ;; Registers used:
 11412 ;;		wreg, status,2, status,0
 11413 ;; Tracked objects:
 11414 ;;		On entry : 0/0
 11415 ;;		On exit  : 0/0
 11416 ;;		Unchanged: 0/0
 11417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11419 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11420 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11421 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11422 ;;Total ram usage:        6 bytes
 11423 ;; Hardware stack levels used:    1
 11424 ;; Hardware stack levels required when called:    1
 11425 ;; This function calls:
 11426 ;;		Nothing
 11427 ;; This function is called by:
 11428 ;;		_lcd_send_nibble
 11429 ;;		_lcd_send_byte
 11430 ;; This function uses a non-reentrant model
 11431 ;;
 11432                           
 11433                           	psect	text53
 11434  002C06                     __ptext53:
 11435                           	opt stack 0
 11436  002C06                     _delay_cycles:
 11437                           	opt stack 26
 11438                           
 11439                           ;incstack = 0
 11440                           ;delay_cycles@n stored from wreg
 11441  002C06  6E18               	movwf	delay_cycles@n,c
 11442                           
 11443                           ;lcd_x8.c: 14: int x;
 11444                           ;lcd_x8.c: 15: for (x = 0; x <= n; x++) {
 11445  002C08  0E00               	movlw	0
 11446  002C0A  6E1A               	movwf	delay_cycles@x+1,c
 11447  002C0C  0E00               	movlw	0
 11448  002C0E  6E19               	movwf	delay_cycles@x,c
 11449  002C10  D003               	goto	l337
 11450  002C12                     l338:
 11451  002C12  0004               	clrwdt		;# 
 11452  002C14  4A19               	infsnz	delay_cycles@x,f,c
 11453  002C16  2A1A               	incf	delay_cycles@x+1,f,c
 11454  002C18                     l337:
 11455  002C18  5018               	movf	delay_cycles@n,w,c
 11456  002C1A  6E15               	movwf	??_delay_cycles& (0+255),c
 11457  002C1C  6A16               	clrf	(??_delay_cycles+1)& (0+255),c
 11458  002C1E  5019               	movf	delay_cycles@x,w,c
 11459  002C20  5C15               	subwf	??_delay_cycles,w,c
 11460  002C22  5016               	movf	??_delay_cycles+1,w,c
 11461  002C24  0A80               	xorlw	128
 11462  002C26  6E17               	movwf	(??_delay_cycles+2)& (0+255),c
 11463  002C28  501A               	movf	delay_cycles@x+1,w,c
 11464  002C2A  0A80               	xorlw	128
 11465  002C2C  5817               	subwfb	(??_delay_cycles+2)& (0+255),w,c
 11466  002C2E  A0D8               	btfss	status,0,c
 11467  002C30  0012               	return	
 11468  002C32  D7EF               	goto	l338
 11469  002C34                     __end_of_delay_cycles:
 11470                           	opt stack 0
 11471                           tblptru	equ	0xFF8
 11472                           tblptrh	equ	0xFF7
 11473                           tblptrl	equ	0xFF6
 11474                           tablat	equ	0xFF5
 11475                           prodh	equ	0xFF4
 11476                           prodl	equ	0xFF3
 11477                           intcon	equ	0xFF2
 11478                           postinc0	equ	0xFEE
 11479                           wreg	equ	0xFE8
 11480                           indf1	equ	0xFE7
 11481                           postdec1	equ	0xFE5
 11482                           fsr1h	equ	0xFE2
 11483                           fsr1l	equ	0xFE1
 11484                           indf2	equ	0xFDF
 11485                           postinc2	equ	0xFDE
 11486                           postdec2	equ	0xFDD
 11487                           fsr2h	equ	0xFDA
 11488                           fsr2l	equ	0xFD9
 11489                           status	equ	0xFD8
 11490                           
 11491 ;; *************** function _delay_ms *****************
 11492 ;; Defined at:
 11493 ;;		line 192 in file "project.c"
 11494 ;; Parameters:    Size  Location     Type
 11495 ;;  n               2   20[COMRAM] unsigned int 
 11496 ;; Auto vars:     Size  Location     Type
 11497 ;;  i               2   22[COMRAM] int 
 11498 ;; Return value:  Size  Location     Type
 11499 ;;                  1    wreg      void 
 11500 ;; Registers used:
 11501 ;;		wreg, status,2, status,0
 11502 ;; Tracked objects:
 11503 ;;		On entry : 0/0
 11504 ;;		On exit  : 0/0
 11505 ;;		Unchanged: 0/0
 11506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11507 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11510 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11511 ;;Total ram usage:        4 bytes
 11512 ;; Hardware stack levels used:    1
 11513 ;; Hardware stack levels required when called:    1
 11514 ;; This function calls:
 11515 ;;		Nothing
 11516 ;; This function is called by:
 11517 ;;		_lcdPrint
 11518 ;;		_configure
 11519 ;;		_executeWriteCommand
 11520 ;;		_lcd_send_byte
 11521 ;;		_lcd_init
 11522 ;;		_lcd_putc
 11523 ;; This function uses a non-reentrant model
 11524 ;;
 11525                           
 11526                           	psect	text54
 11527  002C86                     __ptext54:
 11528                           	opt stack 0
 11529  002C86                     _delay_ms:
 11530                           	opt stack 27
 11531                           
 11532                           ;project.c: 194: int i;
 11533                           ;project.c: 195: for (i=0; i < n; i++){
 11534                           
 11535                           ;incstack = 0
 11536  002C86  0E00               	movlw	0
 11537  002C88  6E18               	movwf	delay_ms@i+1,c
 11538  002C8A  0E00               	movlw	0
 11539  002C8C  6E17               	movwf	delay_ms@i,c
 11540  002C8E  D007               	goto	l142
 11541  002C90                     
 11542                           ;project.c: 196: _delaywdt((unsigned long)((1)*(4000000UL/4000.0))) ;
 11543  002C90  0EC8               	movlw	200
 11544  002C92                     u7287:
 11545  002C92  0004               	clrwdt	
 11546  002C94  0004               	clrwdt	
 11547  002C96  2EE8               	decfsz	wreg,f,c
 11548  002C98  D7FC               	bra	u7287
 11549  002C9A  4A17               	infsnz	delay_ms@i,f,c
 11550  002C9C  2A18               	incf	delay_ms@i+1,f,c
 11551  002C9E                     l142:
 11552  002C9E  5015               	movf	delay_ms@n,w,c
 11553  002CA0  5C17               	subwf	delay_ms@i,w,c
 11554  002CA2  5016               	movf	delay_ms@n+1,w,c
 11555  002CA4  5818               	subwfb	delay_ms@i+1,w,c
 11556  002CA6  B0D8               	btfsc	status,0,c
 11557  002CA8  0012               	return	
 11558  002CAA  D7F2               	goto	l143
 11559  002CAC                     __end_of_delay_ms:
 11560                           	opt stack 0
 11561                           tblptru	equ	0xFF8
 11562                           tblptrh	equ	0xFF7
 11563                           tblptrl	equ	0xFF6
 11564                           tablat	equ	0xFF5
 11565                           prodh	equ	0xFF4
 11566                           prodl	equ	0xFF3
 11567                           intcon	equ	0xFF2
 11568                           postinc0	equ	0xFEE
 11569                           wreg	equ	0xFE8
 11570                           indf1	equ	0xFE7
 11571                           postdec1	equ	0xFE5
 11572                           fsr1h	equ	0xFE2
 11573                           fsr1l	equ	0xFE1
 11574                           indf2	equ	0xFDF
 11575                           postinc2	equ	0xFDE
 11576                           postdec2	equ	0xFDD
 11577                           fsr2h	equ	0xFDA
 11578                           fsr2l	equ	0xFD9
 11579                           status	equ	0xFD8
 11580                           
 11581 ;; *************** function _init_pwm1 *****************
 11582 ;; Defined at:
 11583 ;;		line 5 in file "my_pwm.c"
 11584 ;; Parameters:    Size  Location     Type
 11585 ;;		None
 11586 ;; Auto vars:     Size  Location     Type
 11587 ;;		None
 11588 ;; Return value:  Size  Location     Type
 11589 ;;                  1    wreg      void 
 11590 ;; Registers used:
 11591 ;;		wreg, status,2
 11592 ;; Tracked objects:
 11593 ;;		On entry : 0/0
 11594 ;;		On exit  : 0/0
 11595 ;;		Unchanged: 0/0
 11596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11601 ;;Total ram usage:        0 bytes
 11602 ;; Hardware stack levels used:    1
 11603 ;; Hardware stack levels required when called:    1
 11604 ;; This function calls:
 11605 ;;		Nothing
 11606 ;; This function is called by:
 11607 ;;		_configure
 11608 ;; This function uses a non-reentrant model
 11609 ;;
 11610                           
 11611                           	psect	text55
 11612  002DEE                     __ptext55:
 11613                           	opt stack 0
 11614  002DEE                     _init_pwm1:
 11615                           	opt stack 28
 11616                           
 11617                           ;my_pwm.c: 7: PR2 = 255;
 11618                           
 11619                           ;incstack = 0
 11620  002DEE  68CB               	setf	4043,c	;volatile
 11621                           
 11622                           ;my_pwm.c: 8: T2CON = 0;
 11623  002DF0  0E00               	movlw	0
 11624  002DF2  6ECA               	movwf	4042,c	;volatile
 11625                           
 11626                           ;my_pwm.c: 9: CCP1CON = 0x0C;
 11627  002DF4  0E0C               	movlw	12
 11628  002DF6  6EBD               	movwf	4029,c	;volatile
 11629                           
 11630                           ;my_pwm.c: 11: T2CONbits.TMR2ON = 1;
 11631  002DF8  84CA               	bsf	4042,2,c	;volatile
 11632                           
 11633                           ;my_pwm.c: 12: TRISCbits.RC2 =0;
 11634  002DFA  9494               	bcf	3988,2,c	;volatile
 11635  002DFC  0012               	return		;funcret
 11636  002DFE                     __end_of_init_pwm1:
 11637                           	opt stack 0
 11638                           tblptru	equ	0xFF8
 11639                           tblptrh	equ	0xFF7
 11640                           tblptrl	equ	0xFF6
 11641                           tablat	equ	0xFF5
 11642                           prodh	equ	0xFF4
 11643                           prodl	equ	0xFF3
 11644                           intcon	equ	0xFF2
 11645                           postinc0	equ	0xFEE
 11646                           wreg	equ	0xFE8
 11647                           indf1	equ	0xFE7
 11648                           postdec1	equ	0xFE5
 11649                           fsr1h	equ	0xFE2
 11650                           fsr1l	equ	0xFE1
 11651                           indf2	equ	0xFDF
 11652                           postinc2	equ	0xFDE
 11653                           postdec2	equ	0xFDD
 11654                           fsr2h	equ	0xFDA
 11655                           fsr2l	equ	0xFD9
 11656                           status	equ	0xFD8
 11657                           
 11658 ;; *************** function _init_adc_no_lib *****************
 11659 ;; Defined at:
 11660 ;;		line 11 in file "my_adc.c"
 11661 ;; Parameters:    Size  Location     Type
 11662 ;;		None
 11663 ;; Auto vars:     Size  Location     Type
 11664 ;;		None
 11665 ;; Return value:  Size  Location     Type
 11666 ;;                  1    wreg      void 
 11667 ;; Registers used:
 11668 ;;		wreg, status,2
 11669 ;; Tracked objects:
 11670 ;;		On entry : 0/0
 11671 ;;		On exit  : 0/0
 11672 ;;		Unchanged: 0/0
 11673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11678 ;;Total ram usage:        0 bytes
 11679 ;; Hardware stack levels used:    1
 11680 ;; Hardware stack levels required when called:    1
 11681 ;; This function calls:
 11682 ;;		Nothing
 11683 ;; This function is called by:
 11684 ;;		_configure
 11685 ;; This function uses a non-reentrant model
 11686 ;;
 11687                           
 11688                           	psect	text56
 11689  002E0A                     __ptext56:
 11690                           	opt stack 0
 11691  002E0A                     _init_adc_no_lib:
 11692                           	opt stack 28
 11693                           
 11694                           ;my_adc.c: 14: ADCON0 = 0;
 11695                           
 11696                           ;incstack = 0
 11697  002E0A  0E00               	movlw	0
 11698  002E0C  6EC2               	movwf	4034,c	;volatile
 11699                           
 11700                           ;my_adc.c: 15: ADCON0bits.ADON = 1;
 11701  002E0E  80C2               	bsf	4034,0,c	;volatile
 11702                           
 11703                           ;my_adc.c: 18: ADCON2 = 0b10001001;
 11704  002E10  0E89               	movlw	137
 11705  002E12  6EC0               	movwf	4032,c	;volatile
 11706  002E14  0012               	return		;funcret
 11707  002E16                     __end_of_init_adc_no_lib:
 11708                           	opt stack 0
 11709                           tblptru	equ	0xFF8
 11710                           tblptrh	equ	0xFF7
 11711                           tblptrl	equ	0xFF6
 11712                           tablat	equ	0xFF5
 11713                           prodh	equ	0xFF4
 11714                           prodl	equ	0xFF3
 11715                           intcon	equ	0xFF2
 11716                           postinc0	equ	0xFEE
 11717                           wreg	equ	0xFE8
 11718                           indf1	equ	0xFE7
 11719                           postdec1	equ	0xFE5
 11720                           fsr1h	equ	0xFE2
 11721                           fsr1l	equ	0xFE1
 11722                           indf2	equ	0xFDF
 11723                           postinc2	equ	0xFDE
 11724                           postdec2	equ	0xFDD
 11725                           fsr2h	equ	0xFDA
 11726                           fsr2l	equ	0xFD9
 11727                           status	equ	0xFD8
 11728                           
 11729 ;; *************** function _i2c_init *****************
 11730 ;; Defined at:
 11731 ;;		line 24 in file "sw_i2c.c"
 11732 ;; Parameters:    Size  Location     Type
 11733 ;;		None
 11734 ;; Auto vars:     Size  Location     Type
 11735 ;;		None
 11736 ;; Return value:  Size  Location     Type
 11737 ;;                  1    wreg      void 
 11738 ;; Registers used:
 11739 ;;		None
 11740 ;; Tracked objects:
 11741 ;;		On entry : 0/0
 11742 ;;		On exit  : 0/0
 11743 ;;		Unchanged: 0/0
 11744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11749 ;;Total ram usage:        0 bytes
 11750 ;; Hardware stack levels used:    1
 11751 ;; Hardware stack levels required when called:    1
 11752 ;; This function calls:
 11753 ;;		Nothing
 11754 ;; This function is called by:
 11755 ;;		_configure
 11756 ;; This function uses a non-reentrant model
 11757 ;;
 11758                           
 11759                           	psect	text57
 11760  002E32                     __ptext57:
 11761                           	opt stack 0
 11762  002E32                     _i2c_init:
 11763                           	opt stack 28
 11764                           
 11765                           ;sw_i2c.c: 26: TRISCbits.TRISC4=0;
 11766                           
 11767                           ;incstack = 0
 11768  002E32  9894               	bcf	3988,4,c	;volatile
 11769                           
 11770                           ;sw_i2c.c: 27: PORTCbits.RC3=1;
 11771  002E34  8682               	bsf	3970,3,c	;volatile
 11772                           
 11773                           ;sw_i2c.c: 28: PORTCbits.RC4=1;
 11774  002E36  8882               	bsf	3970,4,c	;volatile
 11775  002E38  0012               	return		;funcret
 11776  002E3A                     __end_of_i2c_init:
 11777                           	opt stack 0
 11778                           tblptru	equ	0xFF8
 11779                           tblptrh	equ	0xFF7
 11780                           tblptrl	equ	0xFF6
 11781                           tablat	equ	0xFF5
 11782                           prodh	equ	0xFF4
 11783                           prodl	equ	0xFF3
 11784                           intcon	equ	0xFF2
 11785                           postinc0	equ	0xFEE
 11786                           wreg	equ	0xFE8
 11787                           indf1	equ	0xFE7
 11788                           postdec1	equ	0xFE5
 11789                           fsr1h	equ	0xFE2
 11790                           fsr1l	equ	0xFE1
 11791                           indf2	equ	0xFDF
 11792                           postinc2	equ	0xFDE
 11793                           postdec2	equ	0xFDD
 11794                           fsr2h	equ	0xFDA
 11795                           fsr2l	equ	0xFD9
 11796                           status	equ	0xFD8
 11797                           
 11798 ;; *************** function _highIsr *****************
 11799 ;; Defined at:
 11800 ;;		line 164 in file "project.c"
 11801 ;; Parameters:    Size  Location     Type
 11802 ;;		None
 11803 ;; Auto vars:     Size  Location     Type
 11804 ;;		None
 11805 ;; Return value:  Size  Location     Type
 11806 ;;                  1    wreg      void 
 11807 ;; Registers used:
 11808 ;;		wreg, status,2
 11809 ;; Tracked objects:
 11810 ;;		On entry : 0/0
 11811 ;;		On exit  : 0/0
 11812 ;;		Unchanged: 0/0
 11813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11816 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11817 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11818 ;;Total ram usage:       20 bytes
 11819 ;; Hardware stack levels used:    1
 11820 ;; This function calls:
 11821 ;;		Nothing
 11822 ;; This function is called by:
 11823 ;;		Interrupt level 2
 11824 ;; This function uses a non-reentrant model
 11825 ;;
 11826                           
 11827                           	psect	intcode
 11828  000008                     __pintcode:
 11829                           	opt stack 0
 11830  000008                     _highIsr:
 11831                           	opt stack 23
 11832                           
 11833                           ;incstack = 0
 11834  000008  826B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11835  00000A  ED52  F011         	call	int_func,f	;refresh shadow registers
 11836                           tblptru	equ	0xFF8
 11837                           tblptrh	equ	0xFF7
 11838                           tblptrl	equ	0xFF6
 11839                           tablat	equ	0xFF5
 11840                           prodh	equ	0xFF4
 11841                           prodl	equ	0xFF3
 11842                           intcon	equ	0xFF2
 11843                           postinc0	equ	0xFEE
 11844                           wreg	equ	0xFE8
 11845                           indf1	equ	0xFE7
 11846                           postdec1	equ	0xFE5
 11847                           fsr1h	equ	0xFE2
 11848                           fsr1l	equ	0xFE1
 11849                           indf2	equ	0xFDF
 11850                           postinc2	equ	0xFDE
 11851                           postdec2	equ	0xFDD
 11852                           fsr2h	equ	0xFDA
 11853                           fsr2l	equ	0xFD9
 11854                           status	equ	0xFD8
 11855                           
 11856                           	psect	intcode_body
 11857  0022A4                     __pintcode_body:
 11858                           	opt stack 23
 11859  0022A4                     int_func:
 11860                           	opt stack 23
 11861  0022A4  0006               	pop		; remove dummy address from shadow register refresh
 11862  0022A6  CFFA F003          	movff	pclath,??_highIsr+2
 11863  0022AA  CFFB F004          	movff	pclatu,??_highIsr+3
 11864  0022AE  CFE9 F005          	movff	fsr0l,??_highIsr+4
 11865  0022B2  CFEA F006          	movff	fsr0h,??_highIsr+5
 11866  0022B6  CFE1 F007          	movff	fsr1l,??_highIsr+6
 11867  0022BA  CFE2 F008          	movff	fsr1h,??_highIsr+7
 11868  0022BE  CFD9 F009          	movff	fsr2l,??_highIsr+8
 11869  0022C2  CFDA F00A          	movff	fsr2h,??_highIsr+9
 11870  0022C6  CFF3 F00B          	movff	prodl,??_highIsr+10
 11871  0022CA  CFF4 F00C          	movff	prodh,??_highIsr+11
 11872  0022CE  CFF6 F00D          	movff	tblptrl,??_highIsr+12
 11873  0022D2  CFF7 F00E          	movff	tblptrh,??_highIsr+13
 11874  0022D6  CFF8 F00F          	movff	tblptru,??_highIsr+14
 11875  0022DA  CFF5 F010          	movff	tablat,??_highIsr+15
 11876  0022DE  C06B  F011         	movff	btemp,??_highIsr+16
 11877  0022E2  C06C  F012         	movff	btemp+1,??_highIsr+17
 11878  0022E6  C06D  F013         	movff	btemp+2,??_highIsr+18
 11879  0022EA  C06E  F014         	movff	btemp+3,??_highIsr+19
 11880                           
 11881                           ;project.c: 166: RPS_count = ((unsigned int) TMR1H << 8) | (TMR1L);
 11882  0022EE  50CF               	movf	4047,w,c	;volatile
 11883  0022F0  6E01               	movwf	??_highIsr& (0+255),c
 11884  0022F2  50CE               	movf	4046,w,c	;volatile
 11885  0022F4  0100               	movlb	0	; () banked
 11886  0022F6  6FD9               	movwf	_RPS_count& (0+255),b
 11887  0022F8  C001  F0DA         	movff	??_highIsr,_RPS_count+1
 11888                           
 11889                           ;project.c: 168: TMR0H = (unsigned char) ((3036 >> 8) & 0x00FF);
 11890  0022FC  0E0B               	movlw	11
 11891  0022FE  6ED7               	movwf	4055,c	;volatile
 11892                           
 11893                           ;project.c: 169: TMR0L = (unsigned char) (3036 & 0x00FF);
 11894  002300  0EDC               	movlw	220
 11895  002302  6ED6               	movwf	4054,c	;volatile
 11896                           
 11897                           ;project.c: 170: TMR1H = 0;
 11898  002304  0E00               	movlw	0
 11899  002306  6ECF               	movwf	4047,c	;volatile
 11900                           
 11901                           ;project.c: 171: TMR1L = 0;
 11902  002308  0E00               	movlw	0
 11903  00230A  6ECE               	movwf	4046,c	;volatile
 11904                           
 11905                           ; BSR set to: 0
 11906                           ;project.c: 172: INTCONbits.T0IF = 0;
 11907  00230C  94F2               	bcf	intcon,2,c	;volatile
 11908                           
 11909                           ; BSR set to: 0
 11910  00230E  C014  F06E         	movff	??_highIsr+19,btemp+3
 11911  002312  C013  F06D         	movff	??_highIsr+18,btemp+2
 11912  002316  C012  F06C         	movff	??_highIsr+17,btemp+1
 11913  00231A  C011  F06B         	movff	??_highIsr+16,btemp
 11914  00231E  C010  FFF5         	movff	??_highIsr+15,tablat
 11915  002322  C00F  FFF8         	movff	??_highIsr+14,tblptru
 11916  002326  C00E  FFF7         	movff	??_highIsr+13,tblptrh
 11917  00232A  C00D  FFF6         	movff	??_highIsr+12,tblptrl
 11918  00232E  C00C  FFF4         	movff	??_highIsr+11,prodh
 11919  002332  C00B  FFF3         	movff	??_highIsr+10,prodl
 11920  002336  C00A  FFDA         	movff	??_highIsr+9,fsr2h
 11921  00233A  C009  FFD9         	movff	??_highIsr+8,fsr2l
 11922  00233E  C008  FFE2         	movff	??_highIsr+7,fsr1h
 11923  002342  C007  FFE1         	movff	??_highIsr+6,fsr1l
 11924  002346  C006  FFEA         	movff	??_highIsr+5,fsr0h
 11925  00234A  C005  FFE9         	movff	??_highIsr+4,fsr0l
 11926  00234E  C004  FFFB         	movff	??_highIsr+3,pclatu
 11927  002352  C003  FFFA         	movff	??_highIsr+2,pclath
 11928  002356  926B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11929  002358  0011               	retfie		f
 11930  00235A                     __end_of_highIsr:
 11931                           	opt stack 0
 11932                           pclatu	equ	0xFFB
 11933                           pclath	equ	0xFFA
 11934                           tblptru	equ	0xFF8
 11935                           tblptrh	equ	0xFF7
 11936                           tblptrl	equ	0xFF6
 11937                           tablat	equ	0xFF5
 11938                           prodh	equ	0xFF4
 11939                           prodl	equ	0xFF3
 11940                           intcon	equ	0xFF2
 11941                           postinc0	equ	0xFEE
 11942                           fsr0h	equ	0xFEA
 11943                           fsr0l	equ	0xFE9
 11944                           wreg	equ	0xFE8
 11945                           indf1	equ	0xFE7
 11946                           postdec1	equ	0xFE5
 11947                           fsr1h	equ	0xFE2
 11948                           fsr1l	equ	0xFE1
 11949                           indf2	equ	0xFDF
 11950                           postinc2	equ	0xFDE
 11951                           postdec2	equ	0xFDD
 11952                           fsr2h	equ	0xFDA
 11953                           fsr2l	equ	0xFD9
 11954                           status	equ	0xFD8
 11955                           pclatu	equ	0xFFB
 11956                           pclath	equ	0xFFA
 11957                           tblptru	equ	0xFF8
 11958                           tblptrh	equ	0xFF7
 11959                           tblptrl	equ	0xFF6
 11960                           tablat	equ	0xFF5
 11961                           prodh	equ	0xFF4
 11962                           prodl	equ	0xFF3
 11963                           intcon	equ	0xFF2
 11964                           postinc0	equ	0xFEE
 11965                           fsr0h	equ	0xFEA
 11966                           fsr0l	equ	0xFE9
 11967                           wreg	equ	0xFE8
 11968                           indf1	equ	0xFE7
 11969                           postdec1	equ	0xFE5
 11970                           fsr1h	equ	0xFE2
 11971                           fsr1l	equ	0xFE1
 11972                           indf2	equ	0xFDF
 11973                           postinc2	equ	0xFDE
 11974                           postdec2	equ	0xFDD
 11975                           fsr2h	equ	0xFDA
 11976                           fsr2l	equ	0xFD9
 11977                           status	equ	0xFD8
 11978                           
 11979                           	psect	rparam
 11980  0000                     pclatu	equ	0xFFB
 11981                           pclath	equ	0xFFA
 11982                           tblptru	equ	0xFF8
 11983                           tblptrh	equ	0xFF7
 11984                           tblptrl	equ	0xFF6
 11985                           tablat	equ	0xFF5
 11986                           prodh	equ	0xFF4
 11987                           prodl	equ	0xFF3
 11988                           intcon	equ	0xFF2
 11989                           postinc0	equ	0xFEE
 11990                           fsr0h	equ	0xFEA
 11991                           fsr0l	equ	0xFE9
 11992                           wreg	equ	0xFE8
 11993                           indf1	equ	0xFE7
 11994                           postdec1	equ	0xFE5
 11995                           fsr1h	equ	0xFE2
 11996                           fsr1l	equ	0xFE1
 11997                           indf2	equ	0xFDF
 11998                           postinc2	equ	0xFDE
 11999                           postdec2	equ	0xFDD
 12000                           fsr2h	equ	0xFDA
 12001                           fsr2l	equ	0xFD9
 12002                           status	equ	0xFD8
 12003                           
 12004                           	psect	temp
 12005  00006B                     btemp:
 12006                           	opt stack 0
 12007  00006B                     	ds	1
 12008  0000                     int$flags	set	btemp
 12009  0000                     wtemp6	set	btemp+1
 12010                           pclatu	equ	0xFFB
 12011                           pclath	equ	0xFFA
 12012                           tblptru	equ	0xFF8
 12013                           tblptrh	equ	0xFF7
 12014                           tblptrl	equ	0xFF6
 12015                           tablat	equ	0xFF5
 12016                           prodh	equ	0xFF4
 12017                           prodl	equ	0xFF3
 12018                           intcon	equ	0xFF2
 12019                           postinc0	equ	0xFEE
 12020                           fsr0h	equ	0xFEA
 12021                           fsr0l	equ	0xFE9
 12022                           wreg	equ	0xFE8
 12023                           indf1	equ	0xFE7
 12024                           postdec1	equ	0xFE5
 12025                           fsr1h	equ	0xFE2
 12026                           fsr1l	equ	0xFE1
 12027                           indf2	equ	0xFDF
 12028                           postinc2	equ	0xFDE
 12029                           postdec2	equ	0xFDD
 12030                           fsr2h	equ	0xFDA
 12031                           fsr2l	equ	0xFD9
 12032                           status	equ	0xFD8


Data Sizes:
    Strings     178
    Constant    118
    Data        20
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     90     106
    BANK0           128     87     127
    BANK1           256    204     206
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 54
		 -> STR_25(CODE[17]), STR_21(CODE[13]), STR_18(CODE[54]), STR_12(CODE[17]), 
		 -> STR_11(CODE[12]), STR_10(CODE[8]), STR_9(CODE[20]), time(BANK0[10]), 
		 -> date(BANK0[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 128
		 -> main@Buffer(BANK1[128]), executeWriteCommand@Buffer(BANK0[32]), lcdPrint@Buffer(BANK1[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    send_string_no_lib@p	PTR unsigned char  size(2) Largest target is 128
		 -> STR_28(CODE[3]), STR_27(CODE[3]), STR_26(CODE[3]), STR_24(CODE[3]), 
		 -> STR_23(CODE[3]), STR_22(CODE[2]), STR_20(CODE[3]), STR_19(CODE[3]), 
		 -> STR_17(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> main@Buffer(BANK1[128]), STR_13(CODE[3]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 32
		 -> lcdPrint@Buffer(BANK1[32]), time(BANK0[10]), date(BANK0[10]), 

    wkday	PTR unsigned char [8] size(2) Largest target is 4
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMRAM

    _main->_executePWMCommand
    _updateRTC->___awdiv
    _send_string_no_lib->_send_byte_no_lib
    _rtc_r->_i2c_rb
    _read_adc_voltage->___ftdiv
    ___awtoft->___wmul
    _lcd_puts->_lcd_putc
    _sprintf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _executePWMCommand->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftadd
    ___ftmul->___wmul
    ___ftdiv->___ftmul
    ___ftadd->_fround
    _configure->_lcd_init
    _rtc_w->_i2c_wb
    _lcd_init->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _highIsr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_executeWriteCommand
    _lcdPrint->_sprintf
    _executeWriteCommand->_sprintf
    _sprintf->___fttol
    _executePWMCommand->___fttol

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_lcdPrint

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               156   156      0  360822
                                             88 COMRAM     2     2      0
                                             50 BANK1    154   154      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                             ___wmul
                          _configure
                  _executePWMCommand
                _executeWriteCommand
                       _initTimers01
                  _is_byte_available
                           _lcdPrint
                           _lcd_putc
                _read_adc_raw_no_lib
                   _read_adc_voltage
                   _read_byte_no_lib
                 _send_string_no_lib
                       _set_pwm1_raw
                            _sprintf
                          _updateRTC
 ---------------------------------------------------------------------------------
 (1) _updateRTC                                            2     2      0    6588
                                             34 COMRAM     2     2      0
                            ___awdiv
                            ___awmod
                          _i2c_start
                           _i2c_stop
                             _i2c_wb
 ---------------------------------------------------------------------------------
 (1) _send_string_no_lib                                   2     0      2    1435
                                             21 COMRAM     2     0      2
                   _send_byte_no_lib
 ---------------------------------------------------------------------------------
 (2) _send_byte_no_lib                                     1     1      0      22
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_byte_no_lib                                     1     1      0      23
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcdPrint                                            53    53      0  123296
                                             86 COMRAM     1     1      0
                                              0 BANK1     50    50      0
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                           _delay_ms
                         _lcd_gotoxy
                           _lcd_putc
                           _lcd_puts
                   _read_adc_voltage
                              _rtc_r
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _rtc_r                                                1     1      0     783
                                             25 COMRAM     1     1      0
                               _getd
                               _getu
                             _i2c_rb
                          _i2c_start
                           _i2c_stop
                             _i2c_wb
 ---------------------------------------------------------------------------------
 (3) _i2c_rb                                               5     5      0     167
                                             20 COMRAM     5     5      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _getu                                                 1     1      0      31
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getd                                                 1     1      0      31
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                     9     6      3   12605
                                             70 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      65
                                             20 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3416
                                             40 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcd_puts                                             2     0      2    5251
                                             34 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (1) _is_byte_available                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimers01                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _executeWriteCommand                                 34    33      1   83286
                                             86 COMRAM     1     0      1
                                             54 BANK0     33    33      0
                           _delay_ms
                           _lcd_putc
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             49    36     13   77058
                                              6 BANK0     48    35     13
                            ___awdiv
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                           ___lwtoft (ARG)
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   18160
                                             55 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   17881
                                             55 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3832
                                             34 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3133
                                             20 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    3325
                                             26 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     634
                                             20 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     853
                                             20 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3205
                                             28 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     952
                                             33 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     781
                                             20 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    6234
                                             77 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     335
                                             20 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     738
                                             20 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _lcd_putc                                             1     1      0    4736
                                             33 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_gotoxy                                           3     2      1    2357
                                             30 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _executePWMCommand                                    5     3      2   23265
                                             86 COMRAM     2     0      2
                                              6 BANK0      3     3      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                       _set_pwm1_raw
 ---------------------------------------------------------------------------------
 (1) _set_pwm1_raw                                         4     2      2     512
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3314
                                             28 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1001
                                             77 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    7241
                                             40 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    5193
                                             55 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    5818
                                             65 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3013
                                             20 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _configure                                            0     0      0    3413
                           _delay_ms
                           _i2c_init
                    _init_adc_no_lib
                          _init_pwm1
                           _lcd_init
                              _rtc_w
                         _setupPorts
                        _setupSerial
 ---------------------------------------------------------------------------------
 (2) _setupSerial                                          1     1      0       2
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _rtc_w                                                0     0      0     130
                          _i2c_start
                           _i2c_stop
                             _i2c_wb
 ---------------------------------------------------------------------------------
 (2) _i2c_wb                                               4     4      0     130
                                             20 COMRAM     4     4      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _i2c_stop                                             0     0      0       0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _i2c_start                                            0     0      0       0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             1     1      0    2583
                                             30 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1619
                                             28 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_nibble                                      2     2      0      99
                                             26 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (4) _delay_cycles                                         6     6      0      68
                                             20 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             4     2      2     698
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _init_pwm1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _highIsr                                             20    20      0       0
                                              0 COMRAM    20    20      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awtoft
     ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___lwtoft
     ___ftpack
   ___wmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
   _configure
     _delay_ms
     _i2c_init
     _init_adc_no_lib
     _init_pwm1
     _lcd_init
       _delay_ms
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
       _lcd_send_nibble
         _delay_cycles
     _rtc_w
       _i2c_start
         _delay
       _i2c_stop
         _delay
       _i2c_wb
         _delay
     _setupPorts
     _setupSerial
   _executePWMCommand
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftadd (ARG)
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _set_pwm1_raw
   _executeWriteCommand
     _delay_ms
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd (ARG)
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _initTimers01
   _is_byte_available
   _lcdPrint
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_puts
       _lcd_putc
         _delay_ms
         _lcd_gotoxy
           _lcd_send_byte
             _delay_cycles
             _delay_ms
             _lcd_send_nibble
               _delay_cycles
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
     _read_adc_voltage
       ___awtoft
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _read_adc_raw_no_lib
     _rtc_r
       _getd
       _getu
       _i2c_rb
         _delay
       _i2c_start
         _delay
       _i2c_stop
         _delay
       _i2c_wb
         _delay
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftadd (ARG)
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftadd (ARG)
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _lcd_putc
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _read_adc_raw_no_lib
   _read_adc_voltage
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _read_adc_raw_no_lib
   _read_byte_no_lib
   _send_string_no_lib
     _send_byte_no_lib
   _set_pwm1_raw
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftadd (ARG)
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftadd (ARG)
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _updateRTC
     ___awdiv
       ___awmod (ARG)
     ___awmod
     _i2c_start
       _delay
     _i2c_stop
       _delay
     _i2c_wb
       _delay

 _highIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     CC      CE       7       80.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     57      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     5A      6A       1       84.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B7      34        0.0%
DATA                 0      0     1B7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Dec 28 15:09:49 2023

             ?_read_adc_voltage 0047                     main@Command 01C7              ??_read_adc_voltage 004A  
                ?_lcd_send_byte 001D                    ___awdiv@sign 0020            ?_executeWriteCommand 0057  
           ___wmul@multiplicand 0025                     __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                   __CFG_OSC$XT 000000                    ___ftadd@exp1 004D                    ___ftadd@exp2 004C  
                   __CFG_LVP$ON 000000                    ___ftadd@sign 004B                     __CFG_WDT$ON 000000  
                           l211 0E16                             l203 0D2C                             l142 2C9E  
                           l143 2C90                             l151 2274                             l223 0FFE  
                           l152 21DE                             l208 0CA4                             l161 2214  
                           l129 1710                             l242 0EF4                             l163 2226  
                           l155 21EA                             l227 0FC8                             l172 23FA  
                           l252 0F48                             l228 0ED0                             l173 2408  
                           l165 2238                             l157 21F6                             l510 125A  
                           l254 0F5E                             l190 0C06                             l351 287A  
                           l511 1186                             l167 2244                             l159 2202  
                           l247 0F36                             l239 0EE2                             l360 2A96  
                           l504 15A0                             l600 09B6                             l184 0EB2  
                           l337 2C18                             l353 28A2                             l361 2A6E  
                           l521 0020                             l265 1046                             l338 2C12  
                           l346 2A58                             l362 2A72                             l370 298E  
                           l514 1236                             l610 0ADC                             l602 09D8  
                           l522 003C                             l434 2B7C                             l178 0B5A  
                           l291 29D8                             l363 2A76                             l371 299A  
                           l507 166C                             l515 1386                             l611 0A54  
                           l603 09E0                             l531 0276                             l372 29A6  
                           l604 0A04                             l540 0208                             l524 0080  
                           l517 1436                             l605 0A0C                             l197 0C66  
                           l358 2A7C                             l550 02DA                             l542 0222  
                           l534 01D2                             l526 01C4                             l359 2A6A  
                           l367 29B2                             l551 031C                             l535 02C6  
                           l543 0212                             l527 0198                             l368 2976  
                           l528 0146                             l376 2CC0                             l296 273C  
                           l561 04EA                             l553 03AE                             l545 0250  
                           l465 2DA2                             l377 2CAE                             l802 269C  
                           l554 0414                             l546 0234                             l538 01D6  
                           l810 2BB4                             l298 2780                             l482 2948  
                           l803 26A6                             l571 0614                             l539 01F2  
                           l299 2782                             l483 291E                             l900 19B4  
                           l820 1DC8                             l804 26B4                             l580 0722  
                           l556 043A                             l548 0264                             l468 2DAA  
                           l476 2DC4                             l901 19AA                             l821 1DB8  
                           l549 08CA                             l581 070C                             l573 0640  
                           l557 047A                             l477 2DC2                             l910 211A  
                           l814 1CFA                             l590 08AA                             l574 062A  
                           l558 0542                             l903 19D8                             l583 0746  
                           l567 05A8                             l904 19F4                             l912 2142  
                           l816 1D18                             l920 1C02                             l592 0904  
                           l584 074A                             l905 1A24                             l913 2180  
                           l817 1D5A                             l921 1C3C                             l593 091C  
                           l585 076C                             l577 0702                             l850 2450  
                           l914 21A6                             l826 1DEC                             l818 1D8A  
                           l930 1CC4                             l922 1C64                             l586 089E  
                           l578 066E                             l827 1DE0                             l931 1CB8  
                           l587 07BC                             l852 248E                             l924 1CA0  
                           l853 2484                             l925 1C90                             l597 0974  
                           l589 08C0                             l846 2432                             l942 2026  
                           l918 1BD6                             l790 25B4                             l782 255C  
                           l847 2428                             l935 24E8                             l791 25C2  
                           l783 256C                             l599 0994                             l944 204E  
                           l936 2518                             l849 2466                             l881 191A  
                           l945 2080                             l953 2CE6                             l785 258A  
                           l946 2090                             l786 2582                             l891 1976  
                           l971 1FD0                             l963 1F34                             l795 2662  
                           l892 196C                             l948 20A8                             l972 1FC4  
                           l796 266E                             l877 18F0                             l949 20B8  
                           l965 1FAC                             l789 25AA                             l886 1980  
                           l974 1FEC                             l966 1F9C                             l798 2684  
                           l959 2ABE                             l799 267C                             l978 2D74  
                  __CFG_CPB$OFF 000000                             _PR2 000FCB                    __CFG_CPD$OFF 000000  
                           _lcd 000F83                    ___awmod@sign 001A                             prod 000FF3  
     read_adc_voltage@raw_value 004E                             wreg 000FE8       __end_of_executePWMCommand 240A  
                   main@channel 01CA                     lcd_gotoxy@x 0020                     lcd_gotoxy@y 001F  
                  ___ftdiv@cntr 0041                    ___ftdiv@sign 0046                            l1004 25FA  
                          l1005 25EE                            l1014 2816                            l1015 280A  
                          l1008 262E                            l1009 263C                            l1025 28D2  
                          l1018 283E                            l1026 28C6                            l1019 284C  
                          l6021 289A                            l5125 29D0                            l6007 2872  
                          l5183 276C                            l6049 1708                            l5713 0234  
                          l6265 0C9C                            l5707 0212                            l5805 05AC  
                          l5911 0920                            l5825 062A                            l4797 2544  
                          l5829 063A                            l5849 070C                            l5785 04C4  
                          l5777 047A                            l5965 0A54                            l5969 0AD8  
                          STR_1 FFEA                            STR_2 FFE6                            STR_3 FFDE  
                          STR_4 FFDA                            STR_5 FFF6                            STR_6 FFE2  
                          STR_7 FFF2                            STR_8 FFEE                            STR_9 FF83  
                          u5011 18AE                            u5021 18C2                            u5110 194A  
                          u5050 18E2                            u6100 01BA                            u6020 006E  
                          u4420 2D9E                            u5221 200E                            u5150 1988  
                          u5310 258E                            u5080 190C                            u6040 00C8  
                          u4440 2940                            u7000 0CD8                            u5241 2036  
                          u6050 0104                            u4450 296A                            u7010 0D36  
                          u6107 01B0                            u6027 0064                            u5420 2A0E  
                          u5180 19BC                            u6300 04C4                            u6220 0354  
                          u6060 010C                            u5414 29EE                            u6070 012E  
                          u5415 29EA                            u6047 00BE                            u4447 2936  
                          u6400 0730                            u7040 0E20                            u5601 1BE6  
                          u6225 034A                            u6057 00FA                            u4457 2960  
                          u5370 2688                            u6410 0740                            u6170 02A6  
                          u6090 017C                            u5450 2756                            u6500 0958  
                          u6340 05E4                            u6260 044C                            u6077 0124  
                          u6270 048C                            u7070 0EBC                            u5464 2760  
                          u6177 029C                            u6097 0172                            u5465 275C  
                          u5730 1DF2                            u6610 0AEC                            u6370 064E  
                          u5458 2758                            u4915 2A28                            u4916 2A2A  
                          u4940 241A                            u5660 1CCA                            u6620 0B1A  
                          u5741 2102                            u5581 1BBA                            u5910 1FD6  
                          u6630 0B26                            u6710 1744                            u5761 212A  
                          u6650 2890                            u7267 2E22                            u5851 1F16  
                          u6627 0B10                            u4980 2498                            u5940 25FE  
                          u6580 0A14                            u6900 0BB0                            u7277 2A50  
                          u5870 1F52                            u6590 0A32                            u7287 2C92  
                          u6680 16E6                            u5970 281A                            u6930 0C10  
                          u6850 0B74                            u5875 1F4A                            u6960 0C70  
                          u6880 0B96                            u6698 16E8                ?_lcd_send_nibble 0001  
                          _date 00E5                     main@raw_val 01BA                            _getd 2DFE  
                          _getu 2E16                            _main 0B34                    ___ftpack@arg 0015  
              _send_byte_no_lib 2DBE                    ___ftpack@exp 0018                            _time 00DB  
                          _year 0060                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr2h 000FDA                            fsr0l 000FE9                            indf1 000FE7  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
                          btemp 006B                            prodh 000FF4                            prodl 000FF3  
                          start 000E                   __CFG_IESO$OFF 000000                     main@voltage 01B4  
                  _sprintf$1967 0099                   __CFG_MCLRE$ON 000000                    ___ftmul@cntr 0036  
                  ___param_bank 000000                    ___ftmul@sign 0037                    ___fttol@exp1 0085  
                  ___fttol@lval 0081           ??_executeWriteCommand 0058            __end_of_delay_cycles 2C34  
                         ?_getd 0001                           ?_getu 0001                           ?_main 0001  
               __end_of___awdiv 25CC                 __end_of___ftadd 1A4A                           STR_10 FFD2  
                         STR_11 FFC6                           STR_20 FFFA                           STR_12 FF97  
                         STR_13 FFFA                           STR_21 FFB9                           STR_14 FFFA  
                         STR_22 FFFD                           STR_23 FFFA                           STR_15 FFFA  
                         STR_24 FFFA                           STR_16 FFFA                           STR_17 FFFA  
                         STR_25 FFA8                           STR_26 FFFA                           STR_18 FF4D  
                         STR_27 FFFA                           STR_19 FFFA                           STR_28 FFFA  
               __end_of___awmod 26BE                 __end_of___ftdiv 21D8                 __end_of___ftneg 2CF4  
               __end_of___lldiv 264E                 __end_of___ftmul 20F2                           _T0CON 000FD5  
               ___awdiv@divisor 001D                 __end_of___llmod 285E                 __end_of___ftsub 2AE8  
               __end_of___fttol 1FFE                           _T2CON 000FCA                 ___awdiv@counter 001F  
                         _RCREG 000FAE                           _RCSTA 000FAB                           _TMR0H 000FD7  
                         _TMR1H 000FCF                           _TMR0L 000FD6                           _TMR1L 000FCE  
                         _SPBRG 000FAF                           _PORTD 000F83         read_adc_voltage@channel 004D  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                           _TRISE 000F96                           _TXREG 000FAD  
                         _TXSTA 000FAC                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
                  ___lltoft@exp 0025                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
               __end_of_highIsr 235A                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000                   ___awtoft@sign 002C  
                         _delay 2E20                 __end_of_dpowers FEFF                           _scale 1052  
               __end_of_isdigit 2D7C                           _hours 0064                 _init_adc_no_lib 2E0A  
                         _month 0061                   ___ftpack@sign 0019                           _rtc_r 1E04  
                         _rtc_w 2AE8                           _wkday 00EF                           main@k 01B3  
                         main@v 01B2                           pclath 000FFA                           tablat 000FF5  
                         status 000FD8         read_adc_voltage@voltage 004A                           wtemp6 006C  
               __end_of_sprintf 0B34                  __CFG_PBADEN$ON 000000                  main@RecvedChar 01CB  
               __initialization 26BE                    __end_of_getd 2E0A                    __end_of_getu 2E20  
                  __end_of_main 1052                 ??_lcd_send_byte 001E                __end_of_i2c_init 2E3A  
              __end_of_i2c_stop 2DDE                          ??_getd 0015                          ??_getu 0015  
                        ??_main 0059                   ___fttol@sign1 0080                   __activetblptr 000002  
                 ?_initTimers01 0001            __size_of__tdiv_to_l_ 0132      __size_of_executePWMCommand 00B0  
                        ?_delay 0001                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                ___llmod@dividend 0022                          ?_scale 0038  
                        _ADRESH 000FC4                          _ADRESL 000FC3                          _CCPR1L 000FBE  
              ___awdiv@dividend 001B                          ?_rtc_r 0001                          ?_rtc_w 0001  
              __end_of___awtoft 2BD8                __end_of___ftpack 24B8                __end_of___lltoft 291C  
              __end_of___lwtoft 2D18                          _SPBRGH 000FB0            executePWMCommand@tmp 0086  
            __size_of_i2c_start 0010     executePWMCommand@percentage 0057                __end_of_delay_ms 2CAC  
                        _i2c_rb 272A                          _i2c_wb 29C8                  __CFG_XINST$OFF 000000  
              __end_of_lcdPrint 189E                __end_of__powers_ FF26                __end_of_lcd_init 28C0  
              __end_of_lcd_putc 29C8                __end_of_lcd_puts 2CD0                          ___ftge 24B8  
                        ___wmul 2C60                       ??___awdiv 001F                       ??___ftadd 0048  
                __CFG_STVREN$ON 000000                       ??___awmod 0019                       ??___ftdiv 003E  
                     ??___ftneg 0018                       ??___lldiv 001D                       ??___ftmul 002F  
                     ??___llmod 002A                       ??___ftsub 0054                       ??___fttol 0052  
                        _fround 145A                          clear_0 270A                          clear_1 2716  
              ___awdiv@quotient 0021                 ___awmod@divisor 0017                          getd@nn 0015  
               ___awmod@counter 0019                          main@AN 01BE                       ??_highIsr 0001  
                        getu@nn 0015           ___ftmul@f3_as_product 0033                  ??_initTimers01 0015  
       __end_of_init_adc_no_lib 2E16                    __pdataCOMRAM 0067                       ??_isdigit 0015  
                  __mediumconst FED6             send_string_no_lib@p 0016                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8              _send_string_no_lib 291C  
                  ?_setupSerial 0001                       ??_sprintf 0093                      __accesstop 0080  
       __end_of__initialization 271C             ?_send_string_no_lib 0016                      ___ftadd@f1 0042  
                    ___ftadd@f2 0045                      ___ftge@ff1 0015                      ___ftge@ff2 0018  
             ?_read_byte_no_lib 0001                   ___rparam_used 000001                      ___ftdiv@f1 0038  
                    ___ftdiv@f2 003B                      ___ftdiv@f3 0042                      ___ftneg@f1 0015  
                    ___awtoft@c 0029              ??_read_byte_no_lib 0015                      ___ftmul@f1 0029  
                    ___ftmul@f2 002C                      ___ftsub@f1 004E                      ___ftsub@f2 0051  
                    ___fttol@f1 004E                  __pcstackCOMRAM 0001           __size_of_delay_cycles 002E  
                  __pidataBANK0 2DAE                   __end_of_delay 2E2A                      ___lltoft@c 001D  
                 __end_of_scale 145A                   __end_of_rtc_r 1F06                   __end_of_rtc_w 2B28  
          ??_send_string_no_lib 0018                      ___lwtoft@c 001D        __end_of_send_byte_no_lib 2DCE  
             __end_of_i2c_start 2DEE                      __div_to_l_ 1CDC       __size_of_read_adc_voltage 0066  
             lcd_gotoxy@address 0021              __size_of_configure 003E                         ??_delay 0015  
               __div_to_l_@exp1 0020                 __div_to_l_@cntr 001F                         ??_scale 003B  
                    _dayOfMonth 0062                 __div_to_l_@quot 001B                    sprintf@width 00AE  
                       ??_rtc_r 001A                         ??_rtc_w 0019                      __pbssBANK0 00D7  
                    __pbssBANK1 01CC                       ?_i2c_init 0001                       ?_i2c_stop 0001  
   __end_of_read_adc_raw_no_lib 2BA0                    _delay_cycles 2C06                   __div_to_l_@f1 0015  
                 __div_to_l_@f2 0018              __size_of_init_pwm1 0010               read_byte_no_lib@c 0015  
                       ?_i2c_rb 0001                         ?_i2c_wb 0001                  lcd_send_byte@n 001D  
                       ?___ftge 0015                         ?___wmul 0023                lcd_send_nibble@n 001C  
                       _CCP1CON 000FBD                         ?_fround 0038                       ?___awtoft 0029  
                     ?___ftpack 0015                       ?___lltoft 001D                       ?___lwtoft 001D  
              ?_init_adc_no_lib 0001                       ?_delay_ms 0015              __size_of_updateRTC 0160  
                    _lcd_gotoxy 2A66                       ?_lcdPrint 0001                       ?_lcd_init 0001  
                     ?_lcd_putc 0001                       ?_lcd_puts 0023                         i2c_rb@i 0019  
                       i2c_wb@i 0018                      ??_i2c_init 0015                      ??_i2c_stop 0015  
          __end_of_initTimers01 2C60               _is_byte_available 2D96     __end_of_executeWriteCommand 22A4  
             __end_of__npowers_ FF4D                         __Hparam 0000                      _scale$1966 003B  
               __size_of_i2c_rb 0068                 __size_of_i2c_wb 0056                         __Lparam 0000  
      __size_of_lcd_send_nibble 0022              ?_is_byte_available 0001               __end_of_configure 2B66  
               __size_of___ftge 0090                         ___awdiv 2548                         ___ftadd 189E  
                       ___awmod 264E                         ___ftdiv 20F2                         ___ftneg 2CD0  
                       ___lldiv 25CC                 __size_of___wmul 0026                         ___ftmul 1FFE  
                       ___llmod 27F8                         ___ftsub 2AA8                         ___fttol 1F06  
                 ?_set_pwm1_raw 0015                         __pcinit 26BE                      ??___awtoft 002C  
                    ??___ftpack 001A                 __size_of_fround 0252                         __ramtop 1000  
           ??_is_byte_available 0015                      ??___lltoft 0021                         __ptext0 0B34  
                       __ptext1 1A4A                         __ptext2 291C                         __ptext3 2DBE  
                       __ptext4 2E2A                         __ptext5 16AC                         __ptext6 1E04  
                       __ptext7 272A                         __ptext8 2E16                         __ptext9 2DFE  
                       _highIsr 0008                      ??___lwtoft 0020                       _T0CONbits 000FD5  
                     _T1CONbits 000FCD                     ?__div_to_l_ 0015                         _dpowers FED7  
                     _T2CONbits 000FCA       executeWriteCommand@Buffer 00B6                         _isdigit 2D5E  
             __end_of_init_pwm1 2DFE                ___awmod@dividend 0015                         _minutes 0065  
                       _seconds 0066                      ??_delay_ms 0017                         _weekday 0063  
                       main@RPS 01BC                      ??_lcdPrint 0057                         _sprintf 0012  
                    ??_lcd_init 001F                  __pintcode_body 22A4                      ??_lcd_putc 0022  
                    ??_lcd_puts 0025            end_of_initialization 271C            __size_of_setupSerial 0024  
                 __Lmediumconst FED6       __end_of_is_byte_available 2DAE                         int_func 22A4  
          lcd_send_byte@cm_data 001E                 ___lldiv@divisor 0019                 ___lldiv@counter 0021  
             __end_of_updateRTC 1BAA                       _RCSTAbits 000FAB                         postdec1 000FE5  
                       postdec2 000FDD                         postinc0 000FEE                         postinc2 000FDE  
                ??_set_pwm1_raw 0017                  __tdiv_to_l_@f1 0015                  __tdiv_to_l_@f2 0018  
         __end_of_lcd_send_byte 2A66                setupSerial@dummy 0015                   ??__tdiv_to_l_ 001B  
                     _PORTCbits 000F82                       _PORTEbits 000F84                      _setupPorts 2D7C  
                    lcdPrint@AN 0128                _read_adc_voltage 2792                       _TRISCbits 000F94  
                   ?_lcd_gotoxy 001F                      main@Buffer 0132                 _LCD_INIT_STRING 0067  
                    main@Value1 01C8                      main@Value2 01C9                       _RPS_count 00D9  
                     i2c_rb@ack 0017                       i2c_rb@ret 0018                     _CCP1CONbits 000FBD  
                   ___ftdiv@exp 0045                       i2c_wb@val 0017                       _TXSTAbits 000FAC  
           __size_of__div_to_l_ 0128                     ___ftmul@exp 0032               send_byte_no_lib@c 0015  
                __end_of_i2c_rb 2792                  __end_of_i2c_wb 2A1E                  __end_of___ftge 2548  
                __end_of___wmul 2C86                     _BAUDCONbits 000FB8                   __pidataCOMRAM 2E3A  
                 delay_cycles@n 0018                   delay_cycles@x 0019               ??_lcd_send_nibble 001B  
     __size_of_read_byte_no_lib 0008                  __end_of_fround 16AC               ?_send_byte_no_lib 0001  
           start_initialization 26BE              ??_send_byte_no_lib 0015             __end_of__tdiv_to_l_ 1CDC  
                     _i2c_start 2DDE           __size_of_initTimers01 002C      __size_of_is_byte_available 0018  
               ___llmod@divisor 0026                 ___llmod@counter 002A               __size_of_i2c_init 0008  
             __size_of_i2c_stop 0010                        ??_i2c_rb 0015                        ??_i2c_wb 0015  
executeWriteCommand@commandType 00D6                        ??___ftge 001B             __size_of_lcd_gotoxy 0042  
                      ??___wmul 0027                     __pdataBANK0 00EF    read_adc_raw_no_lib@raw_value 001A  
              __CFG_LPT1OSC$OFF 000000                        ??_fround 003B                   sprintf@tmpval 00A4  
   __size_of_send_string_no_lib 0056                     ?_setupPorts 0001                      fround@prec 0041  
             __size_of___awtoft 0038               __size_of___ftpack 00AE               __size_of___lltoft 005C  
                  _initTimers01 2C34                     __pbssCOMRAM 005B               __size_of___lwtoft 0024  
                 __pcstackBANK0 0080                   __pcstackBANK1 0100                      ?_i2c_start 0001  
                  _isdigit$1586 0016               __size_of_delay_ms 0026            __end_of_set_pwm1_raw 2C06  
             __size_of_lcdPrint 01F2               __size_of_lcd_init 0062                     sprintf@flag 00A2  
             __size_of_lcd_putc 0056               __size_of_lcd_puts 0024                     sprintf@fval 00B0  
                   sprintf@prec 00B3                       _main$1963 01B7               __CFG_CCP2MX$PORTC 000000  
                     __pintcode 0008    __size_of_read_adc_raw_no_lib 003A                   __pmediumconst FED6  
                      ?___awdiv 001B                        ?___ftadd 0042                        ?___awmod 0015  
                      ?___ftdiv 0038                        ?___ftneg 0015                        ?___lldiv 0015  
                      ?___ftmul 0029                        ?___llmod 0022                        ?___ftsub 004E  
                     __npowers_ FF26                        ?___fttol 004E                 lcdPrint@channel 0131  
                     _configure 2B28                     __tdiv_to_l_ 1BAA                        ?_highIsr 0001  
                  ??__div_to_l_ 001B                        ?_isdigit 0001                  __size_of_delay 000A  
                      ?_sprintf 0086                       _init_pwm1 2DEE                  __size_of_scale 0408  
               lcdPrint@voltage 0120                  __size_of_rtc_r 0102                  __size_of_rtc_w 0040  
      __size_of_init_adc_no_lib 000C                  ___wmul@product 0027                       delay_ms@i 0017  
                     delay_ms@n 0015             __size_of_setupPorts 001A                        _PIR1bits 000F9E  
            __end_of__div_to_l_ 1E04        __end_of_read_adc_voltage 27F8                __CFG_WDTPS$32768 000000  
               _receivedCommand 005B      read_adc_raw_no_lib@channel 0019    __size_of_executeWriteCommand 00CC  
                     _updateRTC 1A4A                      ?_configure 0001                _read_byte_no_lib 2E2A  
                    _ADCON0bits 000FC2                      _ADCON1bits 000FC1                      _ADCON2bits 000FC0  
             ___wmul@multiplier 0023                       lcd_init@i 001F                       lcd_putc@c 0022  
                     lcd_puts@s 0023                    ??_lcd_gotoxy 0020                     ??_i2c_start 0015  
                 ??_setupSerial 0015                      ?_init_pwm1 0001                       copy_data0 26D2  
                     copy_data1 26F2                        _i2c_init 2E32                        _i2c_stop 2DCE  
               _lcd_send_nibble 2D3C                        __Hrparam 0000           set_pwm1_raw@raw_value 0015  
                      __Lrparam 0000              __CFG_BOREN$SBORDIS 000000                   _lcdPrint$1962 0123  
            __end_of_lcd_gotoxy 2AA8                __size_of___awdiv 0084                __size_of___ftadd 01AC  
              __size_of___awmod 0070                __size_of___ftdiv 00E6                __size_of___ftneg 0024  
              __size_of___lldiv 0082                __size_of___ftmul 00F4                __size_of___llmod 0066  
              __size_of___ftsub 0040                __size_of___fttol 00F8                      ?_updateRTC 0001  
                      ___awtoft 2BA0                        ___ftpack 240A                     _fround$1964 003E  
                   _fround$1965 003B                        ___lltoft 28C0                        ___lwtoft 2CF4  
              __size_of_highIsr 2352                      sprintf@len 00A0                      sprintf@exp 00AC  
                    sprintf@val 00A8                  lcdPrint@Buffer 0100           __size_of_set_pwm1_raw 002E  
              __size_of_isdigit 001E                        _delay_ms 2C86                        __ptext10 2792  
                      __ptext11 2B66                        __ptext20 145A                        __ptext12 2BA0  
                      __ptext21 2C60                        __ptext13 2CAC                        __ptext30 2CD0  
                      __ptext22 264E                        __ptext14 2D96                        __ptext31 24B8  
                      __ptext23 2548                        __ptext15 2C34                        __ptext40 189E  
                      __ptext32 2972                        __ptext24 1BAA                        __ptext16 21D8  
                      __ptext41 240A                        __ptext33 2A66                        __ptext25 1CDC  
                      __ptext17 0012                        __ptext50 285E                        __ptext42 2B28  
                      __ptext34 235A                        __ptext26 28C0                        __ptext18 1052  
                      __ptext51 2A1E                        __ptext43 2D18                        __ptext35 2BD8  
                      __ptext27 27F8                        __ptext19 2D5E                        __ptext52 2D3C  
                      __ptext44 2D7C                        __ptext36 2CF4                        __ptext28 25CC  
                      __ptext53 2C06                        __ptext45 2AE8                        __ptext37 1F06  
                      __ptext29 2AA8                        __ptext54 2C86                        __ptext46 29C8  
                      __ptext38 1FFE                        __ptext55 2DEE                        __ptext47 2DCE  
                      __ptext39 20F2                        __ptext56 2E0A                        __ptext48 2DDE  
                      __ptext57 2E32                        __ptext49 2E20                        _lcdPrint 16AC  
                      __powers_ FEFF                        _lcd_init 285E                        _lcd_putc 2972  
                      _lcd_puts 2CAC                __size_of_sprintf 0B22          __size_of_lcd_send_byte 0048  
                 ?_delay_cycles 0001                   __size_of_getd 000C                   __size_of_getu 000A  
                 __size_of_main 051E       __size_of_send_byte_no_lib 0010             __end_of_setupSerial 2D3C  
                      _raw_val1 00D7               ??_init_adc_no_lib 0015                        int$flags 006B  
                  _set_pwm1_raw 2BD8                     _percentage1 01CC                     ??_configure 0020  
                  ??_setupPorts 0015                      _INTCONbits 000FF2                        isdigit@c 0017  
           _read_adc_raw_no_lib 2B66                        scale@scl 003E                     ??_init_pwm1 0015  
                      intlevel2 0000                       sprintf@ap 009E                       sprintf@cp 009C  
       __end_of_lcd_send_nibble 2D5E                __tdiv_to_l_@exp1 0023                __tdiv_to_l_@cntr 0022  
                     sprintf@sp 0086                  ??_delay_cycles 0015                __tdiv_to_l_@quot 001E  
              ___lldiv@dividend 0015              __end_of_setupPorts 2D96        executeWriteCommand@value 0057  
                      rtc_r@tmp 001A            ?_read_adc_raw_no_lib 0015      __end_of_send_string_no_lib 2972  
                   ??_updateRTC 0023                   _lcd_send_byte 2A1E                    ?__tdiv_to_l_ 0015  
                      sprintf@c 00B5                        sprintf@f 0088                ___lldiv@quotient 001D  
                   _setupSerial 2D18               _executePWMCommand 235A                     lcdPrint@RPS 0126  
           _executeWriteCommand 21D8              ?_executePWMCommand 0057        __end_of_read_byte_no_lib 2E32  
           ??_executePWMCommand 0059           ??_read_adc_raw_no_lib 0017  
